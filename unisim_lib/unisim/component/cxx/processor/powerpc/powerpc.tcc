#include "powerpc.hh"
#include <cassert>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"


#include <unisim/util/arithmetic/arithmetic.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::RotateLeft;

					inline uint32_t Mask(uint32_t mb, uint32_t me)
					{
						return (mb > me) ? ~(((uint32_t) -1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1))) : (((uint32_t)-1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1)));
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 29 "powerpc.tcc"
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"


#include <unisim/component/cxx/processor/powerpc/floating.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FPRF(uint32_t& fpscr, const FLOAT& result)
					{
						fpscr = fpscr & ~CONFIG::FPSCR_FPRF_MASK;

						if(unlikely(result.isQNaN()))
						{
							fpscr = fpscr | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isInfty()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isDenormalized()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isZero()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
					}

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FR(uint32_t& fpscr, const FLOAT& result, const Flags& flags)
					{
						if(flags.hasIncrementFraction(result.isNegative()))
						fpscr = fpscr | CONFIG::FPSCR_FR_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FR_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_FI(uint32_t& fpscr, const Flags& flags)
					{
						if(flags.isApproximate())
						fpscr = fpscr | CONFIG::FPSCR_FI_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FI_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_OX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isOverflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_OX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_UX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isUnderflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_UX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_ZX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isDivisionByZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXSNAN(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasSNaNOperand()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXISI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMinusInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXISI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIDI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyOnInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIDI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXZDZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isZeroOnZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXZDZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIMZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMultZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIMZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXCVI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isOverflow()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXCVI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_XX(uint32_t& fpscr)
					{
						fpscr = fpscr | ((fpscr & CONFIG::FPSCR_FI_MASK) ? CONFIG::FPSCR_XX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FX(uint32_t& fpscr, uint32_t old_fpscr)
					{
						fpscr = fpscr |
						(((~old_fpscr & fpscr & CONFIG::FPSCR_OX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_UX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_ZX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_XX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_FX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_VX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_VX_MASK) |
						(((fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_VX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FEX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_FEX_MASK) |
						(((fpscr & CONFIG::FPSCR_VX_MASK) && (fpscr & CONFIG::FPSCR_VE_MASK) ||
						(fpscr & CONFIG::FPSCR_OX_MASK) && (fpscr & CONFIG::FPSCR_OE_MASK) ||
						(fpscr & CONFIG::FPSCR_UX_MASK) && (fpscr & CONFIG::FPSCR_UE_MASK) ||
						(fpscr & CONFIG::FPSCR_ZX_MASK) && (fpscr & CONFIG::FPSCR_ZE_MASK) ||
						(fpscr & CONFIG::FPSCR_XX_MASK) && (fpscr & CONFIG::FPSCR_XE_MASK)) ? CONFIG::FPSCR_FEX_MASK : 0);
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 242 "powerpc.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"


#include <iostream>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::hex;
					using std::dec;
					using std::endl;
					using std::ios;

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 265 "powerpc.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
template <
#line 38 "ppc.isa"
class
#line 270 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 273 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 278 "powerpc.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
num_uops(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 284 "powerpc.tcc"
),
num_insn_operands(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
0
#line 289 "powerpc.tcc"
),
execution_unit(
#line 38 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_UNIT_T
#line 294 "powerpc.tcc"
),
serialization(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_SERIALIZATION
#line 299 "powerpc.tcc"
),
insn_latency(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 304 "powerpc.tcc"
),
insn_inv_thoughput(
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 309 "powerpc.tcc"
),
function(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
FnInvalid
#line 314 "powerpc.tcc"
),
latency(
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 319 "powerpc.tcc"
),
nstages(
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 324 "powerpc.tcc"
),
noperands(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
0
#line 329 "powerpc.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 38 "ppc.isa"
class
#line 340 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 343 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 348 "powerpc.tcc"
>::~Operation()
{
}

template <
#line 38 "ppc.isa"
class
#line 356 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 359 "powerpc.tcc"
>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 363 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 367 "powerpc.tcc"
>::is_sign_extended()
{
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 374 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 379 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 382 "powerpc.tcc"
>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 386 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 390 "powerpc.tcc"
>::load_need_conversion()
{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 397 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 402 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 405 "powerpc.tcc"
>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 409 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 413 "powerpc.tcc"
>::store_need_conversion()
{
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 420 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 425 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 428 "powerpc.tcc"
>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
uint32_t
#line 432 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 436 "powerpc.tcc"
>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 440 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 443 "powerpc.tcc"
)
{
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation do not provide single precision information: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 453 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 458 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 461 "powerpc.tcc"
>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
list <Operation<CONFIG> *>
#line 465 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 469 "powerpc.tcc"
>::split_into()
{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation non splitable: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 479 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 484 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 487 "powerpc.tcc"
>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 491 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 495 "powerpc.tcc"
>::is_splitted()
{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 502 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 507 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 510 "powerpc.tcc"
>
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::address_t
#line 514 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 518 "powerpc.tcc"
>::loadstore_effective_address(
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 522 "powerpc.tcc"
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 525 "powerpc.tcc"
)
{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return cpu->GetEA();
	}
#line 532 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 537 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 540 "powerpc.tcc"
>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 544 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 548 "powerpc.tcc"
>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 552 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 555 "powerpc.tcc"
)
{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 565 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 570 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 573 "powerpc.tcc"
>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 577 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 581 "powerpc.tcc"
>::memory_access_size()
{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0, cerr);
		cerr << endl;
		exit(1);
	}
#line 591 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 596 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 599 "powerpc.tcc"
>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 603 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 607 "powerpc.tcc"
>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 611 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 614 "powerpc.tcc"
)
{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action loadstore_target_register not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 624 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 629 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 632 "powerpc.tcc"
>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 636 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 640 "powerpc.tcc"
>::branch_conditioned()
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 647 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 652 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 655 "powerpc.tcc"
>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 659 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 663 "powerpc.tcc"
>::branch_linked()
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return false;
	}
#line 670 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 675 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 678 "powerpc.tcc"
>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 682 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 686 "powerpc.tcc"
>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 690 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 693 "powerpc.tcc"
)
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 700 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 705 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 708 "powerpc.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 712 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 716 "powerpc.tcc"
>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 720 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cia
#line 723 "powerpc.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 727 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 730 "powerpc.tcc"
)
{
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return 0;
	}
#line 737 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 742 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 745 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 752 "powerpc.tcc"
>::initialize_operands()
{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	{
		stringstream ss;
		Operation<CONFIG>::disasm(0,ss);
		string s;
		ss >> s;
		if(s!="???")
		{ cerr << "Error: missing initialize_operands for instruction \"" << s << "\" !" << endl;
		}
	}
#line 765 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 770 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 773 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 780 "powerpc.tcc"
>::initialize_latencies()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	{
	}
#line 786 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 791 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 794 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 801 "powerpc.tcc"
>::initialize_function()
{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
	{
		/*
		Operation<CONFIG>::function = FnInvalid;
		registers_written = RegNone;
		*/
	}
#line 811 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 816 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 819 "powerpc.tcc"
>
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 823 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 827 "powerpc.tcc"
>::get_num_uops(
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 831 "powerpc.tcc"
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 834 "powerpc.tcc"
)
{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{ return 1; }
#line 839 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 844 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 847 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 854 "powerpc.tcc"
>::initialize_write_fpscr()
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 859 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 864 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 867 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 874 "powerpc.tcc"
>::initialize_read_xer()
{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 879 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 884 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 887 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 894 "powerpc.tcc"
>::initialize_write_xer()
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 899 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 904 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 907 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 914 "powerpc.tcc"
>::initialize_write_crbd()
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 919 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 924 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 927 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 934 "powerpc.tcc"
>::initialize_write_cr()
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 939 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 944 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 947 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 954 "powerpc.tcc"
>::initialize_read_crbb()
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 959 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 964 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 967 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 974 "powerpc.tcc"
>::initialize_read_crba()
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 979 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 984 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 987 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 994 "powerpc.tcc"
>::initialize_read_cr()
{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 999 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1004 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1007 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1014 "powerpc.tcc"
>::initialize_write_ctr()
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1019 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1024 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1027 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1034 "powerpc.tcc"
>::initialize_write_lr()
{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1039 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1044 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1047 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1054 "powerpc.tcc"
>::initialize_write_ear()
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1059 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1064 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1067 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1074 "powerpc.tcc"
>::initialize_write_ra()
{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1079 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1084 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1087 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1094 "powerpc.tcc"
>::initialize_write_rd()
{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1099 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1104 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1107 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1114 "powerpc.tcc"
>::initialize_write_fd()
{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1119 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1124 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1127 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1134 "powerpc.tcc"
>::initialize_read_ctr()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1139 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1144 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1147 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1154 "powerpc.tcc"
>::initialize_read_lr()
{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1159 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1164 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1167 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1174 "powerpc.tcc"
>::initialize_read_fs()
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1179 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1184 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1187 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1194 "powerpc.tcc"
>::initialize_read_fc()
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1199 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1204 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1207 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1214 "powerpc.tcc"
>::initialize_read_fb()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1219 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1224 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1227 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1234 "powerpc.tcc"
>::initialize_read_fa()
{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1239 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1244 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1247 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1254 "powerpc.tcc"
>::initialize_read_rs()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1259 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1264 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1267 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1274 "powerpc.tcc"
>::initialize_read_rb()
{
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1279 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1284 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1287 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1294 "powerpc.tcc"
>::initialize_read_ra()
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1299 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1304 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1307 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1314 "powerpc.tcc"
>::initialize_serialization()
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1319 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1324 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1327 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1334 "powerpc.tcc"
>::initialize_unit()
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1339 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1344 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1347 "powerpc.tcc"
>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1351 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1355 "powerpc.tcc"
>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1359 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1362 "powerpc.tcc"
,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1366 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1369 "powerpc.tcc"
)
{
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
		execute(cpu);
	}
#line 1377 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1382 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1385 "powerpc.tcc"
>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1389 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1393 "powerpc.tcc"
>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1397 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1400 "powerpc.tcc"
,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1404 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1407 "powerpc.tcc"
)
{
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
	}
#line 1414 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1419 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1422 "powerpc.tcc"
>
#line 64 "ppc.isa"
void
#line 1426 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1430 "powerpc.tcc"
>::disasm(
#line 64 "ppc.isa"
typename CONFIG::STATE *
#line 1434 "powerpc.tcc"
#line 64 "ppc.isa"
cpu
#line 1437 "powerpc.tcc"
,
#line 64 "ppc.isa"
ostream&
#line 1441 "powerpc.tcc"
#line 64 "ppc.isa"
os
#line 1444 "powerpc.tcc"
)
{
#line 64 "ppc.isa"
	{
		os << "???";
	}
#line 1451 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1456 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1459 "powerpc.tcc"
>
#line 60 "ppc.isa"
void
#line 1463 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1467 "powerpc.tcc"
>::execute(
#line 60 "ppc.isa"
typename CONFIG::STATE *
#line 1471 "powerpc.tcc"
#line 60 "ppc.isa"
cpu
#line 1474 "powerpc.tcc"
)
{
#line 60 "ppc.isa"
	{
		throw IllegalInstructionException<CONFIG>();
	}
#line 1481 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1486 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1489 "powerpc.tcc"
>
class OpAdd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1494 "powerpc.tcc"
>
{
public:
	OpAdd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1541 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1545 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1548 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1553 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1557 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1560 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1564 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1567 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1736 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1739 "powerpc.tcc"
>
class OpAddc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1744 "powerpc.tcc"
>
{
public:
	OpAddc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1791 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1795 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1798 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1803 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1807 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1810 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1814 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1817 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1989 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1992 "powerpc.tcc"
>
class OpAdde : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1997 "powerpc.tcc"
>
{
public:
	OpAdde(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2044 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2048 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2051 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2056 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2060 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2063 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2067 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2070 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2248 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2251 "powerpc.tcc"
>
class OpAddi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2256 "powerpc.tcc"
>
{
public:
	OpAddi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2301 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2305 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2308 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2313 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2317 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2320 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2324 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2327 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2490 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2493 "powerpc.tcc"
>
class OpAddic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2498 "powerpc.tcc"
>
{
public:
	OpAddic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2543 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2547 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2550 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2555 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2559 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2562 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2566 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2569 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2735 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2738 "powerpc.tcc"
>
class OpAddic_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2743 "powerpc.tcc"
>
{
public:
	OpAddic_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2788 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2792 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2795 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2800 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2804 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2807 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2811 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2814 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2980 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2983 "powerpc.tcc"
>
class OpAddis : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2988 "powerpc.tcc"
>
{
public:
	OpAddis(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3033 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3037 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3040 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3045 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3049 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3052 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3056 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3059 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3222 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3225 "powerpc.tcc"
>
class OpAddme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3230 "powerpc.tcc"
>
{
public:
	OpAddme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3276 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3280 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3283 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3288 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3292 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3295 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3299 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3302 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3474 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3477 "powerpc.tcc"
>
class OpAddze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3482 "powerpc.tcc"
>
{
public:
	OpAddze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3528 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3532 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3535 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3540 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3544 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3547 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3551 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3554 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3732 "powerpc.tcc"
>
class OpDivw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3737 "powerpc.tcc"
>
{
public:
	OpDivw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3784 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3788 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3791 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3796 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3800 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3803 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3807 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3810 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3979 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3982 "powerpc.tcc"
>
class OpDivwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3987 "powerpc.tcc"
>
{
public:
	OpDivwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4229 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4232 "powerpc.tcc"
>
class OpMulhw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4237 "powerpc.tcc"
>
{
public:
	OpMulhw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4283 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4287 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4290 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4295 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4299 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4302 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4306 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4309 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4478 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4481 "powerpc.tcc"
>
class OpMulhwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4486 "powerpc.tcc"
>
{
public:
	OpMulhwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4532 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4536 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4539 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4544 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4548 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4551 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4555 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4558 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4727 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4730 "powerpc.tcc"
>
class OpMulli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4735 "powerpc.tcc"
>
{
public:
	OpMulli(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4780 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4784 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4787 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4792 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4796 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4799 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4803 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4806 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4969 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4972 "powerpc.tcc"
>
class OpMullw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4977 "powerpc.tcc"
>
{
public:
	OpMullw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5024 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5028 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5031 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5036 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5040 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5043 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5047 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5050 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5219 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5222 "powerpc.tcc"
>
class OpNeg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5227 "powerpc.tcc"
>
{
public:
	OpNeg(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5273 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5277 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5280 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5285 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5289 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5292 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5296 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5299 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5462 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5465 "powerpc.tcc"
>
class OpSubf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5470 "powerpc.tcc"
>
{
public:
	OpSubf(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5517 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5521 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5524 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5529 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5533 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5536 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5540 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5543 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5706 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5709 "powerpc.tcc"
>
class OpSubfc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5714 "powerpc.tcc"
>
{
public:
	OpSubfc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5761 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5765 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5768 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5773 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5777 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5780 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5784 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5787 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5953 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5956 "powerpc.tcc"
>
class OpSubfe : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5961 "powerpc.tcc"
>
{
public:
	OpSubfe(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6008 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6012 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6015 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6020 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6024 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6027 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6031 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6034 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6206 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6209 "powerpc.tcc"
>
class OpSubfic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6214 "powerpc.tcc"
>
{
public:
	OpSubfic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6259 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6263 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6266 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6271 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6275 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6278 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6282 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6285 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6451 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6454 "powerpc.tcc"
>
class OpSubfme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6459 "powerpc.tcc"
>
{
public:
	OpSubfme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6505 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6509 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6512 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6517 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6521 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6524 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6528 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6531 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6703 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6706 "powerpc.tcc"
>
class OpSubfze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6711 "powerpc.tcc"
>
{
public:
	OpSubfze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6757 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6761 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6764 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6769 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6773 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6776 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6780 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6783 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6955 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6958 "powerpc.tcc"
>
class OpCmp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6963 "powerpc.tcc"
>
{
public:
	OpCmp(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7009 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7013 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7016 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7021 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7025 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7028 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7032 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7035 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7201 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7204 "powerpc.tcc"
>
class OpCmpi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7209 "powerpc.tcc"
>
{
public:
	OpCmpi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7255 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7259 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7262 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7267 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7271 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7274 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7278 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7281 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7441 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7444 "powerpc.tcc"
>
class OpCmpl : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7449 "powerpc.tcc"
>
{
public:
	OpCmpl(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7495 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7499 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7502 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7507 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7511 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7514 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7518 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7521 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7684 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7687 "powerpc.tcc"
>
class OpCmpli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7692 "powerpc.tcc"
>
{
public:
	OpCmpli(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7738 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7742 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7745 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7750 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7754 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7757 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7761 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7764 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7924 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7927 "powerpc.tcc"
>
class OpAnd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7932 "powerpc.tcc"
>
{
public:
	OpAnd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7978 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7982 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7985 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7990 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7994 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7997 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8001 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8004 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8167 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8170 "powerpc.tcc"
>
class OpAndc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8175 "powerpc.tcc"
>
{
public:
	OpAndc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8221 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8225 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8228 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8233 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8237 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8240 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8244 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8247 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8410 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8413 "powerpc.tcc"
>
class OpAndi_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8418 "powerpc.tcc"
>
{
public:
	OpAndi_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8463 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8467 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8470 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8475 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8479 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8482 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8486 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8489 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8649 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8652 "powerpc.tcc"
>
class OpAndis_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8657 "powerpc.tcc"
>
{
public:
	OpAndis_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8702 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8706 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8709 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8714 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8718 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8721 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8725 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8728 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8888 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8891 "powerpc.tcc"
>
class OpCntlzw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8896 "powerpc.tcc"
>
{
public:
	OpCntlzw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8941 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8945 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8948 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8953 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8957 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8960 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8964 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8967 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9127 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9130 "powerpc.tcc"
>
class OpEqv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9135 "powerpc.tcc"
>
{
public:
	OpEqv(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9181 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9185 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9188 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9193 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9197 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9200 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9204 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9207 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9370 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9373 "powerpc.tcc"
>
class OpExtsb : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9378 "powerpc.tcc"
>
{
public:
	OpExtsb(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9423 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9427 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9430 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9435 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9439 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9442 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9446 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9449 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9609 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9612 "powerpc.tcc"
>
class OpExtsh : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9617 "powerpc.tcc"
>
{
public:
	OpExtsh(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9662 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9666 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9669 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9674 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9678 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9681 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9685 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9688 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9848 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9851 "powerpc.tcc"
>
class OpNand : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9856 "powerpc.tcc"
>
{
public:
	OpNand(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9902 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9906 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9909 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9914 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9918 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9921 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9925 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9928 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10091 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10094 "powerpc.tcc"
>
class OpNor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10099 "powerpc.tcc"
>
{
public:
	OpNor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10145 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10149 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10152 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10157 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10161 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10164 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10168 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10171 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10334 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10337 "powerpc.tcc"
>
class OpOr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10342 "powerpc.tcc"
>
{
public:
	OpOr(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10388 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10392 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10395 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10400 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10404 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10407 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10411 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10414 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10577 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10580 "powerpc.tcc"
>
class OpOrc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10585 "powerpc.tcc"
>
{
public:
	OpOrc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10631 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10635 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10638 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10643 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10647 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10650 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10654 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10657 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10820 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10823 "powerpc.tcc"
>
class OpOri : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10828 "powerpc.tcc"
>
{
public:
	OpOri(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10873 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10877 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10880 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10885 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10889 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10892 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10896 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10899 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11059 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11062 "powerpc.tcc"
>
class OpOris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11067 "powerpc.tcc"
>
{
public:
	OpOris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11112 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11116 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11119 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11124 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11128 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11131 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11135 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11138 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11298 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11301 "powerpc.tcc"
>
class OpXor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11306 "powerpc.tcc"
>
{
public:
	OpXor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11352 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11356 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11359 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11364 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11368 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11371 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11375 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11378 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11541 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11544 "powerpc.tcc"
>
class OpXori : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11549 "powerpc.tcc"
>
{
public:
	OpXori(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11594 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11598 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11601 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11606 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11610 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11613 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11617 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11620 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11780 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11783 "powerpc.tcc"
>
class OpXoris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11788 "powerpc.tcc"
>
{
public:
	OpXoris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11833 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11837 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11840 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11845 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11849 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11852 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11856 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11859 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12019 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12022 "powerpc.tcc"
>
class OpRlwimi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12027 "powerpc.tcc"
>
{
public:
	OpRlwimi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12075 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12079 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12082 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12087 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12091 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12094 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12098 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12101 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12264 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12267 "powerpc.tcc"
>
class OpRlwinm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12272 "powerpc.tcc"
>
{
public:
	OpRlwinm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12320 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12324 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12327 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12332 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12336 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12339 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12343 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12346 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12506 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12509 "powerpc.tcc"
>
class OpRlwnm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12514 "powerpc.tcc"
>
{
public:
	OpRlwnm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12562 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12566 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12569 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12574 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12578 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12581 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12585 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12588 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12751 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12754 "powerpc.tcc"
>
class OpSlw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12759 "powerpc.tcc"
>
{
public:
	OpSlw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12805 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12809 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12812 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12817 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12821 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12824 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12828 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12831 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12994 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12997 "powerpc.tcc"
>
class OpSraw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13002 "powerpc.tcc"
>
{
public:
	OpSraw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13048 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13052 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13055 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13060 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13064 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13067 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13071 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13074 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13240 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13243 "powerpc.tcc"
>
class OpSrawi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13248 "powerpc.tcc"
>
{
public:
	OpSrawi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13294 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13298 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13301 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13306 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13310 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13313 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13317 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13320 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13480 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13483 "powerpc.tcc"
>
class OpSrw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13488 "powerpc.tcc"
>
{
public:
	OpSrw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13560 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13723 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13726 "powerpc.tcc"
>
class OpFadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13731 "powerpc.tcc"
>
{
public:
	OpFadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13777 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13781 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13784 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13789 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13793 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13796 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13800 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13803 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13975 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13978 "powerpc.tcc"
>
class OpFadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13983 "powerpc.tcc"
>
{
public:
	OpFadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14029 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14033 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14036 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14041 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14045 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14048 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14052 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14055 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14227 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14230 "powerpc.tcc"
>
class OpFdiv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14235 "powerpc.tcc"
>
{
public:
	OpFdiv(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14281 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14285 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14288 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14293 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14297 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14300 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14304 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14307 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14479 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14482 "powerpc.tcc"
>
class OpFdivs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14487 "powerpc.tcc"
>
{
public:
	OpFdivs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14533 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14537 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14540 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14545 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14549 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14552 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14556 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14559 "powerpc.tcc"
	);
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14728 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14731 "powerpc.tcc"
>
class OpFmul : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14736 "powerpc.tcc"
>
{
public:
	OpFmul(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14782 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14786 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14789 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14794 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14798 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14801 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14805 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14808 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14980 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14983 "powerpc.tcc"
>
class OpFmuls : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14988 "powerpc.tcc"
>
{
public:
	OpFmuls(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15232 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15235 "powerpc.tcc"
>
class OpFres : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15240 "powerpc.tcc"
>
{
public:
	OpFres(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15285 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15289 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15292 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15297 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15301 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15304 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15308 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15311 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15480 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15483 "powerpc.tcc"
>
class OpFrsqrte : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15488 "powerpc.tcc"
>
{
public:
	OpFrsqrte(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15533 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15537 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15540 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15545 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15549 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15552 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15556 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15559 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15728 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15731 "powerpc.tcc"
>
class OpFsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15736 "powerpc.tcc"
>
{
public:
	OpFsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15782 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15786 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15789 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15794 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15798 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15801 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15805 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15808 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15980 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15983 "powerpc.tcc"
>
class OpFsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15988 "powerpc.tcc"
>
{
public:
	OpFsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16232 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16235 "powerpc.tcc"
>
class OpFsel : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16240 "powerpc.tcc"
>
{
public:
	OpFsel(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16287 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16291 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16294 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16299 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16303 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16306 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16310 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16313 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16488 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16491 "powerpc.tcc"
>
class OpFsqrt : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16496 "powerpc.tcc"
>
{
public:
	OpFsqrt(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16541 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16545 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16548 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16553 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16557 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16560 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16564 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16567 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16733 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16736 "powerpc.tcc"
>
class OpFsqrts : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16741 "powerpc.tcc"
>
{
public:
	OpFsqrts(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16786 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16790 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16793 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16798 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16802 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16805 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16809 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16812 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16978 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16981 "powerpc.tcc"
>
class OpFmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16986 "powerpc.tcc"
>
{
public:
	OpFmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17033 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17037 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17040 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17045 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17049 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17052 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17056 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17059 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17234 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17237 "powerpc.tcc"
>
class OpFmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17242 "powerpc.tcc"
>
{
public:
	OpFmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17289 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17293 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17296 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17301 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17305 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17308 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17312 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17315 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17490 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17493 "powerpc.tcc"
>
class OpFmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17498 "powerpc.tcc"
>
{
public:
	OpFmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17545 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17549 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17552 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17557 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17561 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17564 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17568 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17571 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17746 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17749 "powerpc.tcc"
>
class OpFmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17754 "powerpc.tcc"
>
{
public:
	OpFmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17801 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17805 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17808 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17813 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17817 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17820 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17824 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17827 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18002 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18005 "powerpc.tcc"
>
class OpFnmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18010 "powerpc.tcc"
>
{
public:
	OpFnmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18057 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18061 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18064 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18069 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18073 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18076 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18080 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18083 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18258 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18261 "powerpc.tcc"
>
class OpFnmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18266 "powerpc.tcc"
>
{
public:
	OpFnmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18313 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18317 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18320 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18325 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18329 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18332 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18336 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18339 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18514 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18517 "powerpc.tcc"
>
class OpFnmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18522 "powerpc.tcc"
>
{
public:
	OpFnmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18569 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18573 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18576 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18581 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18585 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18588 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18592 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18595 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18770 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18773 "powerpc.tcc"
>
class OpFnmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18778 "powerpc.tcc"
>
{
public:
	OpFnmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18825 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18829 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18832 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18837 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18841 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18844 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18848 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18851 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19026 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19029 "powerpc.tcc"
>
class OpFcmpo : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19034 "powerpc.tcc"
>
{
public:
	OpFcmpo(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19079 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19083 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19086 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19091 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19095 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19098 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19102 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19105 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19274 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19277 "powerpc.tcc"
>
class OpFcmpu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19282 "powerpc.tcc"
>
{
public:
	OpFcmpu(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19327 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19331 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19334 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19339 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19343 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19346 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19350 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19353 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19522 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19525 "powerpc.tcc"
>
class OpFctiw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19530 "powerpc.tcc"
>
{
public:
	OpFctiw(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19575 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19579 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19582 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19587 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19591 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19594 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19598 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19601 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19770 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19773 "powerpc.tcc"
>
class OpFctiwz : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19778 "powerpc.tcc"
>
{
public:
	OpFctiwz(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19823 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19827 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19830 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19835 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19839 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19842 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19846 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19849 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20018 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20021 "powerpc.tcc"
>
class OpFrsp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20026 "powerpc.tcc"
>
{
public:
	OpFrsp(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20071 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20075 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20078 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20083 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20087 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20090 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20094 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20097 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20266 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20269 "powerpc.tcc"
>
class OpFabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20274 "powerpc.tcc"
>
{
public:
	OpFabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20319 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20323 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20326 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20331 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20335 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20338 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20342 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20345 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20514 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20517 "powerpc.tcc"
>
class OpFmr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20522 "powerpc.tcc"
>
{
public:
	OpFmr(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20567 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20571 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20574 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20579 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20583 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20586 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20590 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20593 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20762 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20765 "powerpc.tcc"
>
class OpFnabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20770 "powerpc.tcc"
>
{
public:
	OpFnabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20815 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20819 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20822 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20827 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20831 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20834 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20838 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20841 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21010 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21013 "powerpc.tcc"
>
class OpFneg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21018 "powerpc.tcc"
>
{
public:
	OpFneg(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21063 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21067 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21070 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21075 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21079 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21082 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21086 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21089 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21258 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21261 "powerpc.tcc"
>
class OpMcrfs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21266 "powerpc.tcc"
>
{
public:
	OpMcrfs(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t crfS;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21310 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21314 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21317 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21322 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21326 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21329 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21333 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21336 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21496 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21499 "powerpc.tcc"
>
class OpMffs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21504 "powerpc.tcc"
>
{
public:
	OpMffs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21548 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21552 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21555 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21560 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21564 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21567 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21571 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21574 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21743 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21746 "powerpc.tcc"
>
class OpMtfsb0 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21751 "powerpc.tcc"
>
{
public:
	OpMtfsb0(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21795 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21799 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21802 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21807 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21811 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21814 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21818 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21821 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21984 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21987 "powerpc.tcc"
>
class OpMtfsb1 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21992 "powerpc.tcc"
>
{
public:
	OpMtfsb1(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22036 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22040 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22043 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22048 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22052 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22055 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22059 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22062 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22225 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22228 "powerpc.tcc"
>
class OpMtfsf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22233 "powerpc.tcc"
>
{
public:
	OpMtfsf(CodeType code, typename CONFIG::address_t addr);
	uint32_t fm;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22278 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22282 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22285 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22290 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22294 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22297 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22301 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22304 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_fb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22467 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22470 "powerpc.tcc"
>
class OpMtfsfi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22475 "powerpc.tcc"
>
{
public:
	OpMtfsfi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t imm;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22520 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22524 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22527 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22532 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22536 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22539 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22543 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22546 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22709 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22712 "powerpc.tcc"
>
class OpB : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22717 "powerpc.tcc"
>
{
public:
	OpB(CodeType code, typename CONFIG::address_t addr);
	int32_t li;
	uint32_t aa;
	uint32_t lk;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22762 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22766 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22769 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22774 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22778 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22781 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22785 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22788 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_write_lr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Returns the target address of branch instructions.
	* The AA bit inform if the branch is relative or absolute.
	*/
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22983 "powerpc.tcc"
	get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22987 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cia
#line 22990 "powerpc.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 22994 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 22997 "powerpc.tcc"
	);
	// ----------------------------------------------------------------------------
	/**
	* Returns true if the branch is statically preficten taken.
	* The powerpc instruction set has a bit of the bo field to set
	* up the default branch prediction value statically.
	* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
	*/
	virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 23009 "powerpc.tcc"
	branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 23013 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 23016 "powerpc.tcc"
	);
	// Are branches linked ?
	//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
		virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23023 "powerpc.tcc"
		branch_linked();
		virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23028 "powerpc.tcc"
		branch_conditioned();
	private:
	};

	template <
#line 38 "ppc.isa"
	class
#line 23036 "powerpc.tcc"
#line 38 "ppc.isa"
	CONFIG
#line 23039 "powerpc.tcc"
	>
	class OpBc : public Operation<
#line 38 "ppc.isa"
	CONFIG
#line 23044 "powerpc.tcc"
	>
	{
	public:
		OpBc(CodeType code, typename CONFIG::address_t addr);
		uint32_t bo;
		uint32_t bi;
		int32_t bd;
		uint32_t aa;
		uint32_t lk;
		/*
		*  Copyright (c) 2007,
		*  Commissariat a l'Energie Atomique (CEA)
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*/
		/* instruction endian */
		virtual
#line 60 "ppc.isa"
		void
#line 23091 "powerpc.tcc"
		execute(
#line 60 "ppc.isa"
		typename CONFIG::STATE *
#line 23095 "powerpc.tcc"
#line 60 "ppc.isa"
		cpu
#line 23098 "powerpc.tcc"
		);
		virtual
#line 64 "ppc.isa"
		void
#line 23103 "powerpc.tcc"
		disasm(
#line 64 "ppc.isa"
		typename CONFIG::STATE *
#line 23107 "powerpc.tcc"
#line 64 "ppc.isa"
		cpu
#line 23110 "powerpc.tcc"
		,
#line 64 "ppc.isa"
		ostream&
#line 23114 "powerpc.tcc"
#line 64 "ppc.isa"
		os
#line 23117 "powerpc.tcc"
		);
		virtual
		void
		initialize_unit();
		virtual
		void
		initialize_read_ctr();
		virtual
		void
		initialize_read_cr();
		virtual
		void
		initialize_write_lr();
		virtual
		void
		initialize_write_ctr();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*          Eric Renard (erenard@lri.fr)
		*          Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		//var registers_written : {registers_written_t} = {0}
		/** Functions **/
		virtual
		void
		initialize_function();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Initilize the latency values of each instrucion
		*/
		virtual
		void
		initialize_latencies();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/* --------------------------------------------------------------------------

		Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
		Mais sinon elle respecte bien le format rd = premier registre

		> lbzu lhau lhzu lwzu
		> lbzux, lhaux, lhzux, lwzux
		> stbu, sthu, stwu
		> stbux, sthux, stwux

		> lfdu, lfsu
		> lfdux
		> stfdu, stfsu
		> stfdux, stfsux

		manque les loafd flottant a update comme lfdu)
		-------------------------------------------------------------------------- */
		/* ----
		lswi: load string should output to (rd .. rd+ ceil(nb/4))
		lswx: should output to (rd.. XER[25..31] /4)
		stswi: should input (rs .. rs+ceil(nb/4))
		stswx: should input (rs .. rs+ceil(XER[25..31]/4))
		----- */
		/*
	* NOTES :
		*     -- For store fisrt operand is to oprand to write into memory.
		*     -- For other instructions (to defined)
		*/
		virtual
		void
		initialize_operands();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Returns the target address of branch instructions.
		* The AA bit inform if the branch is relative or absolute.
		*/
		virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23321 "powerpc.tcc"
		get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23325 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cia
#line 23328 "powerpc.tcc"
		,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23332 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23335 "powerpc.tcc"
		);
		// ----------------------------------------------------------------------------
		/**
		* Returns true if the branch is statically preficten taken.
		* The powerpc instruction set has a bit of the bo field to set
		* up the default branch prediction value statically.
		* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
		*/
		virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23347 "powerpc.tcc"
		branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23351 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23354 "powerpc.tcc"
		);
		// Are branches linked ?
		//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
			virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23361 "powerpc.tcc"
			branch_linked();
			virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23366 "powerpc.tcc"
			branch_conditioned();
		private:
		};

		template <
#line 38 "ppc.isa"
		class
#line 23374 "powerpc.tcc"
#line 38 "ppc.isa"
		CONFIG
#line 23377 "powerpc.tcc"
		>
		class OpBcctr : public Operation<
#line 38 "ppc.isa"
		CONFIG
#line 23382 "powerpc.tcc"
		>
		{
		public:
			OpBcctr(CodeType code, typename CONFIG::address_t addr);
			uint32_t bo;
			uint32_t bi;
			uint32_t lk;
			/*
			*  Copyright (c) 2007,
			*  Commissariat a l'Energie Atomique (CEA)
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*/
			/* instruction endian */
			virtual
#line 60 "ppc.isa"
			void
#line 23427 "powerpc.tcc"
			execute(
#line 60 "ppc.isa"
			typename CONFIG::STATE *
#line 23431 "powerpc.tcc"
#line 60 "ppc.isa"
			cpu
#line 23434 "powerpc.tcc"
			);
			virtual
#line 64 "ppc.isa"
			void
#line 23439 "powerpc.tcc"
			disasm(
#line 64 "ppc.isa"
			typename CONFIG::STATE *
#line 23443 "powerpc.tcc"
#line 64 "ppc.isa"
			cpu
#line 23446 "powerpc.tcc"
			,
#line 64 "ppc.isa"
			ostream&
#line 23450 "powerpc.tcc"
#line 64 "ppc.isa"
			os
#line 23453 "powerpc.tcc"
			);
			virtual
			void
			initialize_unit();
			virtual
			void
			initialize_read_ctr();
			virtual
			void
			initialize_read_cr();
			virtual
			void
			initialize_write_lr();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*          Eric Renard (erenard@lri.fr)
			*          Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			//var registers_written : {registers_written_t} = {0}
			/** Functions **/
			virtual
			void
			initialize_function();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Initilize the latency values of each instrucion
			*/
			virtual
			void
			initialize_latencies();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/* --------------------------------------------------------------------------

			Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
			Mais sinon elle respecte bien le format rd = premier registre

			> lbzu lhau lhzu lwzu
			> lbzux, lhaux, lhzux, lwzux
			> stbu, sthu, stwu
			> stbux, sthux, stwux

			> lfdu, lfsu
			> lfdux
			> stfdu, stfsu
			> stfdux, stfsux

			manque les loafd flottant a update comme lfdu)
			-------------------------------------------------------------------------- */
			/* ----
			lswi: load string should output to (rd .. rd+ ceil(nb/4))
			lswx: should output to (rd.. XER[25..31] /4)
			stswi: should input (rs .. rs+ceil(nb/4))
			stswx: should input (rs .. rs+ceil(XER[25..31]/4))
			----- */
			/*
		* NOTES :
			*     -- For store fisrt operand is to oprand to write into memory.
			*     -- For other instructions (to defined)
			*/
			virtual
			void
			initialize_operands();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Returns the target address of branch instructions.
			* The AA bit inform if the branch is relative or absolute.
			*/
			virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23654 "powerpc.tcc"
			get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23658 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cia
#line 23661 "powerpc.tcc"
			,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23665 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23668 "powerpc.tcc"
			);
			// ----------------------------------------------------------------------------
			/**
			* Returns true if the branch is statically preficten taken.
			* The powerpc instruction set has a bit of the bo field to set
			* up the default branch prediction value statically.
			* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
			*/
			virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23680 "powerpc.tcc"
			branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23684 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23687 "powerpc.tcc"
			);
			// Are branches linked ?
			//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
				virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23694 "powerpc.tcc"
				branch_linked();
				virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23699 "powerpc.tcc"
				branch_conditioned();
			private:
			};

			template <
#line 38 "ppc.isa"
			class
#line 23707 "powerpc.tcc"
#line 38 "ppc.isa"
			CONFIG
#line 23710 "powerpc.tcc"
			>
			class OpBclr : public Operation<
#line 38 "ppc.isa"
			CONFIG
#line 23715 "powerpc.tcc"
			>
			{
			public:
				OpBclr(CodeType code, typename CONFIG::address_t addr);
				uint32_t bo;
				uint32_t bi;
				uint32_t lk;
				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/* instruction endian */
				virtual
#line 60 "ppc.isa"
				void
#line 23760 "powerpc.tcc"
				execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 23764 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 23767 "powerpc.tcc"
				);
				virtual
#line 64 "ppc.isa"
				void
#line 23772 "powerpc.tcc"
				disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 23776 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 23779 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 23783 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 23786 "powerpc.tcc"
				);
				virtual
				void
				initialize_unit();
				virtual
				void
				initialize_read_lr();
				virtual
				void
				initialize_read_ctr();
				virtual
				void
				initialize_read_cr();
				virtual
				void
				initialize_write_lr();
				virtual
				void
				initialize_write_ctr();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*          Eric Renard (erenard@lri.fr)
				*          Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				//var registers_written : {registers_written_t} = {0}
				/** Functions **/
				virtual
				void
				initialize_function();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Initilize the latency values of each instrucion
				*/
				virtual
				void
				initialize_latencies();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/* --------------------------------------------------------------------------

				Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
				Mais sinon elle respecte bien le format rd = premier registre

				> lbzu lhau lhzu lwzu
				> lbzux, lhaux, lhzux, lwzux
				> stbu, sthu, stwu
				> stbux, sthux, stwux

				> lfdu, lfsu
				> lfdux
				> stfdu, stfsu
				> stfdux, stfsux

				manque les loafd flottant a update comme lfdu)
				-------------------------------------------------------------------------- */
				/* ----
				lswi: load string should output to (rd .. rd+ ceil(nb/4))
				lswx: should output to (rd.. XER[25..31] /4)
				stswi: should input (rs .. rs+ceil(nb/4))
				stswx: should input (rs .. rs+ceil(XER[25..31]/4))
				----- */
				/*
			* NOTES :
				*     -- For store fisrt operand is to oprand to write into memory.
				*     -- For other instructions (to defined)
				*/
				virtual
				void
				initialize_operands();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Returns the target address of branch instructions.
				* The AA bit inform if the branch is relative or absolute.
				*/
				virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23993 "powerpc.tcc"
				get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23997 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 24000 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24004 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24007 "powerpc.tcc"
				);
				// ----------------------------------------------------------------------------
				/**
				* Returns true if the branch is statically preficten taken.
				* The powerpc instruction set has a bit of the bo field to set
				* up the default branch prediction value statically.
				* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
				*/
				virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 24019 "powerpc.tcc"
				branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24023 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24026 "powerpc.tcc"
				);
				// Are branches linked ?
				//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
					virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24033 "powerpc.tcc"
					branch_linked();
					virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24038 "powerpc.tcc"
					branch_conditioned();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24049 "powerpc.tcc"
				>
				class OpCrand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24054 "powerpc.tcc"
				>
				{
				public:
					OpCrand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24099 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24103 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24106 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24111 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24115 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24118 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24122 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24125 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24297 "powerpc.tcc"
				>
				class OpCrandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24302 "powerpc.tcc"
				>
				{
				public:
					OpCrandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24347 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24351 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24354 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24359 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24363 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24366 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24370 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24373 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24545 "powerpc.tcc"
				>
				class OpCreqv : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24550 "powerpc.tcc"
				>
				{
				public:
					OpCreqv(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24595 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24599 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24602 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24607 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24611 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24614 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24618 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24621 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24793 "powerpc.tcc"
				>
				class OpCrnand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24798 "powerpc.tcc"
				>
				{
				public:
					OpCrnand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24843 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24847 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24850 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24855 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24859 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24862 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24866 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24869 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25041 "powerpc.tcc"
				>
				class OpCrnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25046 "powerpc.tcc"
				>
				{
				public:
					OpCrnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25091 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25095 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25098 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25103 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25107 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25110 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25114 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25117 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25289 "powerpc.tcc"
				>
				class OpCror : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25294 "powerpc.tcc"
				>
				{
				public:
					OpCror(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25339 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25343 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25346 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25351 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25355 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25358 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25362 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25365 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25537 "powerpc.tcc"
				>
				class OpCrorc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25542 "powerpc.tcc"
				>
				{
				public:
					OpCrorc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25587 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25591 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25594 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25599 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25603 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25606 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25610 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25613 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25785 "powerpc.tcc"
				>
				class OpCrxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25790 "powerpc.tcc"
				>
				{
				public:
					OpCrxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25835 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25839 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25842 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25847 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25851 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25854 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25858 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25861 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26033 "powerpc.tcc"
				>
				class OpMcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26038 "powerpc.tcc"
				>
				{
				public:
					OpMcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					uint32_t crfS;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26082 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26086 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26089 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26094 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26098 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26101 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26105 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26108 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_cr();
					virtual
					void
					initialize_write_cr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26274 "powerpc.tcc"
				>
				class OpLbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26279 "powerpc.tcc"
				>
				{
				public:
					OpLbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26324 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26328 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26331 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26336 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26340 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26343 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26347 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26350 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26544 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26548 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26551 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26559 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26570 "powerpc.tcc"
				>
				class OpLbzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26575 "powerpc.tcc"
				>
				{
				public:
					OpLbzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26620 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26624 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26627 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26632 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26636 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26639 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26643 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26646 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26843 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26847 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26850 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26858 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 26864 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 26869 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26880 "powerpc.tcc"
				>
				class OpLbzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26885 "powerpc.tcc"
				>
				{
				public:
					OpLbzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26930 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26934 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26937 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26942 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26946 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26949 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26953 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26956 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27156 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27160 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27163 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27171 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27177 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 27182 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27193 "powerpc.tcc"
				>
				class OpLbzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27198 "powerpc.tcc"
				>
				{
				public:
					OpLbzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27243 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27247 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27250 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27255 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27259 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27262 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27266 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27269 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27466 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27470 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27473 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27481 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27492 "powerpc.tcc"
				>
				class OpLha : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27497 "powerpc.tcc"
				>
				{
				public:
					OpLha(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27542 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27546 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27549 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27554 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27558 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27561 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27565 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27568 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27762 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27766 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27769 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27777 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27783 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27794 "powerpc.tcc"
				>
				class OpLhau : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27799 "powerpc.tcc"
				>
				{
				public:
					OpLhau(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27844 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27848 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27851 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28067 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28071 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28074 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28082 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28088 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28099 "powerpc.tcc"
				>
				class OpLhaux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28104 "powerpc.tcc"
				>
				{
				public:
					OpLhaux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28149 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28153 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28156 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28161 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28165 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28168 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28172 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28175 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28375 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28379 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28382 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28390 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28396 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28407 "powerpc.tcc"
				>
				class OpLhax : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28412 "powerpc.tcc"
				>
				{
				public:
					OpLhax(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28457 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28461 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28464 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28469 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28473 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28476 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28480 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28483 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28680 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28684 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28687 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28695 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28701 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28712 "powerpc.tcc"
				>
				class OpLhz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28717 "powerpc.tcc"
				>
				{
				public:
					OpLhz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28762 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28766 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28769 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28774 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28778 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28781 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28785 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28788 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28982 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28986 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28989 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28997 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29008 "powerpc.tcc"
				>
				class OpLhzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29013 "powerpc.tcc"
				>
				{
				public:
					OpLhzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29058 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29062 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29065 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29070 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29074 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29077 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29081 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29084 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29281 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29285 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29288 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29296 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29302 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29307 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29318 "powerpc.tcc"
				>
				class OpLhzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29323 "powerpc.tcc"
				>
				{
				public:
					OpLhzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29368 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29372 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29375 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29380 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29384 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29387 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29391 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29394 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29594 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29598 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29601 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29609 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29615 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29620 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29631 "powerpc.tcc"
				>
				class OpLhzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29636 "powerpc.tcc"
				>
				{
				public:
					OpLhzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29681 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29685 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29688 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29693 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29697 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29700 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29704 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29707 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29904 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29908 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29911 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29919 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29930 "powerpc.tcc"
				>
				class OpLwz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29935 "powerpc.tcc"
				>
				{
				public:
					OpLwz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29980 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29984 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29987 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29992 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29996 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29999 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30003 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30006 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30200 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30204 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30207 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30215 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30226 "powerpc.tcc"
				>
				class OpLwzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30231 "powerpc.tcc"
				>
				{
				public:
					OpLwzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30276 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30280 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30283 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30288 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30292 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30295 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30299 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30302 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30499 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30503 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30506 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30514 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30520 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30525 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30536 "powerpc.tcc"
				>
				class OpLwzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30541 "powerpc.tcc"
				>
				{
				public:
					OpLwzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30586 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30590 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30593 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30598 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30602 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30605 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30609 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30612 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30812 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30816 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30819 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30827 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30833 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30838 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30849 "powerpc.tcc"
				>
				class OpLwzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30854 "powerpc.tcc"
				>
				{
				public:
					OpLwzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30899 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30903 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30906 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30911 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30915 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30918 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30922 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30925 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31122 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31126 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31129 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31137 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31148 "powerpc.tcc"
				>
				class OpStb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31153 "powerpc.tcc"
				>
				{
				public:
					OpStb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31198 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31202 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31205 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31210 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31214 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31217 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31221 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31224 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31424 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31428 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31431 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31439 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31450 "powerpc.tcc"
				>
				class OpStbu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31455 "powerpc.tcc"
				>
				{
				public:
					OpStbu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31500 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31504 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31507 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31512 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31516 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31519 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31523 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31526 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31729 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31733 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31736 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31744 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 31750 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 31755 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31766 "powerpc.tcc"
				>
				class OpStbux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31771 "powerpc.tcc"
				>
				{
				public:
					OpStbux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31816 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31820 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31823 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31828 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31832 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31835 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31839 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31842 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32048 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32052 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32055 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32063 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32069 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32074 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32085 "powerpc.tcc"
				>
				class OpStbx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32090 "powerpc.tcc"
				>
				{
				public:
					OpStbx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32135 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32139 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32142 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32147 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32151 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32154 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32158 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32161 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32364 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32368 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32371 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32379 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32390 "powerpc.tcc"
				>
				class OpSth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32395 "powerpc.tcc"
				>
				{
				public:
					OpSth(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32440 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32444 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32447 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32452 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32456 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32459 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32463 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32466 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32666 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32670 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32673 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32681 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32692 "powerpc.tcc"
				>
				class OpSthu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32697 "powerpc.tcc"
				>
				{
				public:
					OpSthu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32742 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32746 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32749 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32754 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32758 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32761 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32765 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32768 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32971 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32975 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32978 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32986 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32992 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32997 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33008 "powerpc.tcc"
				>
				class OpSthux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33013 "powerpc.tcc"
				>
				{
				public:
					OpSthux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33058 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33062 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33065 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33070 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33074 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33077 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33081 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33084 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33287 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33291 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33294 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33302 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 33308 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 33313 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33324 "powerpc.tcc"
				>
				class OpSthx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33329 "powerpc.tcc"
				>
				{
				public:
					OpSthx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33374 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33378 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33381 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33386 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33390 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33393 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33397 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33400 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33600 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33604 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33607 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33615 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33626 "powerpc.tcc"
				>
				class OpStw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33631 "powerpc.tcc"
				>
				{
				public:
					OpStw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33676 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33680 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33683 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33688 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33692 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33695 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33699 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33702 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33902 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33906 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33909 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33917 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33928 "powerpc.tcc"
				>
				class OpStwu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33933 "powerpc.tcc"
				>
				{
				public:
					OpStwu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33978 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33982 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33985 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33990 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33994 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33997 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34001 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34004 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34207 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34211 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34214 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34222 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34228 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34233 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34244 "powerpc.tcc"
				>
				class OpStwux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34249 "powerpc.tcc"
				>
				{
				public:
					OpStwux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34294 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34298 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34301 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34306 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34310 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34313 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34317 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34320 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34526 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34530 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34533 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34541 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34547 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34552 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34563 "powerpc.tcc"
				>
				class OpStwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34568 "powerpc.tcc"
				>
				{
				public:
					OpStwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34613 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34617 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34620 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34625 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34629 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34632 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34636 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34639 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34842 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34846 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34849 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34857 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34868 "powerpc.tcc"
				>
				class OpLhbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34873 "powerpc.tcc"
				>
				{
				public:
					OpLhbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34918 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34922 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34925 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34930 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34934 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34937 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34941 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34944 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35141 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35145 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35148 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35156 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35167 "powerpc.tcc"
				>
				class OpLwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35172 "powerpc.tcc"
				>
				{
				public:
					OpLwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35217 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35221 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35224 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35229 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35233 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35236 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35240 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35243 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35440 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35444 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35447 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35455 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35466 "powerpc.tcc"
				>
				class OpSthbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35471 "powerpc.tcc"
				>
				{
				public:
					OpSthbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35516 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35520 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35523 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35528 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35532 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35535 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35539 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35542 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35745 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35749 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35752 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35760 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35771 "powerpc.tcc"
				>
				class OpStwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35776 "powerpc.tcc"
				>
				{
				public:
					OpStwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35821 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35825 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35828 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35833 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35837 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35840 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35844 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35847 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36050 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36054 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36057 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36065 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36076 "powerpc.tcc"
				>
				class OpLswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36081 "powerpc.tcc"
				>
				{
				public:
					OpLswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36126 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36130 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36133 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36138 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36142 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36145 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36149 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36152 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36196 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36200 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36203 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36207 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36210 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36215 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36219 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36222 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36226 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36229 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36417 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36421 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36424 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36432 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36440 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36444 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36447 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36458 "powerpc.tcc"
				>
				class OpLswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36463 "powerpc.tcc"
				>
				{
				public:
					OpLswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36508 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36512 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36515 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36520 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36524 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36527 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36531 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36534 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36581 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36585 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36588 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36592 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36595 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36600 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36604 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36607 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36611 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36614 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36802 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36806 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36809 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36817 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36825 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36829 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36832 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36843 "powerpc.tcc"
				>
				class OpStswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36848 "powerpc.tcc"
				>
				{
				public:
					OpStswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36893 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36897 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36900 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36905 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36909 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36912 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36916 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36919 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36966 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36970 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36973 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36977 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36980 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36985 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36989 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36992 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36996 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36999 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37187 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37191 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37194 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37202 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37210 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37214 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37217 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37228 "powerpc.tcc"
				>
				class OpStswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37233 "powerpc.tcc"
				>
				{
				public:
					OpStswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37278 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37282 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37285 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37290 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37294 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37297 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37301 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37304 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37354 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37358 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37361 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37365 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37368 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37373 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37377 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37380 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37384 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37387 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37575 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37579 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37582 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37590 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37598 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37602 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37605 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37616 "powerpc.tcc"
				>
				class OpLmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37621 "powerpc.tcc"
				>
				{
				public:
					OpLmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37666 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37670 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37673 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37678 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37682 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37685 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37689 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37692 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37736 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37740 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37743 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37747 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37750 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37755 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37759 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37762 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37766 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37769 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37957 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37961 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37964 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37972 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37983 "powerpc.tcc"
				>
				class OpStmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37988 "powerpc.tcc"
				>
				{
				public:
					OpStmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38033 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38037 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38040 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38045 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38049 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38052 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38056 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38059 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38106 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38110 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38113 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38117 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38120 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38125 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38129 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38132 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38136 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38139 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38327 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38331 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38334 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38342 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38353 "powerpc.tcc"
				>
				class OpLfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38358 "powerpc.tcc"
				>
				{
				public:
					OpLfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38403 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38407 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38410 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38415 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38419 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38422 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38426 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38429 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38629 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38633 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38636 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38644 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38655 "powerpc.tcc"
				>
				class OpLfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38660 "powerpc.tcc"
				>
				{
				public:
					OpLfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38705 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38709 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38712 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38717 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38721 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38724 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38728 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38731 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38934 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38938 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38941 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38949 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 38955 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 38960 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38971 "powerpc.tcc"
				>
				class OpLfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38976 "powerpc.tcc"
				>
				{
				public:
					OpLfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39021 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39025 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39028 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39033 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39037 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39040 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39044 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39047 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39253 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39257 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39260 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39268 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39274 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 39279 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39290 "powerpc.tcc"
				>
				class OpLfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39295 "powerpc.tcc"
				>
				{
				public:
					OpLfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39340 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39344 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39347 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39352 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39356 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39359 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39363 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39366 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39569 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39573 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39576 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39584 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39595 "powerpc.tcc"
				>
				class OpLfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39600 "powerpc.tcc"
				>
				{
				public:
					OpLfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39645 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39649 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39652 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39657 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39661 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39664 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39668 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39671 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39871 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39875 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39878 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39886 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39894 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39905 "powerpc.tcc"
				>
				class OpLfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39910 "powerpc.tcc"
				>
				{
				public:
					OpLfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39955 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39959 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39962 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39967 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39971 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39974 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39978 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39981 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40184 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40188 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40191 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40199 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40205 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40210 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40218 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40229 "powerpc.tcc"
				>
				class OpLfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40234 "powerpc.tcc"
				>
				{
				public:
					OpLfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40279 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40283 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40286 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40291 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40295 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40298 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40302 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40305 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40446 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40450 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40453 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40461 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40467 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40472 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40480 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40491 "powerpc.tcc"
				>
				class OpLfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40496 "powerpc.tcc"
				>
				{
				public:
					OpLfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40541 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40545 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40548 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40553 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40557 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40560 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40564 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40567 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40770 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40774 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40777 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40785 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40793 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40804 "powerpc.tcc"
				>
				class OpStfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40809 "powerpc.tcc"
				>
				{
				public:
					OpStfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40854 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40858 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40861 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40866 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40870 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40873 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40877 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40880 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41080 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41084 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41087 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41095 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41106 "powerpc.tcc"
				>
				class OpStfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41111 "powerpc.tcc"
				>
				{
				public:
					OpStfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41156 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41160 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41163 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41168 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41172 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41175 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41179 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41182 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41385 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41389 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41392 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41400 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41406 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41411 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41422 "powerpc.tcc"
				>
				class OpStfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41427 "powerpc.tcc"
				>
				{
				public:
					OpStfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41472 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41476 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41479 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41484 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41488 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41491 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41495 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41498 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41704 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41708 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41711 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41719 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41725 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41730 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41741 "powerpc.tcc"
				>
				class OpStfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41746 "powerpc.tcc"
				>
				{
				public:
					OpStfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41791 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41795 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41798 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41803 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41807 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41810 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41814 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41817 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42020 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42024 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42027 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42035 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42046 "powerpc.tcc"
				>
				class OpStfiwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42051 "powerpc.tcc"
				>
				{
				public:
					OpStfiwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42096 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42100 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42103 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42108 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42112 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42115 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42119 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42122 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42325 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42329 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42332 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42340 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42351 "powerpc.tcc"
				>
				class OpStfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42356 "powerpc.tcc"
				>
				{
				public:
					OpStfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42401 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42405 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42408 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42413 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42417 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42420 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42424 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42427 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42627 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42631 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42634 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42642 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42650 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42654 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42657 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42673 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42684 "powerpc.tcc"
				>
				class OpStfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42689 "powerpc.tcc"
				>
				{
				public:
					OpStfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42734 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42738 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42741 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42746 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42750 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42753 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42757 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42760 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42963 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42967 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42970 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42978 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42984 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 42989 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42997 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43001 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43004 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43020 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43031 "powerpc.tcc"
				>
				class OpStfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43036 "powerpc.tcc"
				>
				{
				public:
					OpStfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43081 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43085 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43088 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43093 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43097 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43100 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43104 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43107 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43313 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43317 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43320 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43328 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43334 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 43339 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43347 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43351 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43354 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43370 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43381 "powerpc.tcc"
				>
				class OpStfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43386 "powerpc.tcc"
				>
				{
				public:
					OpStfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43431 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43435 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43438 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43443 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43447 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43450 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43454 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43457 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43660 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43664 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43667 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43675 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43683 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43687 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43690 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43706 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43717 "powerpc.tcc"
				>
				class OpDcba : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43722 "powerpc.tcc"
				>
				{
				public:
					OpDcba(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43766 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43770 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43773 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43778 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43782 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43785 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43789 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43792 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43958 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43969 "powerpc.tcc"
				>
				class OpDcbf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43974 "powerpc.tcc"
				>
				{
				public:
					OpDcbf(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44018 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44022 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44025 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44030 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44034 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44037 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44041 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44044 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44210 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44221 "powerpc.tcc"
				>
				class OpDcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44226 "powerpc.tcc"
				>
				{
				public:
					OpDcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44270 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44274 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44277 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44282 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44286 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44289 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44293 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44296 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44459 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44470 "powerpc.tcc"
				>
				class OpDcbst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44475 "powerpc.tcc"
				>
				{
				public:
					OpDcbst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44519 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44523 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44526 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44531 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44535 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44538 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44542 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44545 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44711 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44722 "powerpc.tcc"
				>
				class OpDcbt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44727 "powerpc.tcc"
				>
				{
				public:
					OpDcbt(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44771 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44775 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44778 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44783 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44787 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44790 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44794 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44797 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44957 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44968 "powerpc.tcc"
				>
				class OpDcbtst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44973 "powerpc.tcc"
				>
				{
				public:
					OpDcbtst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45017 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45021 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45024 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45029 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45033 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45036 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45040 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45043 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45203 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45214 "powerpc.tcc"
				>
				class OpDcbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45219 "powerpc.tcc"
				>
				{
				public:
					OpDcbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45263 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45267 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45270 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45275 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45279 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45282 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45286 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45289 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45455 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45466 "powerpc.tcc"
				>
				class OpIcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45471 "powerpc.tcc"
				>
				{
				public:
					OpIcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45515 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45519 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45522 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45527 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45531 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45534 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45538 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45541 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45707 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45718 "powerpc.tcc"
				>
				class OpTlbia : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45723 "powerpc.tcc"
				>
				{
				public:
					OpTlbia(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45765 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45769 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45772 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45777 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45781 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45784 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45788 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45791 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45948 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45959 "powerpc.tcc"
				>
				class OpTlbie : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45964 "powerpc.tcc"
				>
				{
				public:
					OpTlbie(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46007 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46011 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46014 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46019 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46023 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46026 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46030 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46033 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46196 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46207 "powerpc.tcc"
				>
				class OpTlbsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46212 "powerpc.tcc"
				>
				{
				public:
					OpTlbsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46254 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46258 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46261 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46266 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46270 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46273 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46277 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46280 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46440 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46451 "powerpc.tcc"
				>
				class OpTlbld : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46456 "powerpc.tcc"
				>
				{
				public:
					OpTlbld(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46499 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46503 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46506 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46511 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46515 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46518 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46522 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46525 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46545 "powerpc.tcc"
				>
				class OpTlbli : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46550 "powerpc.tcc"
				>
				{
				public:
					OpTlbli(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46593 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46597 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46600 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46605 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46609 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46612 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46616 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46619 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46639 "powerpc.tcc"
				>
				class OpEciwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46644 "powerpc.tcc"
				>
				{
				public:
					OpEciwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46689 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46693 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46696 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46701 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46705 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46708 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46712 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46715 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46909 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 46913 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 46916 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46924 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46935 "powerpc.tcc"
				>
				class OpEcowx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46940 "powerpc.tcc"
				>
				{
				public:
					OpEcowx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46985 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46989 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46992 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46997 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47001 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47004 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47008 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47011 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47140 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47144 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47147 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47155 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47166 "powerpc.tcc"
				>
				class OpEieio : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47171 "powerpc.tcc"
				>
				{
				public:
					OpEieio(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47213 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47217 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47220 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47225 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47229 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47232 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47236 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47239 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47399 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47410 "powerpc.tcc"
				>
				class OpIsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47415 "powerpc.tcc"
				>
				{
				public:
					OpIsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47457 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47461 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47464 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47469 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47473 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47476 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47480 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47483 "powerpc.tcc"
					);
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47640 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47651 "powerpc.tcc"
				>
				class OpLwarx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47656 "powerpc.tcc"
				>
				{
				public:
					OpLwarx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47701 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47705 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47708 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47713 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47717 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47720 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47724 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47727 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47927 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47931 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47934 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47942 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47953 "powerpc.tcc"
				>
				class OpStwcx_ : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47958 "powerpc.tcc"
				>
				{
				public:
					OpStwcx_(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48003 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48007 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48010 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48015 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48019 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48022 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48026 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48029 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48198 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48209 "powerpc.tcc"
				>
				class OpSync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48214 "powerpc.tcc"
				>
				{
				public:
					OpSync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48256 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48260 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48263 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48268 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48272 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48275 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48279 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48282 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48442 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48453 "powerpc.tcc"
				>
				class OpSc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48458 "powerpc.tcc"
				>
				{
				public:
					OpSc(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48500 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48504 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48507 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48512 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48516 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48519 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48523 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48526 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48683 "powerpc.tcc"
				>
				class OpRfi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48688 "powerpc.tcc"
				>
				{
				public:
					OpRfi(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48730 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48734 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48737 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48742 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48746 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48749 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48753 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48756 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48913 "powerpc.tcc"
				>
				class OpTw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48918 "powerpc.tcc"
				>
				{
				public:
					OpTw(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48963 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48967 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48970 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48975 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48979 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48982 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48986 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48989 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49149 "powerpc.tcc"
				>
				class OpTwi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49154 "powerpc.tcc"
				>
				{
				public:
					OpTwi(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					int32_t simm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49199 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49203 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49206 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49385 "powerpc.tcc"
				>
				class OpMcrxr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49390 "powerpc.tcc"
				>
				{
				public:
					OpMcrxr(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49433 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49437 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49440 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49445 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49449 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49452 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49456 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49459 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49619 "powerpc.tcc"
				>
				class OpMfcr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49624 "powerpc.tcc"
				>
				{
				public:
					OpMfcr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49667 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49671 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49674 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49679 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49683 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49686 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49690 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49693 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49856 "powerpc.tcc"
				>
				class OpMfmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49861 "powerpc.tcc"
				>
				{
				public:
					OpMfmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49904 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49908 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49911 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49916 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49920 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49923 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49927 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49930 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50090 "powerpc.tcc"
				>
				class OpMfspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50095 "powerpc.tcc"
				>
				{
				public:
					OpMfspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50139 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50143 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50146 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50151 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50155 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50158 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50162 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50165 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50328 "powerpc.tcc"
				>
				class OpMtspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50333 "powerpc.tcc"
				>
				{
				public:
					OpMtspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50377 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50381 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50384 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50389 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50393 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50396 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50400 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50403 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50566 "powerpc.tcc"
				>
				class OpMftb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50571 "powerpc.tcc"
				>
				{
				public:
					OpMftb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t tbr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50615 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50619 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50622 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50627 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50631 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50634 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50638 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50641 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50804 "powerpc.tcc"
				>
				class OpMtcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50809 "powerpc.tcc"
				>
				{
				public:
					OpMtcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t crm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50853 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50857 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50860 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50865 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50869 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50872 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50876 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50879 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51039 "powerpc.tcc"
				>
				class OpMtmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51044 "powerpc.tcc"
				>
				{
				public:
					OpMtmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51087 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51091 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51094 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51099 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51103 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51106 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51110 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51113 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51273 "powerpc.tcc"
				>
				class OpMfsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51278 "powerpc.tcc"
				>
				{
				public:
					OpMfsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51322 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51326 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51329 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51334 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51338 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51341 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51345 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51348 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51508 "powerpc.tcc"
				>
				class OpMfsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51513 "powerpc.tcc"
				>
				{
				public:
					OpMfsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51557 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51561 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51564 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51569 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51573 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51576 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51580 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51583 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51743 "powerpc.tcc"
				>
				class OpMtsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51748 "powerpc.tcc"
				>
				{
				public:
					OpMtsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51792 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51796 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51799 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51981 "powerpc.tcc"
				>
				class OpMtsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51986 "powerpc.tcc"
				>
				{
				public:
					OpMtsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 52030 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 52034 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 52037 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 52042 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52046 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52049 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52053 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52056 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52219 "powerpc.tcc"
				>
				class OpDss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52224 "powerpc.tcc"
				>
				{
				public:
					OpDss(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52233 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52237 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52240 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52244 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52247 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52261 "powerpc.tcc"
				>
				class OpDssall : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52266 "powerpc.tcc"
				>
				{
				public:
					OpDssall(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52275 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52279 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52282 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52286 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52289 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52303 "powerpc.tcc"
				>
				class OpDst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52308 "powerpc.tcc"
				>
				{
				public:
					OpDst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52319 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52323 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52326 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52330 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52333 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52347 "powerpc.tcc"
				>
				class OpDstst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52352 "powerpc.tcc"
				>
				{
				public:
					OpDstst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52363 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52367 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52370 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52374 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52377 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52391 "powerpc.tcc"
				>
				class OpDststt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52396 "powerpc.tcc"
				>
				{
				public:
					OpDststt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52407 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52411 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52414 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52418 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52421 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52435 "powerpc.tcc"
				>
				class OpDstt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52440 "powerpc.tcc"
				>
				{
				public:
					OpDstt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52451 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52455 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52458 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52462 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52465 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52479 "powerpc.tcc"
				>
				class OpLvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52484 "powerpc.tcc"
				>
				{
				public:
					OpLvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52495 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52499 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52502 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52506 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52509 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52523 "powerpc.tcc"
				>
				class OpLvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52528 "powerpc.tcc"
				>
				{
				public:
					OpLvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52539 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52543 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52546 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52550 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52553 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52567 "powerpc.tcc"
				>
				class OpLvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52572 "powerpc.tcc"
				>
				{
				public:
					OpLvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52583 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52587 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52590 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52594 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52597 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52611 "powerpc.tcc"
				>
				class OpLvsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52616 "powerpc.tcc"
				>
				{
				public:
					OpLvsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52627 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52631 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52634 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52638 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52641 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52655 "powerpc.tcc"
				>
				class OpLvsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52660 "powerpc.tcc"
				>
				{
				public:
					OpLvsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52671 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52675 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52678 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52682 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52685 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52699 "powerpc.tcc"
				>
				class OpLvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52704 "powerpc.tcc"
				>
				{
				public:
					OpLvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52715 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52719 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52722 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52726 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52729 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52743 "powerpc.tcc"
				>
				class OpLvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52748 "powerpc.tcc"
				>
				{
				public:
					OpLvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52759 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52763 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52766 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52770 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52773 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52787 "powerpc.tcc"
				>
				class OpMfvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52792 "powerpc.tcc"
				>
				{
				public:
					OpMfvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					virtual
#line 64 "ppc.isa"
					void
#line 52801 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52805 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52808 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52812 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52815 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52832 "powerpc.tcc"
				>
				class OpMtvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52837 "powerpc.tcc"
				>
				{
				public:
					OpMtvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 52846 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52850 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52853 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52857 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52860 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52877 "powerpc.tcc"
				>
				class OpStvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52882 "powerpc.tcc"
				>
				{
				public:
					OpStvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52893 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52897 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52900 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52904 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52907 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52924 "powerpc.tcc"
				>
				class OpStvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52929 "powerpc.tcc"
				>
				{
				public:
					OpStvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52940 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52944 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52947 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52951 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52954 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52971 "powerpc.tcc"
				>
				class OpStvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52976 "powerpc.tcc"
				>
				{
				public:
					OpStvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52987 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52991 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52994 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52998 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53001 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53018 "powerpc.tcc"
				>
				class OpStvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53023 "powerpc.tcc"
				>
				{
				public:
					OpStvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53034 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53038 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53041 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53045 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53048 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53065 "powerpc.tcc"
				>
				class OpStvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53070 "powerpc.tcc"
				>
				{
				public:
					OpStvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53081 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53085 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53088 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53092 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53095 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53112 "powerpc.tcc"
				>
				class OpVaddcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53117 "powerpc.tcc"
				>
				{
				public:
					OpVaddcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53128 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53132 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53135 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53139 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53142 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53156 "powerpc.tcc"
				>
				class OpVaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53161 "powerpc.tcc"
				>
				{
				public:
					OpVaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53172 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53176 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53179 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53183 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53186 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53200 "powerpc.tcc"
				>
				class OpVaddsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53205 "powerpc.tcc"
				>
				{
				public:
					OpVaddsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53216 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53220 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53223 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53227 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53230 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53244 "powerpc.tcc"
				>
				class OpVaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53249 "powerpc.tcc"
				>
				{
				public:
					OpVaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53260 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53264 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53267 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53271 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53274 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53288 "powerpc.tcc"
				>
				class OpVaddsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53293 "powerpc.tcc"
				>
				{
				public:
					OpVaddsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53304 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53308 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53311 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53315 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53318 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53332 "powerpc.tcc"
				>
				class OpVaddubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53337 "powerpc.tcc"
				>
				{
				public:
					OpVaddubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53348 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53352 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53355 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53359 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53362 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53376 "powerpc.tcc"
				>
				class OpVaddubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53381 "powerpc.tcc"
				>
				{
				public:
					OpVaddubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53392 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53396 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53399 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53403 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53406 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53420 "powerpc.tcc"
				>
				class OpVadduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53425 "powerpc.tcc"
				>
				{
				public:
					OpVadduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53436 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53440 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53443 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53447 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53450 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53464 "powerpc.tcc"
				>
				class OpVadduhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53469 "powerpc.tcc"
				>
				{
				public:
					OpVadduhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53480 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53484 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53487 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53491 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53494 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53508 "powerpc.tcc"
				>
				class OpVadduwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53513 "powerpc.tcc"
				>
				{
				public:
					OpVadduwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53524 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53528 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53531 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53535 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53538 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53552 "powerpc.tcc"
				>
				class OpVadduws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53557 "powerpc.tcc"
				>
				{
				public:
					OpVadduws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53568 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53572 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53575 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53579 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53582 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53596 "powerpc.tcc"
				>
				class OpVand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53601 "powerpc.tcc"
				>
				{
				public:
					OpVand(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53612 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53616 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53619 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53623 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53626 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53640 "powerpc.tcc"
				>
				class OpVandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53645 "powerpc.tcc"
				>
				{
				public:
					OpVandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53656 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53660 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53663 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53667 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53670 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53684 "powerpc.tcc"
				>
				class OpVavgsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53689 "powerpc.tcc"
				>
				{
				public:
					OpVavgsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53700 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53704 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53707 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53711 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53714 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53728 "powerpc.tcc"
				>
				class OpVavgsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53733 "powerpc.tcc"
				>
				{
				public:
					OpVavgsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53744 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53748 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53751 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53755 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53758 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53772 "powerpc.tcc"
				>
				class OpVavgsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53777 "powerpc.tcc"
				>
				{
				public:
					OpVavgsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53788 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53792 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53795 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53799 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53802 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53816 "powerpc.tcc"
				>
				class OpVavgub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53821 "powerpc.tcc"
				>
				{
				public:
					OpVavgub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53832 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53836 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53839 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53843 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53846 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53860 "powerpc.tcc"
				>
				class OpVavguh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53865 "powerpc.tcc"
				>
				{
				public:
					OpVavguh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53876 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53880 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53883 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53887 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53890 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53904 "powerpc.tcc"
				>
				class OpVavguw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53909 "powerpc.tcc"
				>
				{
				public:
					OpVavguw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53920 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53924 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53927 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53931 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53934 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53948 "powerpc.tcc"
				>
				class OpVcfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53953 "powerpc.tcc"
				>
				{
				public:
					OpVcfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53964 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53968 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53971 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53975 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53978 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53992 "powerpc.tcc"
				>
				class OpVcfux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53997 "powerpc.tcc"
				>
				{
				public:
					OpVcfux(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54008 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54012 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54015 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54019 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54022 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54036 "powerpc.tcc"
				>
				class OpVcmpbfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54041 "powerpc.tcc"
				>
				{
				public:
					OpVcmpbfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54053 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54057 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54060 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54064 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54067 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54081 "powerpc.tcc"
				>
				class OpVcmpeqfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54086 "powerpc.tcc"
				>
				{
				public:
					OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54098 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54102 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54105 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54109 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54112 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54126 "powerpc.tcc"
				>
				class OpVcmpequb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54131 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54143 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54147 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54150 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54154 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54157 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54171 "powerpc.tcc"
				>
				class OpVcmpequh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54176 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54188 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54192 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54195 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54199 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54202 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54216 "powerpc.tcc"
				>
				class OpVcmpequw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54221 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54233 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54237 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54240 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54244 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54247 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54261 "powerpc.tcc"
				>
				class OpVcmpgefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54266 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54278 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54282 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54285 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54289 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54292 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54306 "powerpc.tcc"
				>
				class OpVcmpgtfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54311 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54323 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54327 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54330 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54334 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54337 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54351 "powerpc.tcc"
				>
				class OpVcmpgtsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54356 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54368 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54372 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54375 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54379 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54382 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54396 "powerpc.tcc"
				>
				class OpVcmpgtsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54401 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54413 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54417 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54420 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54424 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54427 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54441 "powerpc.tcc"
				>
				class OpVcmpgtsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54446 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54458 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54462 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54465 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54469 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54472 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54486 "powerpc.tcc"
				>
				class OpVcmpgtub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54491 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54503 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54507 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54510 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54514 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54517 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54531 "powerpc.tcc"
				>
				class OpVcmpgtuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54536 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54548 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54552 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54555 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54559 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54562 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54576 "powerpc.tcc"
				>
				class OpVcmpgtuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54581 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54593 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54597 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54600 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54604 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54607 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54621 "powerpc.tcc"
				>
				class OpVctsxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54626 "powerpc.tcc"
				>
				{
				public:
					OpVctsxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54637 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54641 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54644 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54648 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54651 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54665 "powerpc.tcc"
				>
				class OpVctuxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54670 "powerpc.tcc"
				>
				{
				public:
					OpVctuxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54681 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54685 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54688 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54692 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54695 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54709 "powerpc.tcc"
				>
				class OpVexptefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54714 "powerpc.tcc"
				>
				{
				public:
					OpVexptefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54724 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54728 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54731 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54735 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54738 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54752 "powerpc.tcc"
				>
				class OpVlogefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54757 "powerpc.tcc"
				>
				{
				public:
					OpVlogefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54767 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54771 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54774 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54778 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54781 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54795 "powerpc.tcc"
				>
				class OpVmaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54800 "powerpc.tcc"
				>
				{
				public:
					OpVmaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 54812 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54816 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54819 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54823 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54826 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54840 "powerpc.tcc"
				>
				class OpVmaxfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54845 "powerpc.tcc"
				>
				{
				public:
					OpVmaxfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54884 "powerpc.tcc"
				>
				class OpVmaxsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54889 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54900 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54904 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54907 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54911 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54914 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54928 "powerpc.tcc"
				>
				class OpVmaxsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54933 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54944 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54948 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54951 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54955 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54958 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54972 "powerpc.tcc"
				>
				class OpVmaxsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54977 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55016 "powerpc.tcc"
				>
				class OpVmaxub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55021 "powerpc.tcc"
				>
				{
				public:
					OpVmaxub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55032 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55036 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55039 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55043 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55046 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55060 "powerpc.tcc"
				>
				class OpVmaxuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55065 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55076 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55080 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55083 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55087 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55090 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55104 "powerpc.tcc"
				>
				class OpVmaxuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55109 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55120 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55124 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55127 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55131 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55134 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55148 "powerpc.tcc"
				>
				class OpVmhaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55153 "powerpc.tcc"
				>
				{
				public:
					OpVmhaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55165 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55169 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55172 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55176 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55179 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55193 "powerpc.tcc"
				>
				class OpVmhraddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55198 "powerpc.tcc"
				>
				{
				public:
					OpVmhraddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55210 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55214 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55217 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55221 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55224 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55238 "powerpc.tcc"
				>
				class OpVminfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55243 "powerpc.tcc"
				>
				{
				public:
					OpVminfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55254 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55258 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55261 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55265 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55268 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55282 "powerpc.tcc"
				>
				class OpVminsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55287 "powerpc.tcc"
				>
				{
				public:
					OpVminsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55298 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55302 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55305 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55309 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55312 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55326 "powerpc.tcc"
				>
				class OpVminsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55331 "powerpc.tcc"
				>
				{
				public:
					OpVminsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55342 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55346 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55349 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55353 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55356 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55370 "powerpc.tcc"
				>
				class OpVminsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55375 "powerpc.tcc"
				>
				{
				public:
					OpVminsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55386 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55390 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55393 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55397 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55400 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55411 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55414 "powerpc.tcc"
				>
				class OpVminub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55419 "powerpc.tcc"
				>
				{
				public:
					OpVminub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55430 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55434 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55437 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55441 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55444 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55458 "powerpc.tcc"
				>
				class OpVminuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55463 "powerpc.tcc"
				>
				{
				public:
					OpVminuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55474 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55478 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55481 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55485 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55488 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55502 "powerpc.tcc"
				>
				class OpVminuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55507 "powerpc.tcc"
				>
				{
				public:
					OpVminuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55518 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55522 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55525 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55529 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55532 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55546 "powerpc.tcc"
				>
				class OpVmladduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55551 "powerpc.tcc"
				>
				{
				public:
					OpVmladduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55563 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55567 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55570 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55574 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55577 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55591 "powerpc.tcc"
				>
				class OpVmrghb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55596 "powerpc.tcc"
				>
				{
				public:
					OpVmrghb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55607 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55611 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55614 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55618 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55621 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55635 "powerpc.tcc"
				>
				class OpVmrghh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55640 "powerpc.tcc"
				>
				{
				public:
					OpVmrghh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55651 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55655 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55658 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55662 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55665 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55679 "powerpc.tcc"
				>
				class OpVmrghw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55684 "powerpc.tcc"
				>
				{
				public:
					OpVmrghw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55695 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55699 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55702 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55706 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55709 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55723 "powerpc.tcc"
				>
				class OpVmrglb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55728 "powerpc.tcc"
				>
				{
				public:
					OpVmrglb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55739 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55743 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55746 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55750 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55753 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55767 "powerpc.tcc"
				>
				class OpVmrglh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55772 "powerpc.tcc"
				>
				{
				public:
					OpVmrglh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55783 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55787 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55790 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55794 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55797 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55811 "powerpc.tcc"
				>
				class OpVmrglw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55816 "powerpc.tcc"
				>
				{
				public:
					OpVmrglw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55827 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55831 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55834 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55838 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55841 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55855 "powerpc.tcc"
				>
				class OpVmsummbm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55860 "powerpc.tcc"
				>
				{
				public:
					OpVmsummbm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55872 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55876 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55879 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55883 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55886 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55900 "powerpc.tcc"
				>
				class OpVmsumshm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55905 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55917 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55921 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55924 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55928 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55931 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55945 "powerpc.tcc"
				>
				class OpVmsumshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55950 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55962 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55966 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55969 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55973 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55976 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55990 "powerpc.tcc"
				>
				class OpVmsumubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55995 "powerpc.tcc"
				>
				{
				public:
					OpVmsumubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56007 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56011 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56014 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56018 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56021 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56035 "powerpc.tcc"
				>
				class OpVmsumuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56040 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56052 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56056 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56059 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56063 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56066 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56080 "powerpc.tcc"
				>
				class OpVmsumuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56085 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56097 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56101 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56104 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56108 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56111 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56125 "powerpc.tcc"
				>
				class OpVmulesb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56130 "powerpc.tcc"
				>
				{
				public:
					OpVmulesb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56141 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56145 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56148 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56152 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56155 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56169 "powerpc.tcc"
				>
				class OpVmulesh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56174 "powerpc.tcc"
				>
				{
				public:
					OpVmulesh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56185 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56189 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56192 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56196 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56199 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56213 "powerpc.tcc"
				>
				class OpVmuleub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56218 "powerpc.tcc"
				>
				{
				public:
					OpVmuleub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56229 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56233 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56236 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56240 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56243 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56257 "powerpc.tcc"
				>
				class OpVmuleuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56262 "powerpc.tcc"
				>
				{
				public:
					OpVmuleuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56273 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56277 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56280 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56284 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56287 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56301 "powerpc.tcc"
				>
				class OpVmulosb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56306 "powerpc.tcc"
				>
				{
				public:
					OpVmulosb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56317 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56321 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56324 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56328 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56331 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56345 "powerpc.tcc"
				>
				class OpVmulosh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56350 "powerpc.tcc"
				>
				{
				public:
					OpVmulosh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56361 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56365 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56368 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56372 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56375 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56386 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56389 "powerpc.tcc"
				>
				class OpVmuloub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56394 "powerpc.tcc"
				>
				{
				public:
					OpVmuloub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56405 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56409 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56412 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56416 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56419 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56433 "powerpc.tcc"
				>
				class OpVmulouh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56438 "powerpc.tcc"
				>
				{
				public:
					OpVmulouh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56449 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56453 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56456 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56460 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56463 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56477 "powerpc.tcc"
				>
				class OpVnmsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56482 "powerpc.tcc"
				>
				{
				public:
					OpVnmsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56494 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56498 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56501 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56505 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56508 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56522 "powerpc.tcc"
				>
				class OpVnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56527 "powerpc.tcc"
				>
				{
				public:
					OpVnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56538 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56542 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56545 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56549 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56552 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56566 "powerpc.tcc"
				>
				class OpVor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56571 "powerpc.tcc"
				>
				{
				public:
					OpVor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56582 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56586 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56589 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56593 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56596 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56610 "powerpc.tcc"
				>
				class OpVperm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56615 "powerpc.tcc"
				>
				{
				public:
					OpVperm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56627 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56631 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56634 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56638 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56641 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56655 "powerpc.tcc"
				>
				class OpVpkpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56660 "powerpc.tcc"
				>
				{
				public:
					OpVpkpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56671 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56675 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56678 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56682 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56685 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56699 "powerpc.tcc"
				>
				class OpVpkshss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56704 "powerpc.tcc"
				>
				{
				public:
					OpVpkshss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56715 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56719 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56722 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56726 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56729 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56743 "powerpc.tcc"
				>
				class OpVpkshus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56748 "powerpc.tcc"
				>
				{
				public:
					OpVpkshus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56759 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56763 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56766 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56770 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56773 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56787 "powerpc.tcc"
				>
				class OpVpkswss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56792 "powerpc.tcc"
				>
				{
				public:
					OpVpkswss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56803 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56807 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56810 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56814 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56817 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56831 "powerpc.tcc"
				>
				class OpVpkswus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56836 "powerpc.tcc"
				>
				{
				public:
					OpVpkswus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56847 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56851 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56854 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56858 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56861 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56875 "powerpc.tcc"
				>
				class OpVpkuhum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56880 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56891 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56895 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56898 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56902 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56905 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56919 "powerpc.tcc"
				>
				class OpVpkuhus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56924 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56935 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56939 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56942 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56946 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56949 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56963 "powerpc.tcc"
				>
				class OpVpkuwum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56968 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56979 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56983 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56986 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56990 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56993 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57007 "powerpc.tcc"
				>
				class OpVpkuwus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57012 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57023 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57027 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57030 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57034 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57037 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57051 "powerpc.tcc"
				>
				class OpVrefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57056 "powerpc.tcc"
				>
				{
				public:
					OpVrefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57066 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57070 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57073 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57077 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57080 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57094 "powerpc.tcc"
				>
				class OpVrfim : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57099 "powerpc.tcc"
				>
				{
				public:
					OpVrfim(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57109 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57113 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57116 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57120 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57123 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57137 "powerpc.tcc"
				>
				class OpVrfin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57142 "powerpc.tcc"
				>
				{
				public:
					OpVrfin(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57152 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57156 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57159 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57163 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57166 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57180 "powerpc.tcc"
				>
				class OpVrfip : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57185 "powerpc.tcc"
				>
				{
				public:
					OpVrfip(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57195 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57199 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57202 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57206 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57209 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57223 "powerpc.tcc"
				>
				class OpVrfiz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57228 "powerpc.tcc"
				>
				{
				public:
					OpVrfiz(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57238 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57242 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57245 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57249 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57252 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57266 "powerpc.tcc"
				>
				class OpVrlb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57271 "powerpc.tcc"
				>
				{
				public:
					OpVrlb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57282 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57286 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57289 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57293 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57296 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57310 "powerpc.tcc"
				>
				class OpVrlh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57315 "powerpc.tcc"
				>
				{
				public:
					OpVrlh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57326 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57330 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57333 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57337 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57340 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57354 "powerpc.tcc"
				>
				class OpVrlw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57359 "powerpc.tcc"
				>
				{
				public:
					OpVrlw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57370 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57374 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57377 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57381 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57384 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57398 "powerpc.tcc"
				>
				class OpVrsqrtefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57403 "powerpc.tcc"
				>
				{
				public:
					OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57413 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57417 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57420 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57424 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57427 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57441 "powerpc.tcc"
				>
				class OpVsel : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57446 "powerpc.tcc"
				>
				{
				public:
					OpVsel(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 57458 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57462 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57465 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57469 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57472 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57486 "powerpc.tcc"
				>
				class OpVsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57491 "powerpc.tcc"
				>
				{
				public:
					OpVsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57502 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57506 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57509 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57513 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57516 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57530 "powerpc.tcc"
				>
				class OpVslb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57535 "powerpc.tcc"
				>
				{
				public:
					OpVslb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57546 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57550 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57553 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57557 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57560 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57574 "powerpc.tcc"
				>
				class OpVsldoi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57579 "powerpc.tcc"
				>
				{
				public:
					OpVsldoi(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t sh;
					virtual
#line 64 "ppc.isa"
					void
#line 57591 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57595 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57598 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57602 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57605 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57619 "powerpc.tcc"
				>
				class OpVslh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57624 "powerpc.tcc"
				>
				{
				public:
					OpVslh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57635 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57639 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57642 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57646 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57649 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57663 "powerpc.tcc"
				>
				class OpVslo : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57668 "powerpc.tcc"
				>
				{
				public:
					OpVslo(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57679 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57683 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57686 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57690 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57693 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57707 "powerpc.tcc"
				>
				class OpVslw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57712 "powerpc.tcc"
				>
				{
				public:
					OpVslw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57723 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57727 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57730 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57734 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57737 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57751 "powerpc.tcc"
				>
				class OpVspltb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57756 "powerpc.tcc"
				>
				{
				public:
					OpVspltb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57767 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57771 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57774 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57778 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57781 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57795 "powerpc.tcc"
				>
				class OpVsplth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57800 "powerpc.tcc"
				>
				{
				public:
					OpVsplth(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57811 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57815 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57818 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57822 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57825 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57839 "powerpc.tcc"
				>
				class OpVspltisb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57844 "powerpc.tcc"
				>
				{
				public:
					OpVspltisb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57855 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57859 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57862 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57866 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57869 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57883 "powerpc.tcc"
				>
				class OpVspltish : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57888 "powerpc.tcc"
				>
				{
				public:
					OpVspltish(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57899 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57903 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57906 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57910 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57913 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57927 "powerpc.tcc"
				>
				class OpVspltisw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57932 "powerpc.tcc"
				>
				{
				public:
					OpVspltisw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57943 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57947 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57950 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57954 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57957 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57971 "powerpc.tcc"
				>
				class OpVspltw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57976 "powerpc.tcc"
				>
				{
				public:
					OpVspltw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57987 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57991 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57994 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57998 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58001 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58015 "powerpc.tcc"
				>
				class OpVsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58020 "powerpc.tcc"
				>
				{
				public:
					OpVsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58031 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58035 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58038 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58042 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58045 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58059 "powerpc.tcc"
				>
				class OpVsrab : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58064 "powerpc.tcc"
				>
				{
				public:
					OpVsrab(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58075 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58079 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58082 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58086 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58089 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58103 "powerpc.tcc"
				>
				class OpVsrah : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58108 "powerpc.tcc"
				>
				{
				public:
					OpVsrah(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58119 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58123 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58126 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58130 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58133 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58147 "powerpc.tcc"
				>
				class OpVsraw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58152 "powerpc.tcc"
				>
				{
				public:
					OpVsraw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58163 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58167 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58170 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58174 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58177 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58191 "powerpc.tcc"
				>
				class OpVsrb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58196 "powerpc.tcc"
				>
				{
				public:
					OpVsrb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58207 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58211 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58214 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58218 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58221 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58235 "powerpc.tcc"
				>
				class OpVsrh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58240 "powerpc.tcc"
				>
				{
				public:
					OpVsrh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58251 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58255 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58258 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58262 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58265 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58279 "powerpc.tcc"
				>
				class OpVsro : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58284 "powerpc.tcc"
				>
				{
				public:
					OpVsro(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58295 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58299 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58302 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58306 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58309 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58323 "powerpc.tcc"
				>
				class OpVsrw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58328 "powerpc.tcc"
				>
				{
				public:
					OpVsrw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58339 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58343 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58346 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58350 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58353 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58367 "powerpc.tcc"
				>
				class OpVsubcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58372 "powerpc.tcc"
				>
				{
				public:
					OpVsubcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58383 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58387 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58390 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58394 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58397 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58411 "powerpc.tcc"
				>
				class OpVsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58416 "powerpc.tcc"
				>
				{
				public:
					OpVsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58427 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58431 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58434 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58438 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58441 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58455 "powerpc.tcc"
				>
				class OpVsubsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58460 "powerpc.tcc"
				>
				{
				public:
					OpVsubsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58471 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58475 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58478 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58482 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58485 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58499 "powerpc.tcc"
				>
				class OpVsubshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58504 "powerpc.tcc"
				>
				{
				public:
					OpVsubshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58515 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58519 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58522 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58526 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58529 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58543 "powerpc.tcc"
				>
				class OpVsubsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58548 "powerpc.tcc"
				>
				{
				public:
					OpVsubsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58559 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58563 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58566 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58570 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58573 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58587 "powerpc.tcc"
				>
				class OpVsububm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58592 "powerpc.tcc"
				>
				{
				public:
					OpVsububm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58603 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58607 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58610 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58614 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58617 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58631 "powerpc.tcc"
				>
				class OpVsububs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58636 "powerpc.tcc"
				>
				{
				public:
					OpVsububs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58647 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58651 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58654 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58658 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58661 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58675 "powerpc.tcc"
				>
				class OpVsubuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58680 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58691 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58695 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58698 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58702 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58705 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58719 "powerpc.tcc"
				>
				class OpVsubuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58724 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58735 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58739 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58742 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58746 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58749 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58763 "powerpc.tcc"
				>
				class OpVsubuwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58768 "powerpc.tcc"
				>
				{
				public:
					OpVsubuwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58779 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58783 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58786 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58790 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58793 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58807 "powerpc.tcc"
				>
				class OpVsubuws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58812 "powerpc.tcc"
				>
				{
				public:
					OpVsubuws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58823 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58827 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58830 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58834 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58837 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58851 "powerpc.tcc"
				>
				class OpVsumsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58856 "powerpc.tcc"
				>
				{
				public:
					OpVsumsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58867 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58871 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58874 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58878 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58881 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58895 "powerpc.tcc"
				>
				class OpVsum2sws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58900 "powerpc.tcc"
				>
				{
				public:
					OpVsum2sws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58911 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58915 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58918 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58922 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58925 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58939 "powerpc.tcc"
				>
				class OpVsum4sbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58944 "powerpc.tcc"
				>
				{
				public:
					OpVsum4sbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58955 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58959 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58962 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58966 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58969 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58983 "powerpc.tcc"
				>
				class OpVsum4shs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58988 "powerpc.tcc"
				>
				{
				public:
					OpVsum4shs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58999 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59003 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59006 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59010 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59013 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59027 "powerpc.tcc"
				>
				class OpVsum4ubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59032 "powerpc.tcc"
				>
				{
				public:
					OpVsum4ubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59043 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59047 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59050 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59054 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59057 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59071 "powerpc.tcc"
				>
				class OpVupkhpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59076 "powerpc.tcc"
				>
				{
				public:
					OpVupkhpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59086 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59090 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59093 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59097 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59100 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59114 "powerpc.tcc"
				>
				class OpVupkhsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59119 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59129 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59133 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59136 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59140 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59143 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59157 "powerpc.tcc"
				>
				class OpVupkhsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59162 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59172 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59176 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59179 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59183 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59186 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59200 "powerpc.tcc"
				>
				class OpVupklpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59205 "powerpc.tcc"
				>
				{
				public:
					OpVupklpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59215 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59219 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59222 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59226 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59229 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59243 "powerpc.tcc"
				>
				class OpVupklsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59248 "powerpc.tcc"
				>
				{
				public:
					OpVupklsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59258 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59262 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59265 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59269 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59272 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59286 "powerpc.tcc"
				>
				class OpVupklsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59291 "powerpc.tcc"
				>
				{
				public:
					OpVupklsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59301 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59305 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59308 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59312 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59315 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59329 "powerpc.tcc"
				>
				class OpVxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59334 "powerpc.tcc"
				>
				{
				public:
					OpVxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59345 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59349 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59352 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59356 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59359 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 59403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59406 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59410 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59414 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59418 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59421 "powerpc.tcc"
				)
				{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t ca; // carry out
						uint8_t ov; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						Add32(result, ca, ov, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = ov ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 59466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59474 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59478 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59482 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59486 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59489 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59493 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59496 "powerpc.tcc"
				)
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "add" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59511 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59518 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59531 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59538 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59556 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59563 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59581 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59588 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59606 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59613 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59628 "powerpc.tcc"
				}
				/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
				template <
#line 38 "ppc.isa"
				class
#line 59634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59637 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59644 "powerpc.tcc"
				>::initialize_function()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59649 "powerpc.tcc"
				}
				/** Integer **/
				template <
#line 38 "ppc.isa"
				class
#line 59655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59658 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59665 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59678 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59685 "powerpc.tcc"
				>::initialize_operands()
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 59698 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59707 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59712 "powerpc.tcc"
				> *DecodeOpAdd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 59718 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59728 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59732 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59736 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59740 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59743 "powerpc.tcc"
				)
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 59789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59797 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59801 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59805 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59809 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59812 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59816 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59819 "powerpc.tcc"
				)
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59834 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59841 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59846 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59854 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59861 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59879 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59886 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59904 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59911 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59929 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59936 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59959 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59966 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59984 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59992 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59999 "powerpc.tcc"
				>::initialize_function()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60004 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60012 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60019 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60032 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60039 "powerpc.tcc"
				>::initialize_operands()
				{
#line 476 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60053 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60062 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60067 "powerpc.tcc"
				> *DecodeOpAddc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 60073 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60083 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60087 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60091 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60095 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60098 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint32_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 60145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60153 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60157 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60161 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60165 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60168 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60172 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60175 "powerpc.tcc"
				)
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "adde" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 60182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60190 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60197 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60210 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60217 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 60224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60232 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60239 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60257 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60264 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60282 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60289 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60298 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60306 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60313 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60323 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60328 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60331 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60338 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60361 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60368 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60386 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60394 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60401 "powerpc.tcc"
				>::initialize_function()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 60406 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60411 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60414 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60421 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60434 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60441 "powerpc.tcc"
				>::initialize_operands()
				{
#line 488 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60456 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60465 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60470 "powerpc.tcc"
				> *DecodeOpAdde(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 60476 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60486 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60490 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60494 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60498 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60501 "powerpc.tcc"
				)
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = (ra != 0 ? a + simm : simm);

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 60515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60523 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60527 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60531 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60535 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60538 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60542 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60545 "powerpc.tcc"
				)
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "li r" << rd << ", " << simm;
						else
						os << "addi r" << rd << ", r" << ra << ", " << simm;
					}
#line 60555 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60563 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60570 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60583 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60590 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60608 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60615 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60633 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60640 "powerpc.tcc"
				>::initialize_function()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60653 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60660 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60673 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60680 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 60692 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60701 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60706 "powerpc.tcc"
				> *DecodeOpAddi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 60712 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60722 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60726 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60730 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60734 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60737 "powerpc.tcc"
				)
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, a, simm, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 60762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60770 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60774 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60778 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60782 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60785 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60789 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60792 "powerpc.tcc"
				)
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic r" << rd << ", r" << ra << ", " << simm;
					}
#line 60799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60807 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60814 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60827 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60834 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60852 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60859 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60877 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60884 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60901 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60908 "powerpc.tcc"
				>::initialize_function()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60913 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60921 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60928 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60933 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 60950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60953 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60960 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 60970 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60979 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60984 "powerpc.tcc"
				> *DecodeOpAddic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 60990 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61000 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61004 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61008 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61012 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61015 "powerpc.tcc"
				)
				{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, a, simm, 0) ;

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 61051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61059 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61063 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61067 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61071 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61074 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61078 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61081 "powerpc.tcc"
				)
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic. r" << rd << ", r" << ra << ", " << simm;
					}
#line 61088 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61096 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61103 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61108 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61116 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61123 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61141 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61148 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61166 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61173 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61190 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61197 "powerpc.tcc"
				>::initialize_function()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61210 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61217 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61230 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61237 "powerpc.tcc"
				>::initialize_operands()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
						OUTPUT(XER_T,2);

					}
#line 61248 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61257 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61262 "powerpc.tcc"
				> *DecodeOpAddic_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 61268 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61278 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61282 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61286 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61290 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61293 "powerpc.tcc"
				)
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = ra != 0 ? a + simm : simm;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 61307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61315 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61319 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61323 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61327 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61330 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61334 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61337 "powerpc.tcc"
				)
				{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "lis r" << rd << ", " << (simm >> 16);
						else
						os << "addis r" << rd << ", r" << ra << ", " << (simm >> 16);
					}
#line 61347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61355 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61362 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61375 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61382 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61400 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61407 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61425 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61432 "powerpc.tcc"
				>::initialize_function()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61445 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61452 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61465 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61472 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 61484 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61493 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61498 "powerpc.tcc"
				> *DecodeOpAddis(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 61504 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61514 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61518 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61522 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61526 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61529 "powerpc.tcc"
				)
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, 0xFFFFFFFF, a, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61583 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61587 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61591 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61595 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61598 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61602 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61605 "powerpc.tcc"
				)
				{
#line 344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61620 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61627 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61640 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61647 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 61654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61662 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61669 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61687 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61694 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61711 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61718 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61728 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61736 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61743 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 61761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61769 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61776 "powerpc.tcc"
				>::initialize_function()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 61781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61789 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61796 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61801 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 61818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61821 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61828 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 61838 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61847 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61852 "powerpc.tcc"
				> *DecodeOpAddme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 61858 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61868 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61872 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61876 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61880 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61883 "powerpc.tcc"
				)
				{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61937 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61941 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61945 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61949 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61952 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61956 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61959 "powerpc.tcc"
				)
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61974 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61981 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61994 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62001 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 62008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62016 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62023 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62041 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62048 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62065 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62072 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62090 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62097 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62120 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62127 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62153 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62160 "powerpc.tcc"
				>::initialize_function()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 62165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62173 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62180 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62185 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62193 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62200 "powerpc.tcc"
				>::initialize_operands()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62214 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62223 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62228 "powerpc.tcc"
				> *DecodeOpAddze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 62234 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62244 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62248 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62252 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62256 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62259 "powerpc.tcc"
				)
				{
#line 397 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely((a == 0x80000000UL && b == 0xffffffffUL) || b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();
								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: LT=0 GT=0 EQ=0 SO=XER[SO]
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0);

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Read the input operands
							int32_t a = cpu->GetGPR(ra);
							int32_t b = cpu->GetGPR(rb);

							// Compute the result
							int32_t result = a / b;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62348 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62352 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62356 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62360 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62363 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62367 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62370 "powerpc.tcc"
				)
				{
#line 474 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62385 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62392 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62405 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62412 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62430 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62437 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62455 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62462 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62472 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62480 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62487 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62510 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62517 "powerpc.tcc"
				>::initialize_function()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62530 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62537 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62550 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62557 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62570 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62579 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62584 "powerpc.tcc"
				> *DecodeOpDivw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 62590 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62600 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62604 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62608 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62612 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62615 "powerpc.tcc"
				)
				{
#line 479 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely(b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=0 CR0[GT]=0 CR0[EQ]=1
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_EQ_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = a / b ;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62702 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62706 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62710 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62714 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62717 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62721 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62724 "powerpc.tcc"
				)
				{
#line 554 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62739 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62746 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62759 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62766 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62776 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62784 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62791 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62809 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62816 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62834 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62841 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62864 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62871 "powerpc.tcc"
				>::initialize_function()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62884 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62891 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62904 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62911 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62924 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62933 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62938 "powerpc.tcc"
				> *DecodeOpDivwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 62944 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62954 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62958 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 62962 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62966 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62969 "powerpc.tcc"
				)
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (int32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63010 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63014 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63018 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63022 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63025 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63029 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63032 "powerpc.tcc"
				)
				{
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhw" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63047 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63054 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63059 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63067 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63074 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63092 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63099 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63117 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63124 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63142 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63149 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63172 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63179 "powerpc.tcc"
				>::initialize_function()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63192 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63199 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63212 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63219 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63232 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63241 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63246 "powerpc.tcc"
				> *DecodeOpMulhw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 63252 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63262 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63266 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63270 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63274 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63277 "powerpc.tcc"
				)
				{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint64_t result64 = (uint64_t) a * (uint64_t) b;
						uint32_t result = (uint32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63318 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63322 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63326 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63330 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63333 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63337 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63340 "powerpc.tcc"
				)
				{
#line 623 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhwu" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63355 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63362 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63375 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63382 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63400 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63407 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63425 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63432 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63450 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63457 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63472 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63480 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63487 "powerpc.tcc"
				>::initialize_function()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63500 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63507 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63512 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63520 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63527 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63540 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63549 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63554 "powerpc.tcc"
				> *DecodeOpMulhwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 63560 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63570 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63574 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63578 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63582 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63585 "powerpc.tcc"
				)
				{
#line 628 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) simm;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 63600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63608 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63612 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63616 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63620 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63623 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63627 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63630 "powerpc.tcc"
				)
				{
#line 639 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulli r" << rd << ", r" << ra << ", " << simm;
					}
#line 63637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63645 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63652 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63665 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63672 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63690 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63697 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63715 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63722 "powerpc.tcc"
				>::initialize_function()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 63727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63735 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63742 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 63747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63755 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63762 "powerpc.tcc"
				>::initialize_operands()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 63770 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63779 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63784 "powerpc.tcc"
				> *DecodeOpMulli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 63790 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63800 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63804 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63808 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63812 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63815 "powerpc.tcc"
				)
				{
#line 644 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							if(oe && (0xFFFFFFFF00000000ULL & result64) != 0)
							{
								// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
								xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 63859 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63867 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63871 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63875 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63879 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63882 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63886 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63889 "powerpc.tcc"
				)
				{
#line 684 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mullw r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63904 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63911 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63924 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63931 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63949 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63956 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63974 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63981 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63999 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64006 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64029 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64036 "powerpc.tcc"
				>::initialize_function()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 64041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64049 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64056 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 137 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ if (oe) LAT(5); else LAT(4); }
#line 64061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64069 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64076 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64089 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64098 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64103 "powerpc.tcc"
				> *DecodeOpMullw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 64109 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64116 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64119 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64123 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64127 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64131 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64134 "powerpc.tcc"
				)
				{
#line 689 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						if(a == 0x80000000UL)
						{
							// Write back the result
							cpu->SetGPR(rd, 0x80000000UL);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=1 CR0[GT]=0 CR0[EQ]=0
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_LT_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = -a; // 2's complement of a: (~a) + 1;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 64210 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64218 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64222 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64226 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64230 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64233 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64237 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64240 "powerpc.tcc"
				)
				{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "neg" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 64247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64255 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64262 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64267 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64275 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64282 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64292 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64300 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64307 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64325 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64332 "powerpc.tcc"
				>::initialize_function()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64345 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64352 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64365 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64372 "powerpc.tcc"
				>::initialize_operands()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 64380 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64386 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64389 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64394 "powerpc.tcc"
				> *DecodeOpNeg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 64400 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64410 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64414 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64418 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64422 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64425 "powerpc.tcc"
				)
				{
#line 766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result;
						Add32(result, carry, overflow, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 64470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64478 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64482 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64486 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64490 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64493 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64497 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64500 "powerpc.tcc"
				)
				{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subf" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64507 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64515 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64522 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64535 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64542 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64560 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64567 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64577 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64585 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64592 "powerpc.tcc"
				>::initialize_function()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64597 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64605 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64612 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64625 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64632 "powerpc.tcc"
				>::initialize_operands()
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64645 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64654 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64659 "powerpc.tcc"
				> *DecodeOpSubf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 64665 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64675 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64679 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64683 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64687 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64690 "powerpc.tcc"
				)
				{
#line 812 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 64735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64743 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64747 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64751 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64755 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64758 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64762 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64765 "powerpc.tcc"
				)
				{
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64780 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64787 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64800 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64807 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64825 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64832 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64850 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64857 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64883 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64890 "powerpc.tcc"
				>::initialize_function()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64903 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64910 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64923 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64930 "powerpc.tcc"
				>::initialize_operands()
				{
#line 476 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64944 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64953 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64958 "powerpc.tcc"
				> *DecodeOpSubfc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 64964 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64974 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64978 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 64982 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64986 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64989 "powerpc.tcc"
				)
				{
#line 858 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, ~a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65044 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65048 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65052 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65056 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65059 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65063 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65066 "powerpc.tcc"
				)
				{
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfe" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 65073 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65081 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65088 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65101 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65108 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65115 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65123 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65130 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65148 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65155 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65172 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65179 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65197 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65204 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65230 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65237 "powerpc.tcc"
				>::initialize_function()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65250 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65257 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65270 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65277 "powerpc.tcc"
				>::initialize_operands()
				{
#line 488 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 65292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65306 "powerpc.tcc"
				> *DecodeOpSubfe(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 65312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65322 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65326 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65330 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65334 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65337 "powerpc.tcc"
				)
				{
#line 906 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow = 0; // overflow
						uint32_t result;

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = simm;
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, -a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = (carry || a == 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 65363 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65371 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65375 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65379 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65383 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65386 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65390 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65393 "powerpc.tcc"
				)
				{
#line 928 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfic r" << rd << ", r" << ra << ", " << simm;
					}
#line 65400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65408 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65415 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65428 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65435 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65453 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65460 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65478 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65485 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65502 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65509 "powerpc.tcc"
				>::initialize_function()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 65514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65522 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65529 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 142 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65534 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65554 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65561 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65571 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65580 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65585 "powerpc.tcc"
				> *DecodeOpSubfic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 65591 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65601 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65605 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65609 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65613 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65616 "powerpc.tcc"
				)
				{
#line 933 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, ~a, 0xFFFFFFFF, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65670 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65674 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65678 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65682 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65685 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65689 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65692 "powerpc.tcc"
				)
				{
#line 975 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 65699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65707 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65714 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65727 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65734 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65741 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65749 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65756 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65766 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65774 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65781 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65798 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65805 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65823 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65830 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65856 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65863 "powerpc.tcc"
				>::initialize_function()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65876 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65883 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65888 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65908 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65915 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65925 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65934 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65939 "powerpc.tcc"
				> *DecodeOpSubfme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 65945 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65959 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 65963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65970 "powerpc.tcc"
				)
				{
#line 980 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, ~a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 66016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66024 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66028 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66032 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66036 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66039 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66043 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66046 "powerpc.tcc"
				)
				{
#line 1022 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 66053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66061 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66068 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66073 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66081 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66088 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 66095 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66103 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66110 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66128 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66135 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66144 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66152 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66159 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66177 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66184 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 66202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66210 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66217 "powerpc.tcc"
				>::initialize_function()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 66222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66230 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66237 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66250 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66257 "powerpc.tcc"
				>::initialize_operands()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 66271 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66280 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66285 "powerpc.tcc"
				> *DecodeOpSubfze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 66291 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER COMPARE INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 66303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66306 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66310 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66314 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66318 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66321 "powerpc.tcc"
				)
				{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66339 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66347 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66351 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66355 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66359 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66362 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66366 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66369 "powerpc.tcc"
				)
				{
#line 1047 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmp cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66376 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66384 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66391 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66404 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66411 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66429 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66436 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66454 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66461 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66478 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66485 "powerpc.tcc"
				>::initialize_function()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66498 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66505 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66518 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66525 "powerpc.tcc"
				>::initialize_operands()
				{
#line 752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66536 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66545 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66550 "powerpc.tcc"
				> *DecodeOpCmp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 66556 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66566 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66570 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66574 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66578 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66581 "powerpc.tcc"
				)
				{
#line 1052 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < simm) ? CONFIG::CR0_LT_MASK : (a > simm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66609 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66613 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66617 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66621 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66624 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66628 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66631 "powerpc.tcc"
				)
				{
#line 1068 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpi cr" << crfD << ", " << l << ", r" << ra << ", " << simm;
					}
#line 66638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66646 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66653 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66666 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66673 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66691 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66698 "powerpc.tcc"
				>::initialize_function()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66711 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66718 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66731 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66738 "powerpc.tcc"
				>::initialize_operands()
				{
#line 384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66748 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66757 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66762 "powerpc.tcc"
				> *DecodeOpCmpi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 66768 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66778 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66782 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66786 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66790 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66793 "powerpc.tcc"
				)
				{
#line 1073 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66822 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66826 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66830 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66834 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66837 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66841 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66844 "powerpc.tcc"
				)
				{
#line 1090 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpl cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66859 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66866 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66879 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66886 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66904 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66911 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66929 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66936 "powerpc.tcc"
				>::initialize_function()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66949 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66956 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66969 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66976 "powerpc.tcc"
				>::initialize_operands()
				{
#line 752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66987 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66996 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67001 "powerpc.tcc"
				> *DecodeOpCmpl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 67007 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67017 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67021 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67025 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67029 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67032 "powerpc.tcc"
				)
				{
#line 1095 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < uimm) ? CONFIG::CR0_LT_MASK : (a > uimm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67060 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67064 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67068 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67072 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67075 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67079 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67082 "powerpc.tcc"
				)
				{
#line 1111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpli cr" << crfD << ", " << l << ", r" << ra << ", " << uimm;
					}
#line 67089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67097 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67104 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67117 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67124 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67142 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67149 "powerpc.tcc"
				>::initialize_function()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67162 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67169 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67174 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67182 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67189 "powerpc.tcc"
				>::initialize_operands()
				{
#line 384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 67199 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67208 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67213 "powerpc.tcc"
				> *DecodeOpCmpli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 67219 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 67231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67234 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67238 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67242 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67246 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67249 "powerpc.tcc"
				)
				{
#line 1122 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67281 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67289 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67293 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67297 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67301 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67304 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67308 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67311 "powerpc.tcc"
				)
				{
#line 1150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "and" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67326 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67333 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67346 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67353 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67363 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67371 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67378 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67388 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67396 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67403 "powerpc.tcc"
				>::initialize_function()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67416 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67423 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 149 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67436 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67443 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67456 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67465 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67470 "powerpc.tcc"
				> *DecodeOpAnd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 67476 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67486 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67490 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67494 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67498 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67501 "powerpc.tcc"
				)
				{
#line 1155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67541 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67545 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67549 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67553 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67556 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67560 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67563 "powerpc.tcc"
				)
				{
#line 1183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67578 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67585 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67598 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67605 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67623 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67630 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67648 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67655 "powerpc.tcc"
				>::initialize_function()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67660 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67668 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67675 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67688 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67695 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67708 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67717 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67722 "powerpc.tcc"
				> *DecodeOpAndc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 67728 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67738 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67742 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67746 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67750 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67753 "powerpc.tcc"
				)
				{
#line 1188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67787 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67791 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67795 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67799 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67802 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67806 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67809 "powerpc.tcc"
				)
				{
#line 1210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andi. r" << ra << ", r" << rs << ", " << uimm;
					}
#line 67816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67824 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67831 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67844 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67851 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67869 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67876 "powerpc.tcc"
				>::initialize_function()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67889 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67896 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67901 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67909 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67916 "powerpc.tcc"
				>::initialize_operands()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 67925 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67934 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67939 "powerpc.tcc"
				> *DecodeOpAndi_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 67945 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67959 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 67963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67970 "powerpc.tcc"
				)
				{
#line 1215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68004 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68008 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68012 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68016 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68019 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68023 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68026 "powerpc.tcc"
				)
				{
#line 1237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andis. r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 68033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68041 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68048 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68061 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68068 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68086 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68093 "powerpc.tcc"
				>::initialize_function()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68098 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68106 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68113 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68126 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68133 "powerpc.tcc"
				>::initialize_operands()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 68142 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68151 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68156 "powerpc.tcc"
				> *DecodeOpAndis_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 68162 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68172 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68176 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68180 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68184 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68187 "powerpc.tcc"
				)
				{
#line 1242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = 0;
						uint32_t m = 1 << 31;
						while(result < 32)
						{
							if(s & m) break;
							m >>= 1;
							result++;
						}

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 68220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68228 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68232 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68236 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68240 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68243 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68247 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68250 "powerpc.tcc"
				)
				{
#line 1271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cntlzw" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68257 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68265 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68272 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68285 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68292 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68310 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68317 "powerpc.tcc"
				>::initialize_function()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68330 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68337 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68350 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68357 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68369 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68378 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68383 "powerpc.tcc"
				> *DecodeOpCntlzw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 68389 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68399 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68403 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68407 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68411 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68414 "powerpc.tcc"
				)
				{
#line 1276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s ^ b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68454 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68458 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68462 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68466 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68469 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68473 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68476 "powerpc.tcc"
				)
				{
#line 1304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "eqv" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 68483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68491 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68498 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68511 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68518 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68536 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68543 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68553 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68561 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68568 "powerpc.tcc"
				>::initialize_function()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68581 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68588 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68593 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68601 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68608 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68621 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68630 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68635 "powerpc.tcc"
				> *DecodeOpEqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 68641 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68651 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68655 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68659 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68663 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68666 "powerpc.tcc"
				)
				{
#line 1309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int8_t)(uint8_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68705 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68709 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68713 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68717 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68720 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68724 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68727 "powerpc.tcc"
				)
				{
#line 1336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsb" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68734 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68742 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68749 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68762 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68769 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68787 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68794 "powerpc.tcc"
				>::initialize_function()
				{
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68807 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68814 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68827 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68834 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68846 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68855 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68860 "powerpc.tcc"
				> *DecodeOpExtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 68866 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68876 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68880 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68884 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68888 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68891 "powerpc.tcc"
				)
				{
#line 1341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int16_t)(uint16_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68930 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68934 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68938 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68942 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68945 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68949 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68952 "powerpc.tcc"
				)
				{
#line 1368 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsh" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68967 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68974 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68987 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68994 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69004 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69012 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69019 "powerpc.tcc"
				>::initialize_function()
				{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69032 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69039 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69052 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69059 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 69071 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69080 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69085 "powerpc.tcc"
				> *DecodeOpExtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 69091 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69101 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69105 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69109 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69113 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69116 "powerpc.tcc"
				)
				{
#line 1373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s & b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69156 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69160 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69164 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69168 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69171 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69175 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69178 "powerpc.tcc"
				)
				{
#line 1401 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "nand" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69185 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69193 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69200 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69213 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69220 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69230 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69238 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69245 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69263 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69270 "powerpc.tcc"
				>::initialize_function()
				{
#line 228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69283 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69290 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69303 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69310 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69323 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69332 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69337 "powerpc.tcc"
				> *DecodeOpNand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNand<
#line 38 "ppc.isa"
					CONFIG
#line 69343 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69353 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69357 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69361 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69365 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69368 "powerpc.tcc"
				)
				{
#line 1406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s | b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69408 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69412 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69416 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69420 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69423 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69427 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69430 "powerpc.tcc"
				)
				{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "not" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "nor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69440 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69448 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69455 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69468 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69475 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69485 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69493 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69500 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69518 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69525 "powerpc.tcc"
				>::initialize_function()
				{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69538 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69545 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69558 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69565 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69578 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69587 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69592 "powerpc.tcc"
				> *DecodeOpNor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNor<
#line 38 "ppc.isa"
					CONFIG
#line 69598 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69608 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69612 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69616 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69620 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69623 "powerpc.tcc"
				)
				{
#line 1442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69655 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69663 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69667 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69671 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69675 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69678 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69682 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69685 "powerpc.tcc"
				)
				{
#line 1470 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "mr" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "or" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69703 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69710 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69723 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69730 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69748 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69755 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69765 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69773 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69780 "powerpc.tcc"
				>::initialize_function()
				{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69793 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69800 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69813 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69820 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69833 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69842 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69847 "powerpc.tcc"
				> *DecodeOpOr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOr<
#line 38 "ppc.isa"
					CONFIG
#line 69853 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69863 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69867 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69871 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69875 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69878 "powerpc.tcc"
				)
				{
#line 1478 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69918 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69922 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69926 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69930 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69933 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69937 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69940 "powerpc.tcc"
				)
				{
#line 1506 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "orc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69947 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69955 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69962 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69975 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69982 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70000 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70007 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70017 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70025 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70032 "powerpc.tcc"
				>::initialize_function()
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70045 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70052 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70065 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70072 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70085 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70094 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70099 "powerpc.tcc"
				> *DecodeOpOrc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 70105 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70115 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70119 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70123 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70127 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70130 "powerpc.tcc"
				)
				{
#line 1511 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70144 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70152 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70156 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70160 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70164 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70167 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70171 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70174 "powerpc.tcc"
				)
				{
#line 1521 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == 0 && ra == 0 && uimm == 0)
						os << "nop";
						else
						os << "ori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70192 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70199 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70212 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70219 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70237 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70244 "powerpc.tcc"
				>::initialize_function()
				{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70257 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70264 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70269 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70278 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70285 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70293 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70302 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70307 "powerpc.tcc"
				> *DecodeOpOri(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOri<
#line 38 "ppc.isa"
					CONFIG
#line 70313 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70323 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70327 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70331 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70335 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70338 "powerpc.tcc"
				)
				{
#line 1529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70360 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70364 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70368 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70372 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70375 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70379 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70382 "powerpc.tcc"
				)
				{
#line 1539 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "oris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 70389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70397 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70404 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70417 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70424 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70442 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70449 "powerpc.tcc"
				>::initialize_function()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70462 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70469 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70474 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70483 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70490 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70498 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70507 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70512 "powerpc.tcc"
				> *DecodeOpOris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOris<
#line 38 "ppc.isa"
					CONFIG
#line 70518 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70528 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70532 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70536 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70540 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70543 "powerpc.tcc"
				)
				{
#line 1544 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s ^ b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 70575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70583 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70587 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70591 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70595 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70598 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70602 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70605 "powerpc.tcc"
				)
				{
#line 1572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 70612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70620 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70627 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70640 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70647 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70665 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70672 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70690 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70697 "powerpc.tcc"
				>::initialize_function()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70710 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70717 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70730 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70737 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70750 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70759 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70764 "powerpc.tcc"
				> *DecodeOpXor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXor<
#line 38 "ppc.isa"
					CONFIG
#line 70770 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70780 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70784 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70788 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70792 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70795 "powerpc.tcc"
				)
				{
#line 1577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70809 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70817 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70821 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70825 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70829 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70832 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70836 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70839 "powerpc.tcc"
				)
				{
#line 1587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70846 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70854 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70861 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70874 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70881 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70899 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70906 "powerpc.tcc"
				>::initialize_function()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70919 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70926 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70931 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70940 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70947 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70955 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70964 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70969 "powerpc.tcc"
				> *DecodeOpXori(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXori<
#line 38 "ppc.isa"
					CONFIG
#line 70975 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70985 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70989 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 70993 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70997 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71000 "powerpc.tcc"
				)
				{
#line 1592 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 71014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71022 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71026 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71030 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71034 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71037 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71041 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71044 "powerpc.tcc"
				)
				{
#line 1602 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xoris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 71051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71059 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71066 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71079 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71086 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71104 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71111 "powerpc.tcc"
				>::initialize_function()
				{
#line 236 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71124 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71131 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71136 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 71142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71145 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71152 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 71160 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71169 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71174 "powerpc.tcc"
				> *DecodeOpXoris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 71180 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71195 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71199 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71203 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71207 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71210 "powerpc.tcc"
				)
				{
#line 1613 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = (r & mask) | (a & ~mask);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71252 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71256 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71260 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71264 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71267 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71271 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71274 "powerpc.tcc"
				)
				{
#line 1643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwimi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71281 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71289 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71296 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71309 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71316 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71334 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71341 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71359 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71366 "powerpc.tcc"
				>::initialize_function()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71371 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71379 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71386 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71399 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71406 "powerpc.tcc"
				>::initialize_operands()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71419 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71428 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71433 "powerpc.tcc"
				> *DecodeOpRlwimi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 71439 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71449 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71453 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71457 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71461 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71464 "powerpc.tcc"
				)
				{
#line 1648 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71497 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71505 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71509 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71513 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71517 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71520 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71524 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71527 "powerpc.tcc"
				)
				{
#line 1677 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwinm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71542 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71549 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71562 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71569 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71587 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71594 "powerpc.tcc"
				>::initialize_function()
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71607 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71614 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71627 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71634 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71646 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71655 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71660 "powerpc.tcc"
				> *DecodeOpRlwinm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 71666 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71676 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71680 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71684 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71688 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71691 "powerpc.tcc"
				)
				{
#line 1682 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t r = RotateLeft(s, b);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71733 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71737 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71741 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71745 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71748 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71752 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71755 "powerpc.tcc"
				)
				{
#line 1712 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwnm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb << ", " << mb << ", " << me;
					}
#line 71762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71770 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71777 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71790 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71797 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71815 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71822 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71840 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71847 "powerpc.tcc"
				>::initialize_function()
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71860 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71867 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71880 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71887 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 71900 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71909 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71914 "powerpc.tcc"
				> *DecodeOpRlwnm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 71920 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER SHIFT INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71935 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71939 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 71943 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71947 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71950 "powerpc.tcc"
				)
				{
#line 1723 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = (b & 0x20) ? 0 : s << (b & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71990 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71994 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 71998 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72002 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72005 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72009 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72012 "powerpc.tcc"
				)
				{
#line 1751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "slw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72019 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72027 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72034 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72047 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72054 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72072 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72079 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72097 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72104 "powerpc.tcc"
				>::initialize_function()
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72117 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72124 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72137 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72144 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72157 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72166 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72171 "powerpc.tcc"
				> *DecodeOpSlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 72177 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72187 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72191 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72195 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72199 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72202 "powerpc.tcc"
				)
				{
#line 1756 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(b == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=1
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else if(b & 0x20)
						{
							if(s < 0)
							{
								result = 0xffffffff;
								// Generate XER[CA]
								xer = (s & 0x7fffffff) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
							}
							else
							{
								result = 0;
								// Generate XER[CA]: XER[CA]=0
								xer = xer & ~CONFIG::XER_CA_MASK;
							}
						}
						else
						{
							b = b & 0x1f;
							result = (int32_t) s >> b;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - b)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Write back the result
						cpu->SetGPR(ra, result);

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72272 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72276 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72280 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72284 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72287 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72291 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72294 "powerpc.tcc"
				)
				{
#line 1814 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "sraw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72309 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72316 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72329 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72336 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72354 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72361 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72371 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72379 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72386 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72403 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72410 "powerpc.tcc"
				>::initialize_function()
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72423 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72430 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72443 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72450 "powerpc.tcc"
				>::initialize_operands()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72464 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72473 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72478 "powerpc.tcc"
				> *DecodeOpSraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 72484 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72494 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72498 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72502 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72506 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72509 "powerpc.tcc"
				)
				{
#line 1819 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(sh == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=0
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else
						{
							result = s >> sh;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - sh)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72562 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72566 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72570 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72574 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72577 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72581 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72584 "powerpc.tcc"
				)
				{
#line 1860 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srawi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh;
					}
#line 72591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72599 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72606 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72619 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72626 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72644 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72651 "powerpc.tcc"
				>::initialize_function()
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72664 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72671 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72684 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72691 "powerpc.tcc"
				>::initialize_operands()
				{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 72704 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72713 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72718 "powerpc.tcc"
				> *DecodeOpSrawi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 72724 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72734 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72738 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72742 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72746 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72749 "powerpc.tcc"
				)
				{
#line 1865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						unsigned int sh = b & 0x3f;
						uint32_t result = (sh & 0x20) ? 0 : s >> (sh & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72790 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72794 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72798 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72802 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72805 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72809 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72812 "powerpc.tcc"
				)
				{
#line 1894 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72827 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72834 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72847 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72854 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72872 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72879 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72897 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72904 "powerpc.tcc"
				>::initialize_function()
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72917 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72924 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72937 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72944 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72957 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72966 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72971 "powerpc.tcc"
				> *DecodeOpSrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 72977 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************************************

				FLOATING-POINT ARITHMETIC INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 73022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73025 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73029 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73033 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73037 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73040 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73102 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73106 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73110 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73114 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73117 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73121 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73124 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73131 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73139 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73146 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73159 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73166 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73184 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73191 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73209 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73216 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73234 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73241 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73258 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73265 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73277 "powerpc.tcc"
				}
				/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 73283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73286 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73293 "powerpc.tcc"
				>::initialize_function()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73298 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73306 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73313 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73326 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73333 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73348 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73357 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73362 "powerpc.tcc"
				> *DecodeOpFadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 73368 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73378 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73382 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73386 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73390 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73393 "powerpc.tcc"
				)
				{
#line 310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73449 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73457 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73461 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73465 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73469 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73472 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73476 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73479 "powerpc.tcc"
				)
				{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73494 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73501 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73514 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73521 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73531 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73539 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73546 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73564 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73571 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73589 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73596 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73613 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73620 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73640 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73647 "powerpc.tcc"
				>::initialize_function()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73660 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73667 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73680 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73687 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73702 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73711 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73716 "powerpc.tcc"
				> *DecodeOpFadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 73722 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73732 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73736 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73740 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73744 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73747 "powerpc.tcc"
				)
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73811 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73815 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73819 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73823 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73826 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73830 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73833 "powerpc.tcc"
				)
				{
#line 419 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdiv" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73840 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73848 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73855 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73868 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73875 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73893 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73900 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73918 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73925 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73943 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73950 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73967 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73974 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73994 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74001 "powerpc.tcc"
				>::initialize_function()
				{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74014 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74021 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(31); }
#line 74026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74034 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74041 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74056 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74065 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74070 "powerpc.tcc"
				> *DecodeOpFdiv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 74076 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74086 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74090 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74094 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74098 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74101 "powerpc.tcc"
				)
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						uint32_t old_fpscr = fpscr;
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74166 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74170 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74174 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74178 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74181 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74185 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74188 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdivs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 74195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74203 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74210 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74228 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74235 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74253 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74260 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74270 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74278 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74285 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74302 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74309 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74329 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74336 "powerpc.tcc"
				>::initialize_function()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74349 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74356 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(17); }
#line 74361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74369 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74376 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74391 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74400 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74405 "powerpc.tcc"
				> *DecodeOpFdivs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 74411 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74421 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74425 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74429 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74433 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74436 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74498 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74502 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74506 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74510 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74513 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74517 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74520 "powerpc.tcc"
				)
				{
#line 532 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmul" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74535 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74542 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74555 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74562 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74580 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74587 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74597 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74605 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74612 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74622 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74630 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74637 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74654 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74661 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74673 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74681 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74688 "powerpc.tcc"
				>::initialize_function()
				{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74701 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74708 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74721 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74728 "powerpc.tcc"
				>::initialize_operands()
				{
#line 536 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74743 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74752 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74757 "powerpc.tcc"
				> *DecodeOpFmul(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 74763 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74773 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74777 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74781 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74785 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74788 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74852 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74856 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74860 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74864 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74867 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74871 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74874 "powerpc.tcc"
				)
				{
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmuls" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74889 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74896 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74901 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74909 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74916 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74926 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74934 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74941 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74959 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74966 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74984 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74991 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75000 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75008 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75015 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75035 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75042 "powerpc.tcc"
				>::initialize_function()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75055 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75062 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 75067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75075 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75082 "powerpc.tcc"
				>::initialize_operands()
				{
#line 536 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75097 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75106 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75111 "powerpc.tcc"
				> *DecodeOpFmuls(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 75117 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75127 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75131 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75135 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75139 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75142 "powerpc.tcc"
				)
				{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								SoftFloat result(b.queryValue() | 0x400000UL);// QNaN (b with high order bit of mantissa set)
								cpu->SetFPR(fd, SoftDouble(result, flags));
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Write back result
							cpu->SetFPR(fd, SoftDouble(b, flags)); // QNaN (b)
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isInfty()))
						{
							if(b.isNegative())
							{
								// b = -infinity
								cpu->SetFPR(fd, SoftDouble(0x8000000000000000ULL)); // -0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
							else
							{
								// b = +infinity
								cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
						}
						else
						{
							SoftFloat result(0x3f800000ULL); // 1.0

							// Compute the result
							result.divAssign(b, flags);

							// Generate OX, UX, ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_OX<CONFIG>(fpscr, flags);
							GenFPSCR_UX<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);

							// Write back the result
							cpu->SetFPR(fd, SoftDouble(result, flags));
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75271 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75275 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75279 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75283 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75286 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75290 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75293 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fres" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75308 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75315 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75328 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75335 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75353 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75360 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75378 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75385 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75394 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75402 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75409 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75429 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75436 "powerpc.tcc"
				>::initialize_function()
				{
#line 258 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75449 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75456 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(10); }
#line 75461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75469 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75476 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75490 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75499 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75504 "powerpc.tcc"
				> *DecodeOpFres(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFres<
#line 38 "ppc.isa"
					CONFIG
#line 75510 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75520 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75524 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75528 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75532 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75535 "powerpc.tcc"
				)
				{
#line 716 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						const SoftDouble& b = cpu->GetFPR(fb);

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
								// Write back result
								cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							// Write back result
							cpu->SetFPR(fd, b); // QNaN (b)
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isNegative()))
						{
							// -infinity <= b < 0
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSQRT
							fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
						}
						else if(unlikely(b.isInfty()))
						{
							// b = +infinity
							cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							// 0 < b < infinity

							// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
							// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
							SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

							// Newton-Raphson method
							SoftDouble half(0x3fe0000000000000ULL); // 0.5
							SoftDouble three(0x4008000000000000ULL); // 3.0

							unsigned int i;
							for(i = 0; i < 5; i++)
							{
								// Newton-Raphson iteration
								// w = b * u * u
								SoftDouble w(b);
								w.multAssign(u, flags);
								w.multAssign(u, flags);
								// v = 3.0 - w
								SoftDouble v(three);
								v.minusAssign(w, flags);
								// u = 0.5 * u * v
								u.multAssign(half, flags);
								u.multAssign(v, flags);
							}

							// Write back result
							cpu->SetFPR(fd, u);

							// Generate ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_ZX<CONFIG>(fpscr, flags);
							GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75678 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75686 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75690 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75694 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75698 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75701 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75705 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75708 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsqrte" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75723 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75730 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75743 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75750 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75768 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75775 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75793 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75800 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75809 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75817 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75824 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75844 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75851 "powerpc.tcc"
				>::initialize_function()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75864 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75871 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75884 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75891 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75905 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75914 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75919 "powerpc.tcc"
				> *DecodeOpFrsqrte(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 75925 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75935 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75939 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 75943 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75947 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75950 "powerpc.tcc"
				)
				{
#line 860 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76004 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76012 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76016 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76020 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76024 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76027 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76031 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76034 "powerpc.tcc"
				)
				{
#line 910 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76049 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76056 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76069 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76076 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76086 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76094 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76101 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76111 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76116 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76119 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76126 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76144 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76151 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76168 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76175 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76195 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76202 "powerpc.tcc"
				>::initialize_function()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76215 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76222 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76235 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76242 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76257 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76266 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76271 "powerpc.tcc"
				> *DecodeOpFsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 76277 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76287 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76291 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76295 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76299 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76302 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));

					}
#line 76359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76371 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76389 "powerpc.tcc"
				)
				{
#line 968 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76404 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76411 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76424 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76431 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76449 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76456 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76474 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76481 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76491 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76499 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76506 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76523 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76530 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76550 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76557 "powerpc.tcc"
				>::initialize_function()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76570 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76577 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76590 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76597 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76612 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76621 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76626 "powerpc.tcc"
				> *DecodeOpFsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 76632 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76642 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76646 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76650 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76654 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76657 "powerpc.tcc"
				)
				{
#line 973 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute and write the result
						cpu->SetFPR(fd, ((!a.isZero() && a.isNegative()) || a.isNaN()) ? b : c);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76689 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76693 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76697 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76701 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76704 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76708 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76711 "powerpc.tcc"
				)
				{
#line 993 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsel" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 76718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76726 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76733 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76746 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76753 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76771 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76778 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76796 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76803 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76813 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76821 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76828 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76846 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76853 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76870 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76877 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76897 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76904 "powerpc.tcc"
				>::initialize_function()
				{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76917 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76924 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76937 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76944 "powerpc.tcc"
				>::initialize_operands()
				{
#line 575 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 76958 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76967 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76972 "powerpc.tcc"
				> *DecodeOpFsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 76978 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76988 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76992 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 76996 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77000 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77003 "powerpc.tcc"
				)
				{
#line 998 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77019 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77023 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77027 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77031 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77034 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77038 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77041 "powerpc.tcc"
				)
				{
#line 1002 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrt" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77056 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77063 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77076 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77083 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77101 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77108 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77126 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77133 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77150 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77157 "powerpc.tcc"
				>::initialize_function()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77170 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77177 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77190 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77197 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77211 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77220 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77225 "powerpc.tcc"
				> *DecodeOpFsqrt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 77231 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77241 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77245 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77249 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77253 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77256 "powerpc.tcc"
				)
				{
#line 1007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77272 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77276 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77280 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77284 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77287 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77291 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77294 "powerpc.tcc"
				)
				{
#line 1011 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrts" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77309 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77316 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77329 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77336 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77354 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77361 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77371 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77379 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77386 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77403 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77410 "powerpc.tcc"
				>::initialize_function()
				{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77423 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77430 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77443 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77450 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77464 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77473 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77478 "powerpc.tcc"
				> *DecodeOpFsqrts(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 77484 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************************

				FLOATING POINT MULTIPLY-ADD INSTRUCTIONS

				******************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 77496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77499 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77503 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77507 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77511 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77514 "powerpc.tcc"
				)
				{
#line 1022 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77578 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77582 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77586 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77590 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77593 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77597 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77600 "powerpc.tcc"
				)
				{
#line 1074 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 77607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77615 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77622 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77635 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77642 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77660 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77667 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77685 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77692 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77710 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77717 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77735 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77742 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77759 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77766 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 77778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77786 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77793 "powerpc.tcc"
				>::initialize_function()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77806 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77813 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 77818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77826 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77833 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77849 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77858 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77863 "powerpc.tcc"
				> *DecodeOpFmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 77869 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77879 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77883 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77887 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77891 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77894 "powerpc.tcc"
				)
				{
#line 1079 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77953 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77961 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77965 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77969 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77973 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77976 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77980 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77983 "powerpc.tcc"
				)
				{
#line 1134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 77990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77998 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78005 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78018 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78025 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78043 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78050 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78068 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78075 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78093 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78100 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78118 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78125 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78142 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78149 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78161 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78169 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78176 "powerpc.tcc"
				>::initialize_function()
				{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78181 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78189 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78196 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78209 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78216 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78232 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78241 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78246 "powerpc.tcc"
				> *DecodeOpFmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 78252 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78262 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78266 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78270 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78274 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78277 "powerpc.tcc"
				)
				{
#line 1139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78333 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78341 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78345 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78349 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78353 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78356 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78360 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78363 "powerpc.tcc"
				)
				{
#line 1191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78378 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78385 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78398 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78405 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78423 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78430 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78440 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78448 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78455 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78465 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78473 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78480 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78498 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78505 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78522 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78529 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78541 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78549 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78556 "powerpc.tcc"
				>::initialize_function()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78569 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78576 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 78581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78589 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78596 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78612 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78621 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78626 "powerpc.tcc"
				> *DecodeOpFmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 78632 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78642 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78646 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78650 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78654 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78657 "powerpc.tcc"
				)
				{
#line 1196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78716 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78724 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78728 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78732 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78736 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78739 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78743 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78746 "powerpc.tcc"
				)
				{
#line 1251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78761 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78768 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78781 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78788 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78806 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78813 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78831 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78838 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78856 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78863 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78881 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78888 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78905 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78912 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78932 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78939 "powerpc.tcc"
				>::initialize_function()
				{
#line 268 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78944 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78952 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78959 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78964 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78972 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78979 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78995 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79004 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79009 "powerpc.tcc"
				> *DecodeOpFmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 79015 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79025 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79029 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79033 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79037 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79040 "powerpc.tcc"
				)
				{
#line 1256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79099 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79107 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79111 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79115 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79119 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79122 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79126 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79129 "powerpc.tcc"
				)
				{
#line 1311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79144 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79151 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79164 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79171 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79181 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79189 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79196 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79214 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79221 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79239 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79246 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79264 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79271 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79288 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79295 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79315 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79322 "powerpc.tcc"
				>::initialize_function()
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79335 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79342 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 79347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79355 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79362 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79378 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79387 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79392 "powerpc.tcc"
				> *DecodeOpFnmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 79398 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79408 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79412 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79416 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79420 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79423 "powerpc.tcc"
				)
				{
#line 1316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79485 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79493 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79497 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79501 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79505 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79508 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79512 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79515 "powerpc.tcc"
				)
				{
#line 1374 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79530 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79537 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79550 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79557 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79575 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79582 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79600 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79607 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79625 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79632 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79650 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79657 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79674 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79681 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79701 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79708 "powerpc.tcc"
				>::initialize_function()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79721 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79728 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79741 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79748 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79764 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79773 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79778 "powerpc.tcc"
				> *DecodeOpFnmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 79784 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79794 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79798 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79802 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79806 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79809 "powerpc.tcc"
				)
				{
#line 1379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79876 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79880 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79884 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79888 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79891 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79895 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79898 "powerpc.tcc"
				)
				{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79913 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79920 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79933 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79940 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79958 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79965 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79983 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79990 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80000 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80008 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80015 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80033 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80040 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80057 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80064 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80084 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80091 "powerpc.tcc"
				>::initialize_function()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80104 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80111 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 80116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80124 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80131 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80147 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80156 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80161 "powerpc.tcc"
				> *DecodeOpFnmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 80167 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80177 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80181 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80185 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80189 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80192 "powerpc.tcc"
				)
				{
#line 1439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 80253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80261 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80265 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80269 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80273 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80276 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80280 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80283 "powerpc.tcc"
				)
				{
#line 1496 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 80290 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80298 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80305 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80318 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80325 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80335 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80343 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80350 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80360 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80368 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80375 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80393 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80400 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80418 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80425 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80442 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80449 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80469 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80476 "powerpc.tcc"
				>::initialize_function()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80489 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80496 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80509 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80516 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80532 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80541 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80546 "powerpc.tcc"
				> *DecodeOpFnmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 80552 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT COMPARE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 80564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80567 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80571 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80575 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80579 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80582 "powerpc.tcc"
				)
				{
#line 1507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							std::cerr << "Internal error" << std::endl;
							abort();
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN and VXVC
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
							}
						}
						if(unlikely(a.isQNaN() || b.isQNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80650 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80658 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80662 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80666 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80670 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80673 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80677 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80680 "powerpc.tcc"
				)
				{
#line 1571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpo cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 80687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80695 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80702 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80715 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80722 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80740 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80747 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80765 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80772 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80789 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80796 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80813 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80820 "powerpc.tcc"
				>::initialize_function()
				{
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80833 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80840 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80853 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80860 "powerpc.tcc"
				>::initialize_operands()
				{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 80873 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80882 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80887 "powerpc.tcc"
				> *DecodeOpFcmpo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 80893 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80903 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80907 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 80911 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80915 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80918 "powerpc.tcc"
				)
				{
#line 1576 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							std::cerr << "Internal error" << std::endl;
							abort();
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80986 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80990 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 80994 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80998 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81001 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81005 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81008 "powerpc.tcc"
				)
				{
#line 1632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpu cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 81015 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81023 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81030 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81043 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81050 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81068 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81075 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81093 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81100 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81117 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81124 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81141 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81148 "powerpc.tcc"
				>::initialize_function()
				{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81161 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81168 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81181 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81188 "powerpc.tcc"
				>::initialize_operands()
				{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 81201 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81210 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81215 "powerpc.tcc"
				> *DecodeOpFcmpu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 81221 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT ROUNDING-CONVERTING INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 81233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81236 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81240 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81244 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81248 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81251 "powerpc.tcc"
				)
				{
#line 1643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81328 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81332 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81336 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81340 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81343 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81347 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81350 "powerpc.tcc"
				)
				{
#line 1708 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiw" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81365 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81372 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81385 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81392 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81410 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81417 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81427 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81435 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81442 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81459 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81466 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81478 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81486 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81493 "powerpc.tcc"
				>::initialize_function()
				{
#line 275 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81506 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81513 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81518 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81526 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81533 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81547 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81556 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81561 "powerpc.tcc"
				> *DecodeOpFctiw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 81567 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81577 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81581 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81585 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81589 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81592 "powerpc.tcc"
				)
				{
#line 1714 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.setRoundingMode(RN_ZERO);
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81670 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81674 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81678 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81682 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81685 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81689 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81692 "powerpc.tcc"
				)
				{
#line 1780 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiwz" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81707 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81714 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81727 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81734 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81744 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81752 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81759 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81777 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81784 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81801 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81808 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81820 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81828 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81835 "powerpc.tcc"
				>::initialize_function()
				{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81840 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81848 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81855 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81868 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81875 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81889 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81898 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81903 "powerpc.tcc"
				> *DecodeOpFctiwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 81909 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81919 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81923 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 81927 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81931 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81934 "powerpc.tcc"
				)
				{
#line 1785 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						flags.clearKeepSignalingConversion();
						flags.setUpApproximateInfty();
						SoftFloat result(b, flags);
						flags.clearUpApproximateInfty();
						flags.setKeepSignalingConversion();

						// Generate OX, UX, VXSNAN, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81998 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82002 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82006 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82010 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82013 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82017 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82020 "powerpc.tcc"
				)
				{
#line 1837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsp" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82035 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82042 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82055 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82062 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82080 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82087 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82097 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82105 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82112 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82121 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82129 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82136 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82156 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82163 "powerpc.tcc"
				>::initialize_function()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82176 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82183 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82196 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82203 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82217 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82226 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82231 "powerpc.tcc"
				> *DecodeOpFrsp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 82237 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT MOVE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 82249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82252 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82256 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82260 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82264 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82267 "powerpc.tcc"
				)
				{
#line 1848 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isNegative())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82305 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82309 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82313 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82317 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82320 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82324 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82327 "powerpc.tcc"
				)
				{
#line 1874 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82342 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82349 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82362 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82369 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82387 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82394 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82404 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82412 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82419 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82436 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82443 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82463 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82470 "powerpc.tcc"
				>::initialize_function()
				{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82475 "powerpc.tcc"
				}
				/** Floating **/
				template <
#line 38 "ppc.isa"
				class
#line 82481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82484 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82491 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82504 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82511 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82523 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82532 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82537 "powerpc.tcc"
				> *DecodeOpFabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 82543 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82553 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82557 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82561 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82565 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82568 "powerpc.tcc"
				)
				{
#line 1879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						cpu->SetFPR(fd, cpu->GetFPR(fb));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82595 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82599 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82603 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82607 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82610 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82614 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82617 "powerpc.tcc"
				)
				{
#line 1894 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmr" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82624 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82632 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82639 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82652 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82659 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82677 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82684 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82702 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82709 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82726 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82733 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82753 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82760 "powerpc.tcc"
				>::initialize_function()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82765 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82773 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82780 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82793 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82800 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82812 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82821 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82826 "powerpc.tcc"
				> *DecodeOpFmr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 82832 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82842 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82846 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82850 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82854 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82857 "powerpc.tcc"
				)
				{
#line 1899 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isPositive())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82895 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82899 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82903 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82907 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82910 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82914 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82917 "powerpc.tcc"
				)
				{
#line 1925 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82932 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82939 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82944 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82952 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82959 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82969 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82977 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82984 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82994 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83002 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83009 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83018 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83026 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83033 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83053 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83060 "powerpc.tcc"
				>::initialize_function()
				{
#line 280 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83073 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83080 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83093 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83100 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83112 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83121 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83126 "powerpc.tcc"
				> *DecodeOpFnabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 83132 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83142 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83146 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83150 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83154 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83157 "powerpc.tcc"
				)
				{
#line 1930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fb);

						// Compute the result
						result.opposite();

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83190 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83194 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83198 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83202 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83205 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83209 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83212 "powerpc.tcc"
				)
				{
#line 1951 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fneg" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 83219 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83227 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83234 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83247 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83254 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83272 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83279 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83289 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83297 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83304 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83321 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83328 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83348 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83355 "powerpc.tcc"
				>::initialize_function()
				{
#line 281 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83360 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83368 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83375 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83388 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83395 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83407 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83416 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83421 "powerpc.tcc"
				> *DecodeOpFneg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 83427 "powerpc.tcc"
					>(code, addr);
				}

				/*****************************************************************

				FLOATING-POINT STATUS & CONTROL REGISTER INSTRUCTIONS

				*****************************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 83439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83442 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83446 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83450 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83454 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83457 "powerpc.tcc"
				)
				{
#line 1962 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();

						// Extract FPSCR source 4-bit field
						uint32_t c = (fpscr >> (4 * (7 - crfS))) & 0xf;
						// Copy it into CR 4-bit destination field
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << (4 * (7 - crfS))));
						if(unlikely(crfS == 0))
						cpu->SetFPSCR(fpscr & 0x9fffffffUL); // Don't clear FEX and VX bits
						else
						cpu->SetFPSCR(fpscr & ~(0xffUL << (4 * (7 - crfS)))); // clear bit field
					}
#line 83481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83489 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83493 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83497 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83501 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83504 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83508 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83511 "powerpc.tcc"
				)
				{
#line 1982 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mcrfs cr" << crfD << ", cr" << crfS;
					}
#line 83518 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83526 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83533 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83546 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83553 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83560 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83568 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83575 "powerpc.tcc"
				>::initialize_function()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83588 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83595 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83608 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83615 "powerpc.tcc"
				>::initialize_operands()
				{
#line 808 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(FPSCRF_T, crfS);
						OUTPUT(CR_T, crfD);
						//  INPUT(FPSCR_T, crfS);
						INPUT(FPSCR_T, 0);
					}
#line 83626 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83635 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83640 "powerpc.tcc"
				> *DecodeOpMcrfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 83646 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83656 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83660 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83664 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83668 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83671 "powerpc.tcc"
				)
				{
#line 1987 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Move FPSCR into destination FPR
						uint32_t fpscr = cpu->GetFPSCR();
						uint64_t _f;
						_f = (uint64_t) fpscr | 0xfff8000000000000ULL;
						cpu->SetFPR(fd, SoftDouble(_f));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83692 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83700 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83704 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83708 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83712 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83715 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83719 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83722 "powerpc.tcc"
				)
				{
#line 2004 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mffs" << (rc ? "." : "") << " f" << fd;
					}
#line 83729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83737 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83744 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83757 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83764 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83779 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83786 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83804 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83811 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83820 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83828 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83835 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83855 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83862 "powerpc.tcc"
				>::initialize_function()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83875 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83882 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83895 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83902 "powerpc.tcc"
				>::initialize_operands()
				{
#line 665 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T,0);
						OUTPUT(FPR_T, fd);
						if (rc)
						{
							OUTPUT(CR_T,1);
						}
					}
#line 83914 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83923 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83928 "powerpc.tcc"
				> *DecodeOpMffs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 83934 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83944 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83948 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 83952 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83956 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83959 "powerpc.tcc"
				)
				{
#line 2009 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr & (~(1 << (31 - crbD)));
						}

						// Generate VX, FEX
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						cpu->SetFPSCR(fpscr);


						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83988 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83996 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84000 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84004 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84008 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84011 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84015 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84018 "powerpc.tcc"
				)
				{
#line 2034 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb0" << (rc ? "." : "") << " crb" << crbD;
					}
#line 84025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84033 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84040 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84053 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84060 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84075 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84082 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84102 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84109 "powerpc.tcc"
				>::initialize_function()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84122 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84129 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84142 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84149 "powerpc.tcc"
				>::initialize_operands()
				{
#line 854 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84162 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84171 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84176 "powerpc.tcc"
				> *DecodeOpMtfsb0(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 84182 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84192 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84196 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84200 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84204 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84207 "powerpc.tcc"
				)
				{
#line 2039 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr | (1 << (31 - crbD));
							cpu->SetFPSCR(fpscr);
						}
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84237 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84241 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84245 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84249 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84252 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84256 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84259 "powerpc.tcc"
				)
				{
#line 2057 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb1" << (rc ? "." : "") << " cr" << crbD;
					}
#line 84266 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84274 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84281 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84294 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84301 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84316 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84323 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84335 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84343 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84350 "powerpc.tcc"
				>::initialize_function()
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84363 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84370 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84383 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84390 "powerpc.tcc"
				>::initialize_operands()
				{
#line 854 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84403 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84412 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84417 "powerpc.tcc"
				> *DecodeOpMtfsb1(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 84423 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84433 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84437 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84441 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84445 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84448 "powerpc.tcc"
				)
				{
#line 2062 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t _m, fpscr, _fm, _rb,_c;
						int _i;
						_rb = cpu->GetFPR(fb).queryValue();
						fpscr = cpu->GetFPSCR();
						_fm = fm;

						if(_fm & 0x80)
						{
							_m = 0x60000000;
						}
						else
						{
							_m=0x0;
						}
						_c=0x1;
						for(_i=0;_i< 8;_i++)
						{
							if(_c & _fm)
							{
								_m= _m | (0xf<<(_i*4));
							}
							_c=_c<<1;
						}
						fpscr = _rb & _m;
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84496 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84500 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84504 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84508 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84511 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84515 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84518 "powerpc.tcc"
				)
				{
#line 2098 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsf" << (rc ? "." : "") << " " << fm << ", f" << fb;
					}
#line 84525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84533 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84540 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84553 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84560 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84575 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84582 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 84592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84600 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84607 "powerpc.tcc"
				>::initialize_function()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84620 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84627 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84640 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84647 "powerpc.tcc"
				>::initialize_operands()
				{
#line 772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						OUTPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
					}
#line 84660 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84669 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84674 "powerpc.tcc"
				> *DecodeOpMtfsf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 84680 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84690 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84694 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84698 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84702 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84705 "powerpc.tcc"
				)
				{
#line 2103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t mask = crfD ? 0xf : 0x9;
						uint32_t fpscr = cpu->GetFPSCR();
						fpscr = (fpscr & (~(0xf << (4 * (7 - crfD))))) | ((imm & mask) << (4 * (7 - crfD)));
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84732 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84736 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84740 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84744 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84747 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84751 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84754 "powerpc.tcc"
				)
				{
#line 2118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsfi" << (rc ? "." : "") << " cr" << crfD << ", " << imm;
					}
#line 84761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84769 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84776 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84789 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84796 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84811 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84818 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 473 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84838 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84845 "powerpc.tcc"
				>::initialize_function()
				{
#line 287 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84858 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84865 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84878 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84885 "powerpc.tcc"
				>::initialize_operands()
				{
#line 796 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						//  OUTPUT(CR_T, crfD);
						OUTPUT(FPSCR_T, 0);
					}
#line 84899 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84908 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84913 "powerpc.tcc"
				> *DecodeOpMtfsfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 84919 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 84959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84962 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84966 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 84970 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84974 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84977 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? li : cpu->GetCIA() + li;
						cpu->SetNIA(target_addr);
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 84986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84994 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84998 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85002 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85006 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85009 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85013 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85016 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = (aa ? li : Operation<CONFIG>::GetAddr() + li);
						os << "b" << (lk ? "l" : "") << (aa ? "a" : "") << " ";
						os << "0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85037 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85044 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85057 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85064 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 416 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85076 "powerpc.tcc"
				}
				/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
				template <
#line 38 "ppc.isa"
				class
#line 85082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85085 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85092 "powerpc.tcc"
				>::initialize_function()
				{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranch;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 85100 "powerpc.tcc"
				}
				/** Branch **/
				template <
#line 38 "ppc.isa"
				class
#line 85106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85109 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85116 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85121 "powerpc.tcc"
				}
				/* Dependancies for Branch Instruction */
				template <
#line 38 "ppc.isa"
				class
#line 85127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85130 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85137 "powerpc.tcc"
				>::initialize_operands()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85155 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85159 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85163 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85167 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85170 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85174 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85177 "powerpc.tcc"
				)
				{
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? li : cia + li);
					}
#line 85184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85192 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85196 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85200 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85204 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85207 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Unconditional branch is statically predicted taken
						return true;
					}
#line 85215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85223 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85227 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85231 "powerpc.tcc"
				>::branch_linked()
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85246 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85250 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85254 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return false;
					}
#line 85261 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85270 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85275 "powerpc.tcc"
				> *DecodeOpB(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpB<
#line 38 "ppc.isa"
					CONFIG
#line 85281 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85291 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85295 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85299 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85303 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85306 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						uint32_t ctr_ok, cond_ok, ok;

						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}

						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						ok = ctr_ok && cond_ok;

						if(ok) {
							typename CONFIG::address_t target_addr = aa ? bd : cpu->GetCIA() + bd;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85360 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85364 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85368 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85372 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85375 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85379 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85382 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? bd : Operation<CONFIG>::GetAddr() + bd;
						switch(bo)
						{
							case 0: os << "bdnzf"; break;
							case 2: os << "bdzf"; break;
							case 4: os << "bf"; break;
							case 8: os << "bdnzt"; break;
							case 10: os << "bdzt"; break;
							case 12: os << "bt"; break;
							case 16: os << "bdnz"; break;
							case 18: os << "bdz"; break;
							default: os << "bc";
						}
						if(lk) os << "l";
						if(aa) os << "a";
						os << " ";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: case 16: case 18: os << bi; break;
							default: os << bo << ", " << bi;
						}
						os << ", 0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85422 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85429 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85442 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85449 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85469 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85476 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85496 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85503 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 416 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85523 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85530 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85550 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85557 "powerpc.tcc"
				>::initialize_function()
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnConditionalBranch;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 85565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85573 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85580 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85585 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85593 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85600 "powerpc.tcc"
				>::initialize_operands()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if( (bo & 16) == 0 )
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85627 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85631 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85635 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85639 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85642 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85646 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85649 "powerpc.tcc"
				)
				{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? bd : cia + bd);
					}
#line 85656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85664 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85668 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85672 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85676 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85679 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// bd represent the displacement
						// bo represent the behavior of the branch
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04) || (bd < 0));
					}
#line 85689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85697 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85701 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85705 "powerpc.tcc"
				>::branch_linked()
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85720 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85724 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85728 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 85735 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85744 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85749 "powerpc.tcc"
				> *DecodeOpBc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBc<
#line 38 "ppc.isa"
					CONFIG
#line 85755 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85765 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85769 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85773 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85777 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85780 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						if(bo & 8) throw IllegalInstructionException<CONFIG>();
						int cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if(cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85815 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85819 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85823 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85827 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85830 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85834 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85837 "powerpc.tcc"
				)
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 4: os << "bfctr"; break;
							case 12: os << "btctr"; break;
						case 20:
							if(bi == 0)
							{
								os << "bctr";
								break;
							}
							// no break if bi != 0
						default:
							os << "bcctr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 4: case 12: os << " " << bi; break;
							case 20: if(bi == 0) break;
							// no break if bi != 0
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85878 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85885 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85898 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85905 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 85914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85922 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85929 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85949 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85956 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 416 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85968 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85976 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85983 "powerpc.tcc"
				>::initialize_function()
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchCountReg;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 85991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85999 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86006 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86019 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86026 "powerpc.tcc"
				>::initialize_operands()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CTR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86049 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86053 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86057 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86061 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86064 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86068 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86071 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetCTR() & 0xfffffffc);
					}
#line 86078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86086 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86090 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86094 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86098 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86101 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86118 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86122 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86126 "powerpc.tcc"
				>::branch_linked()
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86141 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86145 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86149 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86156 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86165 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86170 "powerpc.tcc"
				> *DecodeOpBcctr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 86176 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86186 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86190 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86194 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86198 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86201 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						int ctr_ok, cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						if(ctr_ok && cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 86243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86251 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86255 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86259 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86263 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86266 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86270 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86273 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 0: os << "bdnzflr"; break;
							case 2: os << "bdzflr"; break;
							case 4: os << "bflr"; break;
							case 8: os << "bdnztlr"; break;
							case 10: os << "bdztlr"; break;
							case 12: os << "btlr"; break;
							case 16: os << "bdnzlr"; break;
							case 18: os << "bdzlr"; break;
							case 20: os << "blr"; break;
							default: os << "bclr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: os << " " << bi; break;
							case 16: case 18: case 20: break;
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 86304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86312 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86319 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 86324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86332 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86339 "powerpc.tcc"
				>::initialize_read_lr()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86356 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86363 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86383 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86390 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86410 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86417 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 416 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86437 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86444 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86456 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86464 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86471 "powerpc.tcc"
				>::initialize_function()
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchLinkReg;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 86479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86487 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86494 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86499 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86507 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86514 "powerpc.tcc"
				>::initialize_operands()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(LR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86542 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86546 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86550 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86554 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86557 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86561 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86564 "powerpc.tcc"
				)
				{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetLR() & 0xfffffffc);
					}
#line 86571 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86579 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86583 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86587 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86591 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86594 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86603 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86611 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86615 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86619 "powerpc.tcc"
				>::branch_linked()
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86634 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86638 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86642 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86649 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86658 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86663 "powerpc.tcc"
				> *DecodeOpBclr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 86669 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 86709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86712 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86716 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86720 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86724 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86727 "powerpc.tcc"
				)
				{
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & _b)<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 86740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86748 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86752 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86756 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86760 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86763 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86767 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86770 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 86777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86785 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86792 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 86797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86805 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86812 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 86819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86827 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86834 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86851 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86858 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86875 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86882 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86891 "powerpc.tcc"
				}
				/** Condition Register **/
				template <
#line 38 "ppc.isa"
				class
#line 86897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86900 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86907 "powerpc.tcc"
				>::initialize_function()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 86912 "powerpc.tcc"
				}
				/** Condition **/
				template <
#line 38 "ppc.isa"
				class
#line 86918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86921 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86928 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86941 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86948 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 86979 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86988 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86993 "powerpc.tcc"
				> *DecodeOpCrand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 86999 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87009 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87013 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87017 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87021 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87024 "powerpc.tcc"
				)
				{
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87045 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87049 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87053 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87057 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87060 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87064 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87067 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crandc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87082 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87089 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87102 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87109 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87124 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87131 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87148 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87155 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87172 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87179 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87196 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87203 "powerpc.tcc"
				>::initialize_function()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87216 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87223 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87236 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87243 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87274 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87283 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87288 "powerpc.tcc"
				> *DecodeOpCrandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 87294 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87304 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87308 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87312 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87316 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87319 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a ^ _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87340 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87344 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87348 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87352 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87355 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87359 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87362 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "creqv cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87377 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87384 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87397 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87404 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87419 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87426 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87443 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87450 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87467 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87474 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87491 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87498 "powerpc.tcc"
				>::initialize_function()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87511 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87518 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87531 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87538 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87569 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87578 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87583 "powerpc.tcc"
				> *DecodeOpCreqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 87589 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87599 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87603 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87607 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87611 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87614 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a & _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87635 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87639 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87643 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87647 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87650 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87654 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87657 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87664 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87672 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87679 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87692 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87699 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87714 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87721 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87730 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87738 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87745 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87762 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87769 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87786 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87793 "powerpc.tcc"
				>::initialize_function()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87806 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87813 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87826 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87833 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87864 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87873 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87878 "powerpc.tcc"
				> *DecodeOpCrnand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 87884 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87894 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87898 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87902 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87906 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87909 "powerpc.tcc"
				)
				{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a | _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87930 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87934 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87938 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87942 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87945 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87949 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87952 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87967 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87974 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87987 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87994 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88009 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88016 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88033 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88040 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88057 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88064 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88073 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88081 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88088 "powerpc.tcc"
				>::initialize_function()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88101 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88108 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88113 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88121 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88128 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88159 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88168 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88173 "powerpc.tcc"
				> *DecodeOpCrnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 88179 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88189 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88193 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88197 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88201 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88204 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | _b) << (31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88217 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88225 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88229 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88233 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88237 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88240 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88244 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88247 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "cror cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88254 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88262 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88269 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88282 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88289 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88296 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88304 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88311 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88328 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88335 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88352 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88359 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88376 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88383 "powerpc.tcc"
				>::initialize_function()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88388 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88396 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88403 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88416 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88423 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88454 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88463 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88468 "powerpc.tcc"
				> *DecodeOpCror(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCror<
#line 38 "ppc.isa"
					CONFIG
#line 88474 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88484 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88488 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88492 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88496 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88499 "powerpc.tcc"
				)
				{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88512 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88520 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88524 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88528 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88532 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88535 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88539 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88542 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crorc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88557 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88564 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88569 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88577 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88584 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88599 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88606 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88623 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88630 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88647 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88654 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88671 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88678 "powerpc.tcc"
				>::initialize_function()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88691 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88698 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88711 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88718 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88749 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88758 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88763 "powerpc.tcc"
				> *DecodeOpCrorc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 88769 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88779 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88783 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88787 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88791 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88794 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _e ;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a ^ _b)<<(31-crbD);
						_e = ~(1<<(31-crbD));
						cpu->SetCR((_c & _e) | _d );
					}
#line 88807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88815 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88819 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88823 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88827 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88830 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88834 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88837 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crxor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88852 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88859 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88872 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88879 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88894 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88901 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88918 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88925 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88942 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88949 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88966 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88973 "powerpc.tcc"
				>::initialize_function()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88986 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88993 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89006 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89013 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 89044 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89053 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89058 "powerpc.tcc"
				> *DecodeOpCrxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 89064 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89074 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89078 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89082 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89086 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89089 "powerpc.tcc"
				)
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						cpu->SetCR((cpu->GetCR() & (~(0xf << (4 * (7 - crfD))))) | (((cpu->GetCR() >> (4 * (7 - crfS))) & 0xf) << (4 * (7 - crfD))));
					}
#line 89096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89104 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89108 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89112 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89116 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89119 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89123 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89126 "powerpc.tcc"
				)
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "mcrf cr" << crfD << ", cr" << crfS;
					}
#line 89133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89141 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89148 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 89153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89161 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89168 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89177 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89185 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89192 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89209 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89216 "powerpc.tcc"
				>::initialize_function()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 89221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89229 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89236 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89241 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89249 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89256 "powerpc.tcc"
				>::initialize_operands()
				{
#line 817 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(CRF_T, crfS);
						OUTPUT(CR_T, crfD);
						INPUT(CR_T, crfS);
					}
#line 89266 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89275 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89280 "powerpc.tcc"
				> *DecodeOpMcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 89286 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************

				INTEGER LOAD INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 89331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89334 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89338 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89342 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89346 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89349 "powerpc.tcc"
				)
				{
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 89359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89371 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89389 "powerpc.tcc"
				)
				{
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89409 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89416 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89429 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89436 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89454 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89461 "powerpc.tcc"
				>::initialize_function()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89466 "powerpc.tcc"
				}
				/** Load Store **/
				template <
#line 38 "ppc.isa"
				class
#line 89472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89475 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89482 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89487 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89495 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89502 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 89514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89522 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89526 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89530 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89534 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89537 "powerpc.tcc"
				)
				{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89550 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89554 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89558 "powerpc.tcc"
				>::memory_access_size()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89563 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89569 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89572 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89577 "powerpc.tcc"
				> *DecodeOpLbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 89583 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89593 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89597 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89601 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89605 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89608 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89629 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89633 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89637 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89641 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89644 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89648 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89651 "powerpc.tcc"
				)
				{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89671 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89678 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89691 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89698 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89708 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89716 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89723 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89741 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89748 "powerpc.tcc"
				>::initialize_function()
				{
#line 301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89761 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89768 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89781 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89788 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 89797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89805 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89809 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89813 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89817 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89820 "powerpc.tcc"
				)
				{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89833 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89837 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89841 "powerpc.tcc"
				>::memory_access_size()
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89846 "powerpc.tcc"
				}
				// Integer LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 89852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89855 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 89859 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89863 "powerpc.tcc"
				>::is_splitted()
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 89870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89878 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 89882 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89886 "powerpc.tcc"
				>::split_into()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 34 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 89907 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89916 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89921 "powerpc.tcc"
				> *DecodeOpLbzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 89927 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89937 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89941 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89945 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89949 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89952 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89973 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89977 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89981 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89985 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89988 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89992 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89995 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90007 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90015 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90022 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90035 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90042 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90060 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90067 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90085 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90092 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90102 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90110 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90117 "powerpc.tcc"
				>::initialize_function()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90122 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90130 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90137 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90150 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90157 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90174 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90178 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90182 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90186 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90189 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90202 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90206 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90210 "powerpc.tcc"
				>::memory_access_size()
				{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90223 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90227 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90231 "powerpc.tcc"
				>::is_splitted()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 90238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90246 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 90250 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90254 "powerpc.tcc"
				>::split_into()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (87 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 90277 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90286 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90291 "powerpc.tcc"
				> *DecodeOpLbzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 90297 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90307 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90311 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90315 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90319 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90322 "powerpc.tcc"
				)
				{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 90332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90340 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90344 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90348 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90352 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90355 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90359 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90362 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90374 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90382 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90389 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90394 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90402 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90409 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90427 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90434 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90444 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90452 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90459 "powerpc.tcc"
				>::initialize_function()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90464 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90472 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90479 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90484 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 90491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90494 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90501 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90518 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90522 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90526 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90530 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90533 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90546 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90550 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90554 "powerpc.tcc"
				>::memory_access_size()
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90559 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90568 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90573 "powerpc.tcc"
				> *DecodeOpLbzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 90579 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90589 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90593 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90597 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90601 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90604 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 90614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90622 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90626 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90630 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90634 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90637 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90641 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90644 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lha r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90664 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90671 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90684 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90691 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90709 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90716 "powerpc.tcc"
				>::initialize_function()
				{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90729 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90736 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90741 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90749 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90756 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 90768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90776 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90780 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90784 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90788 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90791 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90804 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90808 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90812 "powerpc.tcc"
				>::memory_access_size()
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 90817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90825 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90829 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90833 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 788 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 90838 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90847 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90852 "powerpc.tcc"
				> *DecodeOpLha(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLha<
#line 38 "ppc.isa"
					CONFIG
#line 90858 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90868 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90872 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90876 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90880 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90883 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 90896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90904 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90908 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90912 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90916 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90919 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90923 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90926 "powerpc.tcc"
				)
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhau r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90938 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90946 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90953 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90966 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90973 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90991 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90998 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91016 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91023 "powerpc.tcc"
				>::initialize_function()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91036 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91043 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91056 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91063 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 91072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91080 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91084 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91088 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91092 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91095 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91108 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91112 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91116 "powerpc.tcc"
				>::memory_access_size()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91121 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91129 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91133 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91137 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91142 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91151 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91156 "powerpc.tcc"
				> *DecodeOpLhau(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 91162 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91172 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91176 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91180 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91184 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91187 "powerpc.tcc"
				)
				{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 91200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91208 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91212 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91216 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91220 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91223 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91227 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91230 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhaux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91250 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91257 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91270 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91277 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91295 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91302 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91312 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91320 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91327 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91345 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91352 "powerpc.tcc"
				>::initialize_function()
				{
#line 306 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91365 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91372 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91385 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91392 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91409 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91413 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91417 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91421 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91424 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91437 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91441 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91445 "powerpc.tcc"
				>::memory_access_size()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91450 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91458 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91462 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91466 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 790 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91471 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91480 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91485 "powerpc.tcc"
				> *DecodeOpLhaux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 91491 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91501 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91505 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91509 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91513 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91516 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 91526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91534 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91538 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91542 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91546 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91549 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91553 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91556 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhax r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91576 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91583 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91596 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91603 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91621 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91628 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91646 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91653 "powerpc.tcc"
				>::initialize_function()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91666 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91673 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91678 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 91685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91688 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91695 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91704 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91712 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91716 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91720 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91724 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91727 "powerpc.tcc"
				)
				{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91740 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91744 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91748 "powerpc.tcc"
				>::memory_access_size()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91761 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91765 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91769 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 791 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91774 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91783 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91788 "powerpc.tcc"
				> *DecodeOpLhax(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 91794 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91804 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91808 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91812 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91816 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91819 "powerpc.tcc"
				)
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 91829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91837 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91841 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91845 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91849 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91852 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91856 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91859 "powerpc.tcc"
				)
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91879 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91886 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91899 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91906 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91924 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91931 "powerpc.tcc"
				>::initialize_function()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91944 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91951 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91964 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91971 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 91983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91991 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91995 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91999 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92003 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92006 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92019 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92023 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92027 "powerpc.tcc"
				>::memory_access_size()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92032 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92041 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92046 "powerpc.tcc"
				> *DecodeOpLhz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 92052 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92062 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92066 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92070 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92074 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92077 "powerpc.tcc"
				)
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92098 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92102 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92106 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92110 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92113 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92117 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92120 "powerpc.tcc"
				)
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92132 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92140 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92147 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92152 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92160 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92167 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92177 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92185 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92192 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92210 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92217 "powerpc.tcc"
				>::initialize_function()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92230 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92237 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92250 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92257 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 92266 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92274 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92278 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92282 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92286 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92289 "powerpc.tcc"
				)
				{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92302 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92306 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92310 "powerpc.tcc"
				>::memory_access_size()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92323 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92327 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92331 "powerpc.tcc"
				>::is_splitted()
				{
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92346 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92350 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92354 "powerpc.tcc"
				>::split_into()
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 40 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92375 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92384 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92389 "powerpc.tcc"
				> *DecodeOpLhzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 92395 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92405 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92409 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92413 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92417 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92420 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92433 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92441 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92445 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92449 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92453 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92456 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92460 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92463 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92483 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92490 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92503 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92510 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92528 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92535 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92553 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92560 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92578 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92585 "powerpc.tcc"
				>::initialize_function()
				{
#line 310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92598 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92605 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92618 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92625 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92642 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92646 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92650 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92654 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92657 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92670 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92674 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92678 "powerpc.tcc"
				>::memory_access_size()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92691 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92695 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92699 "powerpc.tcc"
				>::is_splitted()
				{
#line 334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92714 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92718 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92722 "powerpc.tcc"
				>::split_into()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (279 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92745 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92754 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92759 "powerpc.tcc"
				> *DecodeOpLhzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 92765 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92775 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92779 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92783 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92787 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92790 "powerpc.tcc"
				)
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 92800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92808 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92812 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92816 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92820 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92823 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92827 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92830 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92850 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92857 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92870 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92877 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92895 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92902 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92912 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92920 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92927 "powerpc.tcc"
				>::initialize_function()
				{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92940 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92947 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92952 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 92959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92962 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92969 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92986 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92990 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92994 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92998 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93001 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93014 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93018 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93022 "powerpc.tcc"
				>::memory_access_size()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 93027 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93036 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93041 "powerpc.tcc"
				> *DecodeOpLhzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 93047 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93057 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93061 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93065 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93069 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93072 "powerpc.tcc"
				)
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 93082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93090 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93094 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93098 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93102 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93105 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93109 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93112 "powerpc.tcc"
				)
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93124 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93129 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93132 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93139 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93144 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93152 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93159 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93177 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93184 "powerpc.tcc"
				>::initialize_function()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93197 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93204 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93217 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93224 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 93236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93244 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93248 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93252 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93256 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93259 "powerpc.tcc"
				)
				{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93272 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93276 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93280 "powerpc.tcc"
				>::memory_access_size()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93285 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93294 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93299 "powerpc.tcc"
				> *DecodeOpLwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 93305 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93315 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93319 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93323 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93327 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93330 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93351 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93355 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93359 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93363 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93366 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93370 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93373 "powerpc.tcc"
				)
				{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93393 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93400 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93413 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93420 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93438 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93445 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93463 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93470 "powerpc.tcc"
				>::initialize_function()
				{
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93483 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93490 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93503 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93510 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 93519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93527 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93531 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93535 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93539 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93542 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93555 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93559 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93563 "powerpc.tcc"
				>::memory_access_size()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93576 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93580 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93584 "powerpc.tcc"
				>::is_splitted()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93599 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93603 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93607 "powerpc.tcc"
				>::split_into()
				{
#line 360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwz_ctype=0;
						lwz_ctype = 32 << 26;
						lwz_ctype = lwz_ctype | (rd << 21);
						lwz_ctype = lwz_ctype | (ra << 16);
						lwz_ctype = lwz_ctype | (d & 0xffff);
						l.push_back( new OpLwz<CONFIG>(lwz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 93629 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93638 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93643 "powerpc.tcc"
				> *DecodeOpLwzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 93649 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93659 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93663 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93667 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93671 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93674 "powerpc.tcc"
				)
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93695 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93699 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93703 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93707 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93710 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93714 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93717 "powerpc.tcc"
				)
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93737 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93744 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93757 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93764 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93782 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93789 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93807 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93814 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93832 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93839 "powerpc.tcc"
				>::initialize_function()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93852 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93859 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93872 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93879 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 93888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93896 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93900 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93904 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93908 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93911 "powerpc.tcc"
				)
				{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93924 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93928 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93932 "powerpc.tcc"
				>::memory_access_size()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93945 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93949 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93953 "powerpc.tcc"
				>::is_splitted()
				{
#line 379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93960 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93968 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93972 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93976 "powerpc.tcc"
				>::split_into()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwzx_ctype=0;
						lwzx_ctype = 31 << 26;
						lwzx_ctype = lwzx_ctype | (rd << 21);
						lwzx_ctype = lwzx_ctype | (ra << 16);
						lwzx_ctype = lwzx_ctype | (rb << 11);
						lwzx_ctype = lwzx_ctype | (23 << 1);
						l.push_back( new OpLwzx<CONFIG>(lwzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 93999 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94008 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94013 "powerpc.tcc"
				> *DecodeOpLwzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 94019 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94029 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94033 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94037 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94041 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94044 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 94054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94062 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94066 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94070 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94074 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94077 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94081 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94084 "powerpc.tcc"
				)
				{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94104 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94111 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94124 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94131 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94149 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94156 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94174 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94181 "powerpc.tcc"
				>::initialize_function()
				{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 94186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94194 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94201 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94206 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 94213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94216 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94223 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 94232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94240 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94244 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94248 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94252 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94255 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 94260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94268 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94272 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94276 "powerpc.tcc"
				>::memory_access_size()
				{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 94281 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94290 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94295 "powerpc.tcc"
				> *DecodeOpLwzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 94301 "powerpc.tcc"
					>(code, addr);
				}

				/****************************

				INTEGER STORE INSTRUCTIONS

				****************************/
				template <
#line 38 "ppc.isa"
				class
#line 94313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94316 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94320 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94324 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94328 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94331 "powerpc.tcc"
				)
				{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 94341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94349 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94353 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94357 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94361 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94364 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94368 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94371 "powerpc.tcc"
				)
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stb r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94383 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94391 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94398 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94411 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94418 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94433 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94440 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94450 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94458 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94465 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94483 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94490 "powerpc.tcc"
				>::initialize_function()
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94503 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94510 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94523 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94530 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 94538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94546 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94550 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94554 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94558 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94561 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94566 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94574 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94578 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94582 "powerpc.tcc"
				>::memory_access_size()
				{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94587 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94596 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94601 "powerpc.tcc"
				> *DecodeOpStb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStb<
#line 38 "ppc.isa"
					CONFIG
#line 94607 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94617 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94621 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94625 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94629 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94632 "powerpc.tcc"
				)
				{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 94645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94653 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94657 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94661 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94665 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94668 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94672 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94675 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94695 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94702 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94715 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94722 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94737 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94744 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94762 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94769 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94787 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94794 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94812 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94819 "powerpc.tcc"
				>::initialize_function()
				{
#line 317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94832 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94839 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94852 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94859 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 94868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94876 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94880 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94884 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94888 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94891 "powerpc.tcc"
				)
				{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94904 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94908 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94912 "powerpc.tcc"
				>::memory_access_size()
				{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94917 "powerpc.tcc"
				}
				// Integer STORES with update
				template <
#line 38 "ppc.isa"
				class
#line 94923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94926 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 94930 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94934 "powerpc.tcc"
				>::is_splitted()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 94941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94949 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 94953 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94957 "powerpc.tcc"
				>::split_into()
				{
#line 406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 38 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 94980 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94989 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94994 "powerpc.tcc"
				> *DecodeOpStbu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 95000 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95010 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95014 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95018 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95022 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95025 "powerpc.tcc"
				)
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 95038 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95046 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95050 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95054 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95058 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95061 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95065 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95068 "powerpc.tcc"
				)
				{
#line 370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95088 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95095 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95108 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95115 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95122 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95130 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95137 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95155 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95162 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95180 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95187 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95197 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95205 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95212 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95230 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95237 "powerpc.tcc"
				>::initialize_function()
				{
#line 318 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95250 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95257 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95270 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95277 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95294 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95298 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95302 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95306 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95309 "powerpc.tcc"
				)
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95322 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95326 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95330 "powerpc.tcc"
				>::memory_access_size()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95335 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95343 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 95347 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95351 "powerpc.tcc"
				>::is_splitted()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 95358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95366 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 95370 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95374 "powerpc.tcc"
				>::split_into()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stbx_ctype=0;
						stbx_ctype = 31 << 26;
						stbx_ctype = stbx_ctype | (rs << 21);
						stbx_ctype = stbx_ctype | (ra << 16);
						stbx_ctype = stbx_ctype | (rb << 11);
						stbx_ctype = stbx_ctype | (215 << 1);
						l.push_back( new OpStb<CONFIG>(stbx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 95399 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95408 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95413 "powerpc.tcc"
				> *DecodeOpStbux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 95419 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95429 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95433 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95437 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95441 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95444 "powerpc.tcc"
				)
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 95454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95462 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95466 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95470 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95474 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95477 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95481 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95484 "powerpc.tcc"
				)
				{
#line 386 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95504 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95511 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95524 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95531 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95546 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95553 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95571 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95578 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95596 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95603 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95621 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95628 "powerpc.tcc"
				>::initialize_function()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95641 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95648 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95653 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95661 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95668 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95685 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95689 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95693 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95697 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95700 "powerpc.tcc"
				)
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95713 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95717 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95721 "powerpc.tcc"
				>::memory_access_size()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95726 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95735 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95740 "powerpc.tcc"
				> *DecodeOpStbx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 95746 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95756 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95760 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95764 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95768 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95771 "powerpc.tcc"
				)
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 95781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95789 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95793 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95797 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95801 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95804 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95808 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95811 "powerpc.tcc"
				)
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sth r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95831 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95838 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95851 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95858 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95873 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95880 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95898 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95905 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95923 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95930 "powerpc.tcc"
				>::initialize_function()
				{
#line 320 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95943 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95950 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95963 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95970 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 95978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95986 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95990 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95994 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95998 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96001 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96014 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96018 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96022 "powerpc.tcc"
				>::memory_access_size()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96027 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96036 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96041 "powerpc.tcc"
				> *DecodeOpSth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSth<
#line 38 "ppc.isa"
					CONFIG
#line 96047 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96057 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96061 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96065 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96069 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96072 "powerpc.tcc"
				)
				{
#line 412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96093 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96097 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96101 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96105 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96108 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96112 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96115 "powerpc.tcc"
				)
				{
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96135 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96142 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96155 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96162 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 96169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96177 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96184 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96202 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96209 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96219 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96227 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96234 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96252 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96259 "powerpc.tcc"
				>::initialize_function()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96272 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96279 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96292 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96299 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 96308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96316 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96320 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96324 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96328 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96331 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96336 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96344 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96348 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96352 "powerpc.tcc"
				>::memory_access_size()
				{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96365 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96369 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96373 "powerpc.tcc"
				>::is_splitted()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96388 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96392 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96396 "powerpc.tcc"
				>::split_into()
				{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 44 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96419 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96428 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96433 "powerpc.tcc"
				> *DecodeOpSthu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 96439 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96449 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96453 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96457 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96461 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96464 "powerpc.tcc"
				)
				{
#line 431 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96477 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96485 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96489 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96493 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96497 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96500 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96504 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96507 "powerpc.tcc"
				)
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96527 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96534 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96539 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96547 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96554 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96564 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96569 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96572 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96579 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96597 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96604 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96622 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96629 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96647 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96654 "powerpc.tcc"
				>::initialize_function()
				{
#line 322 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96667 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96674 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96687 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96694 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 96703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96711 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96715 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96719 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96723 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96726 "powerpc.tcc"
				)
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96739 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96743 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96747 "powerpc.tcc"
				>::memory_access_size()
				{
#line 174 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96752 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96760 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96764 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96768 "powerpc.tcc"
				>::is_splitted()
				{
#line 474 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96783 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96787 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96791 "powerpc.tcc"
				>::split_into()
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType sthx_ctype=0;
						sthx_ctype = 31 << 26;
						sthx_ctype = sthx_ctype | (rs << 21);
						sthx_ctype = sthx_ctype | (ra << 16);
						sthx_ctype = sthx_ctype | (rb << 11);
						sthx_ctype = sthx_ctype | (407 << 1);
						l.push_back( new OpStb<CONFIG>(sthx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96816 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96825 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96830 "powerpc.tcc"
				> *DecodeOpSthux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 96836 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96846 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96850 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96854 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96858 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96861 "powerpc.tcc"
				)
				{
#line 450 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 96871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96879 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96883 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96887 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96891 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96894 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96898 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96901 "powerpc.tcc"
				)
				{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96913 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96921 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96928 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96941 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96948 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96966 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96973 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96991 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96998 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97016 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97023 "powerpc.tcc"
				>::initialize_function()
				{
#line 323 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97036 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97043 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97056 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97063 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 97072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97080 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97084 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97088 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97092 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97095 "powerpc.tcc"
				)
				{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97108 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97112 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97116 "powerpc.tcc"
				>::memory_access_size()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 97121 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97130 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97135 "powerpc.tcc"
				> *DecodeOpSthx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 97141 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97151 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97155 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97159 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97163 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97166 "powerpc.tcc"
				)
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 97176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97184 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97188 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97192 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97196 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97199 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97203 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97206 "powerpc.tcc"
				)
				{
#line 472 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97226 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97233 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97246 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97253 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97268 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97275 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97285 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97293 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97300 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97318 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97325 "powerpc.tcc"
				>::initialize_function()
				{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97338 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97345 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97358 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97365 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 97373 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97381 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97385 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97389 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97393 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97396 "powerpc.tcc"
				)
				{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97409 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97413 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97417 "powerpc.tcc"
				>::memory_access_size()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97422 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97431 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97436 "powerpc.tcc"
				> *DecodeOpStw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStw<
#line 38 "ppc.isa"
					CONFIG
#line 97442 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97452 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97456 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97460 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97464 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97467 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97488 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97492 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97496 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97500 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97503 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97507 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97510 "powerpc.tcc"
				)
				{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97530 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97537 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97550 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97557 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97564 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97569 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97572 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97579 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97597 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97604 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97622 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97629 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97647 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97654 "powerpc.tcc"
				>::initialize_function()
				{
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97667 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97674 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97687 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97694 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 97703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97711 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97715 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97719 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97723 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97726 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97739 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97743 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97747 "powerpc.tcc"
				>::memory_access_size()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97752 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97760 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 97764 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97768 "powerpc.tcc"
				>::is_splitted()
				{
#line 500 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 97775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97783 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 97787 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97791 "powerpc.tcc"
				>::split_into()
				{
#line 503 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stw_ctype=0;
						stw_ctype = 36 << 26;
						stw_ctype = stw_ctype | (rs << 21);
						stw_ctype = stw_ctype | (ra << 16);
						stw_ctype = stw_ctype | (d & 0xffff);
						l.push_back( new OpStw<CONFIG>(stw_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 97814 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97823 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97828 "powerpc.tcc"
				> *DecodeOpStwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 97834 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97844 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97848 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97852 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97856 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97859 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97880 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97884 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97888 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97892 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97895 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97899 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97902 "powerpc.tcc"
				)
				{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97922 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97929 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97942 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97949 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97964 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97971 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97981 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97989 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97996 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98014 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98021 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98039 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98046 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98064 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98071 "powerpc.tcc"
				>::initialize_function()
				{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98084 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98091 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98104 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98111 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98128 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98132 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98136 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98140 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98143 "powerpc.tcc"
				)
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98156 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98160 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98164 "powerpc.tcc"
				>::memory_access_size()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98177 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 98181 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98185 "powerpc.tcc"
				>::is_splitted()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 98192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98200 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 98204 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98208 "powerpc.tcc"
				>::split_into()
				{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stwx_ctype=0;
						stwx_ctype = 31 << 26;
						stwx_ctype = stwx_ctype | (rs << 21);
						stwx_ctype = stwx_ctype | (ra << 16);
						stwx_ctype = stwx_ctype | (rb << 11);
						stwx_ctype = stwx_ctype | (151 << 1);
						l.push_back( new OpStwx<CONFIG>(stwx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 98232 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98241 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98246 "powerpc.tcc"
				> *DecodeOpStwux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 98252 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98262 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98266 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98270 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98274 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98277 "powerpc.tcc"
				)
				{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 98287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98295 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98299 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98303 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98307 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98310 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98314 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98317 "powerpc.tcc"
				)
				{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98329 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98337 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98344 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98349 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98357 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98364 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 98371 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98379 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98386 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98404 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98411 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98429 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98436 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98454 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98461 "powerpc.tcc"
				>::initialize_function()
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98474 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98481 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98494 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98501 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98518 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98522 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98526 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98530 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98533 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98546 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98550 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98554 "powerpc.tcc"
				>::memory_access_size()
				{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98559 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98568 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98573 "powerpc.tcc"
				> *DecodeOpStwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 98579 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				INTEGER LOAD STORE w BYTE REVERSE INSTRUCTIONS

				***************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 98591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98594 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98598 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98602 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98606 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98609 "powerpc.tcc"
				)
				{
#line 542 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16LoadByteReverse(rd, ea); // 16-bit load/byte reverse/no signe extend
					}
#line 98619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98627 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98631 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98635 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98639 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98642 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98646 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98649 "powerpc.tcc"
				)
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98669 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98676 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98689 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98696 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98714 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98721 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98739 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98746 "powerpc.tcc"
				>::initialize_function()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 98751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98759 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98766 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98771 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 98778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98781 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98788 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98805 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98809 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98813 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98817 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98820 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 98825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98833 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98837 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98841 "powerpc.tcc"
				>::memory_access_size()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 98846 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98855 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98860 "powerpc.tcc"
				> *DecodeOpLhbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 98866 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98876 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98880 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98884 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98888 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98891 "powerpc.tcc"
				)
				{
#line 558 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32LoadByteReverse(rd, ea); // 32-bit load/byte reverse/no signe extend
					}
#line 98901 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98909 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98913 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98917 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98921 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98924 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98928 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98931 "powerpc.tcc"
				)
				{
#line 564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98951 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98958 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98971 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98978 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98988 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98996 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99003 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99013 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99021 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99028 "powerpc.tcc"
				>::initialize_function()
				{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 99033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99041 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99048 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99053 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 99060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99063 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99070 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99087 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99091 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99095 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99099 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99102 "powerpc.tcc"
				)
				{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 99107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99115 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99119 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99123 "powerpc.tcc"
				>::memory_access_size()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99128 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99137 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99142 "powerpc.tcc"
				> *DecodeOpLwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99148 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99158 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99162 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99166 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99170 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99173 "powerpc.tcc"
				)
				{
#line 574 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16StoreByteReverse(rs, ea); // 16-bit load/byte reverse
					}
#line 99183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99191 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99195 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99199 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99203 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99206 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99210 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99213 "powerpc.tcc"
				)
				{
#line 580 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99233 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99240 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99253 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99260 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99267 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99275 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99282 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99292 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99300 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99307 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99325 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99332 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99350 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99357 "powerpc.tcc"
				>::initialize_function()
				{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99370 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99377 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99390 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99397 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99406 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99411 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99414 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99418 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99422 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99426 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99429 "powerpc.tcc"
				)
				{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99442 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99446 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99450 "powerpc.tcc"
				>::memory_access_size()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 99455 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99464 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99469 "powerpc.tcc"
				> *DecodeOpSthbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99475 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99485 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99489 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99493 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99497 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99500 "powerpc.tcc"
				)
				{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32StoreByteReverse(rs, ea); // 32-bit load/byte reverse
					}
#line 99510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99518 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99522 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99526 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99530 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99533 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99537 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99540 "powerpc.tcc"
				)
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99560 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99567 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99580 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99587 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99594 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99602 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99609 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99627 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99634 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99652 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99659 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99677 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99684 "powerpc.tcc"
				>::initialize_function()
				{
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99697 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99704 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99717 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99724 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99741 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99745 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99749 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99753 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99756 "powerpc.tcc"
				)
				{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99769 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99773 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99777 "powerpc.tcc"
				>::memory_access_size()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99782 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99791 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99796 "powerpc.tcc"
				> *DecodeOpStwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99802 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE STRING INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 99814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99817 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99821 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99825 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99829 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99832 "powerpc.tcc"
				)
				{
#line 612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = nb ? nb : 32;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 99856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99864 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99868 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99872 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99876 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99879 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99883 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99886 "powerpc.tcc"
				)
				{
#line 632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswi r" << rd << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99906 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99913 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99926 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99933 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99951 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 99955 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99959 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 99963 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 99966 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 99970 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 99973 "powerpc.tcc"
				)
				{
#line 525 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;
					}
#line 99994 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100002 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100006 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100010 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100014 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100017 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100021 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100024 "powerpc.tcc"
				)
				{
#line 612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100042 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100050 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100057 "powerpc.tcc"
				>::initialize_function()
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadStringImm; }
#line 100062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100070 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100077 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100082 "powerpc.tcc"
				}
				// --- Load & Store string ----------------------------------------------------
				/*

				lswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				lswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				*/
				template <
#line 38 "ppc.isa"
				class
#line 100135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100138 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100145 "powerpc.tcc"
				>::initialize_operands()
				{
#line 924 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra); // target address
						INPUT(GPR_T, rd);
						INPUT(IMM_T, nb);
					}
#line 100154 "powerpc.tcc"
				}
				//Load string
				template <
#line 38 "ppc.isa"
				class
#line 100160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100163 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100167 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100171 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100175 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100178 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100191 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100195 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100199 "powerpc.tcc"
				>::memory_access_size()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100212 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100216 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100220 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100224 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100227 "powerpc.tcc"
				)
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 100232 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100241 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100246 "powerpc.tcc"
				> *DecodeOpLswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 100252 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100262 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100266 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100270 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100274 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100277 "powerpc.tcc"
				)
				{
#line 642 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100303 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100311 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100315 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100319 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100323 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100326 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100330 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100333 "powerpc.tcc"
				)
				{
#line 664 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100353 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100360 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100373 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100380 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100398 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100405 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100423 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100427 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100431 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100435 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100438 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100442 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100445 "powerpc.tcc"
				)
				{
#line 543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 100473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100481 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100485 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100489 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100493 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100496 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100500 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100503 "powerpc.tcc"
				)
				{
#line 627 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100531 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100538 "powerpc.tcc"
				>::initialize_function()
				{
#line 334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadString; }
#line 100543 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100551 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100558 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100571 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100578 "powerpc.tcc"
				>::initialize_operands()
				{
#line 936 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 100587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100595 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100599 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100603 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100607 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100610 "powerpc.tcc"
				)
				{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100623 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100627 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100631 "powerpc.tcc"
				>::memory_access_size()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100644 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100648 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100652 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100656 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100659 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 100664 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100673 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100678 "powerpc.tcc"
				> *DecodeOpLswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 100684 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100694 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100698 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100702 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100706 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100709 "powerpc.tcc"
				)
				{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = nb ? nb : 32;
						unsigned int r = rs;
						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100737 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100741 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100745 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100749 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100752 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100756 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100759 "powerpc.tcc"
				)
				{
#line 690 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswi r" << rs << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100779 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100786 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100799 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100806 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 100813 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100821 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100828 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100846 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100850 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100854 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100858 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100861 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100865 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100868 "powerpc.tcc"
				)
				{
#line 568 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 100890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100898 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100902 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100906 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100910 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100913 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100917 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100920 "powerpc.tcc"
				)
				{
#line 644 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 100935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100943 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100950 "powerpc.tcc"
				>::initialize_function()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreStringImm; }
#line 100955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100963 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100970 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100983 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100990 "powerpc.tcc"
				>::initialize_operands()
				{
#line 930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(IMM_T, nb);
					}
#line 100999 "powerpc.tcc"
				}
				//Store string
				template <
#line 38 "ppc.isa"
				class
#line 101005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101008 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101012 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101016 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101020 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101023 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101036 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101040 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101044 "powerpc.tcc"
				>::memory_access_size()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101057 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101061 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101065 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101069 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101072 "powerpc.tcc"
				)
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 101077 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101086 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101091 "powerpc.tcc"
				> *DecodeOpStswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 101097 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101107 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101111 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101115 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101119 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101122 "powerpc.tcc"
				)
				{
#line 700 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rs;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 101144 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101152 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101156 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101160 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101164 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101167 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101171 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101174 "powerpc.tcc"
				)
				{
#line 718 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101194 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101201 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101214 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101221 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 101228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101236 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101243 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101261 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101268 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101286 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101290 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101294 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101298 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101301 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101305 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101308 "powerpc.tcc"
				)
				{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 101336 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101344 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101348 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101352 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101356 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101359 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101363 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101366 "powerpc.tcc"
				)
				{
#line 656 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 101382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101390 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101397 "powerpc.tcc"
				>::initialize_function()
				{
#line 336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreString; }
#line 101402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101410 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101417 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101430 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101437 "powerpc.tcc"
				>::initialize_operands()
				{
#line 942 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 101446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101454 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101458 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101462 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101466 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101469 "powerpc.tcc"
				)
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101482 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101486 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101490 "powerpc.tcc"
				>::memory_access_size()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101503 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101507 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101511 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101515 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101518 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 101523 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101532 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101537 "powerpc.tcc"
				> *DecodeOpStswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 101543 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE MULTIPLE INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 101555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101558 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101562 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101566 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101570 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101573 "powerpc.tcc"
				)
				{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;
						for(r = rd; r < 32; r++)
						{
							cpu->Int32Load(r, ea);
							ea = ea + 4;
						}
					}
#line 101590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101598 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101602 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101606 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101610 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101613 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101617 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101620 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lmw r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101640 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101647 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101660 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101667 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101685 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101689 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101693 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101697 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101700 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101704 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101707 "powerpc.tcc"
				)
				{
#line 488 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rd;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 101729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101737 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101741 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101745 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101749 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101752 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101756 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101759 "powerpc.tcc"
				)
				{
#line 669 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rd + uop_num;
						cpu->Int32Load(r, ea);
					}
#line 101772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101780 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101787 "powerpc.tcc"
				>::initialize_function()
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadMultiple; }
#line 101792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101800 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101807 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101820 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101827 "powerpc.tcc"
				>::initialize_operands()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rd; i<32; i++)
						{ OUTPUT(GPR_T, i);
						}
					}
#line 101837 "powerpc.tcc"
				}
				//Load multiple
				template <
#line 38 "ppc.isa"
				class
#line 101843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101846 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101850 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101854 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101858 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101861 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 101866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101874 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101878 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101882 "powerpc.tcc"
				>::memory_access_size()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101887 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101896 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101901 "powerpc.tcc"
				> *DecodeOpLmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 101907 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101917 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101921 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101925 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101929 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101932 "powerpc.tcc"
				)
				{
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;

						for(r = rs; r < 32; r++)
						{
							cpu->Int32Store(r, ea);
							ea = ea + 4;
						}
					}
#line 101949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101957 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101961 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101965 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101969 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101972 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101976 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101979 "powerpc.tcc"
				)
				{
#line 770 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stmw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101999 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102006 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102019 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102026 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 102033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102041 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102048 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102058 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102066 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102070 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102074 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102078 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102081 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102085 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102088 "powerpc.tcc"
				)
				{
#line 507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rs;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;
					}
#line 102109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102117 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102121 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102125 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102129 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102132 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102136 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102139 "powerpc.tcc"
				)
				{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rs + uop_num;
						cpu->Int32Store(r, ea);
					}
#line 102151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102159 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102166 "powerpc.tcc"
				>::initialize_function()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreMultiple; }
#line 102171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102179 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102186 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 102191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102199 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102206 "powerpc.tcc"
				>::initialize_operands()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rs; i<32; i++)
						{ INPUT(GPR_T, i);
						}
					}
#line 102216 "powerpc.tcc"
				}
				//Store multiple
				template <
#line 38 "ppc.isa"
				class
#line 102222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102225 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102229 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102233 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102237 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102240 "powerpc.tcc"
				)
				{
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 102245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102253 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102257 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102261 "powerpc.tcc"
				>::memory_access_size()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 102266 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102275 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102280 "powerpc.tcc"
				> *DecodeOpStmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 102286 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************

				FLOATING POINT LOAD INSTRUCTIONS

				**********************************/
				template <
#line 38 "ppc.isa"
				class
#line 102298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102301 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102305 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102309 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102313 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102316 "powerpc.tcc"
				)
				{
#line 786 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// check if FPU is available
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 102338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102346 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102350 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102354 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102358 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102361 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102365 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102368 "powerpc.tcc"
				)
				{
#line 804 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfd f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102388 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102395 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102408 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102415 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102433 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102440 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102450 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102458 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102465 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102482 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102489 "powerpc.tcc"
				>::initialize_function()
				{
#line 338 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102502 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102509 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102522 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102529 "powerpc.tcc"
				>::initialize_operands()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102537 "powerpc.tcc"
				}
				//Load float
				template <
#line 38 "ppc.isa"
				class
#line 102543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102546 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102550 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102554 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102558 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102561 "powerpc.tcc"
				)
				{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102566 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102574 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102578 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102582 "powerpc.tcc"
				>::memory_access_size()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102587 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102596 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102601 "powerpc.tcc"
				> *DecodeOpLfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 102607 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102617 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102621 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102625 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102629 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102632 "powerpc.tcc"
				)
				{
#line 814 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 102656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102664 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102668 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102672 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102676 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102679 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102683 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102686 "powerpc.tcc"
				)
				{
#line 834 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102706 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102713 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102726 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102733 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102743 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102751 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102758 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102776 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102783 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102801 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102808 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102825 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102832 "powerpc.tcc"
				>::initialize_function()
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102845 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102852 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102857 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102865 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102872 "powerpc.tcc"
				>::initialize_operands()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102888 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102892 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102896 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102900 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102903 "powerpc.tcc"
				)
				{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102916 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102920 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102924 "powerpc.tcc"
				>::memory_access_size()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102929 "powerpc.tcc"
				}
				// Floating point LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 102935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102938 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 102942 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102946 "powerpc.tcc"
				>::is_splitted()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 102953 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102961 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 102965 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102969 "powerpc.tcc"
				>::split_into()
				{
#line 552 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfd_ctype=0;
						lfd_ctype = 50 << 26;
						lfd_ctype = lfd_ctype | (fd << 21);
						lfd_ctype = lfd_ctype | (ra << 16);
						lfd_ctype = lfd_ctype | (d & 0xffff);
						l.push_back( new OpLfd<CONFIG>(lfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 102990 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102999 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103004 "powerpc.tcc"
				> *DecodeOpLfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 103010 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103020 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103024 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103028 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103032 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103035 "powerpc.tcc"
				)
				{
#line 844 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 103058 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103066 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103070 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103074 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103078 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103081 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103085 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103088 "powerpc.tcc"
				)
				{
#line 863 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103108 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103115 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103128 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103135 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103153 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103160 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103178 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103185 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103203 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103210 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103228 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103235 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103252 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103259 "powerpc.tcc"
				>::initialize_function()
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103272 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103279 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103292 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103299 "powerpc.tcc"
				>::initialize_operands()
				{
#line 516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103316 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103320 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103324 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103328 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103331 "powerpc.tcc"
				)
				{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103336 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103344 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103348 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103352 "powerpc.tcc"
				>::memory_access_size()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103365 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 103369 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103373 "powerpc.tcc"
				>::is_splitted()
				{
#line 570 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 103380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103388 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 103392 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103396 "powerpc.tcc"
				>::split_into()
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfdx_ctype=0;
						lfdx_ctype = 50 << 26;
						lfdx_ctype = lfdx_ctype | (fd << 21);
						lfdx_ctype = lfdx_ctype | (ra << 16);
						lfdx_ctype = lfdx_ctype | (rb << 11);
						lfdx_ctype = lfdx_ctype | (599 << 1);
						l.push_back( new OpLfdx<CONFIG>(lfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 103419 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103428 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103433 "powerpc.tcc"
				> *DecodeOpLfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 103439 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103449 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103453 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103457 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103461 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103464 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 103486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103494 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103498 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103502 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103506 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103509 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103513 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103516 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103536 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103543 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103556 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103563 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103581 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103588 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103606 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103613 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103631 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103638 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103655 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103662 "powerpc.tcc"
				>::initialize_function()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103675 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103682 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103695 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103702 "powerpc.tcc"
				>::initialize_operands()
				{
#line 509 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103719 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103723 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103727 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103731 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103734 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103747 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103751 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103755 "powerpc.tcc"
				>::memory_access_size()
				{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103760 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103769 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103774 "powerpc.tcc"
				> *DecodeOpLfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 103780 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103790 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103794 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103798 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103802 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103805 "powerpc.tcc"
				)
				{
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 103827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103835 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103839 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103843 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103847 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103850 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103854 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103857 "powerpc.tcc"
				)
				{
#line 919 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfs f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103877 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103884 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103897 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103904 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103922 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103929 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103939 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103947 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103954 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103971 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103978 "powerpc.tcc"
				>::initialize_function()
				{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103991 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103998 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104011 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104018 "powerpc.tcc"
				>::initialize_operands()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104034 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104038 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104042 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104046 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104049 "powerpc.tcc"
				)
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104062 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104066 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104070 "powerpc.tcc"
				>::memory_access_size()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104075 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104083 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104087 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104091 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104096 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104105 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104110 "powerpc.tcc"
				> *DecodeOpLfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 104116 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104126 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104130 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104134 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104138 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104141 "powerpc.tcc"
				)
				{
#line 929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}
						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104173 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104177 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104181 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104185 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104188 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104192 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104195 "powerpc.tcc"
				)
				{
#line 949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104215 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104222 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104235 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104242 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104260 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104267 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104285 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104292 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104310 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104317 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104334 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104341 "powerpc.tcc"
				>::initialize_function()
				{
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104354 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104361 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104374 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104381 "powerpc.tcc"
				>::initialize_operands()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104397 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104401 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104405 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104409 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104412 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104425 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104429 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104433 "powerpc.tcc"
				>::memory_access_size()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104438 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104446 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104450 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104454 "powerpc.tcc"
				>::is_splitted()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104469 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104473 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104477 "powerpc.tcc"
				>::split_into()
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfs_ctype=0;
						lfs_ctype = 50 << 26;
						lfs_ctype = lfs_ctype | (fd << 21);
						lfs_ctype = lfs_ctype | (ra << 16);
						lfs_ctype = lfs_ctype | (d & 0xffff);
						l.push_back( new OpLfs<CONFIG>(lfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104506 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104510 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104514 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104519 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104528 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104533 "powerpc.tcc"
				> *DecodeOpLfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 104539 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104549 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104553 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104557 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104561 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104564 "powerpc.tcc"
				)
				{
#line 959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104596 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104600 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104604 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104608 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104611 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104615 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104618 "powerpc.tcc"
				)
				{
#line 979 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104638 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104645 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104650 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104658 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104665 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104675 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104683 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104690 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104708 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104715 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104733 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104740 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104758 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104765 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104782 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104789 "powerpc.tcc"
				>::initialize_function()
				{
#line 344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104794 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104802 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104809 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104822 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104826 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104830 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104834 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104837 "powerpc.tcc"
				)
				{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104850 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104854 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104858 "powerpc.tcc"
				>::memory_access_size()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104863 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104871 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104875 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104879 "powerpc.tcc"
				>::is_splitted()
				{
#line 614 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104894 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104898 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104902 "powerpc.tcc"
				>::split_into()
				{
#line 617 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfsx_ctype=0;
						lfsx_ctype = 50 << 26;
						lfsx_ctype = lfsx_ctype | (fd << 21);
						lfsx_ctype = lfsx_ctype | (ra << 16);
						lfsx_ctype = lfsx_ctype | (rb << 11);
						lfsx_ctype = lfsx_ctype | (535 << 1);
						l.push_back( new OpLfsx<CONFIG>(lfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104933 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104937 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104941 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104946 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104955 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104960 "powerpc.tcc"
				> *DecodeOpLfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 104966 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104976 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104980 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 104984 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104988 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104991 "powerpc.tcc"
				)
				{
#line 989 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 105013 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105021 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105025 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105029 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105033 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105036 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105040 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105043 "powerpc.tcc"
				)
				{
#line 1007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105063 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105070 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105075 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105083 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105090 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105108 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105115 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105125 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105133 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105140 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105150 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105158 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105165 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105174 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105182 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105189 "powerpc.tcc"
				>::initialize_function()
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 105194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105202 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105209 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105222 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105229 "powerpc.tcc"
				>::initialize_operands()
				{
#line 509 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 105238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105246 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105250 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105254 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105258 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105261 "powerpc.tcc"
				)
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 105266 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105274 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105278 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105282 "powerpc.tcc"
				>::memory_access_size()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 105287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105295 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105299 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105303 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 105308 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105317 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105322 "powerpc.tcc"
				> *DecodeOpLfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 105328 "powerpc.tcc"
					>(code, addr);
				}

				/***********************************

				FLOATING POINT STORE INSTRUCTIONS

				***********************************/
				template <
#line 38 "ppc.isa"
				class
#line 105340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105343 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105347 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105351 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105355 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105358 "powerpc.tcc"
				)
				{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 105379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105387 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105391 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105395 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105399 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105402 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105406 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105409 "powerpc.tcc"
				)
				{
#line 1040 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfd f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105429 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105436 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105449 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105456 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105463 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105471 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105478 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105496 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105503 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105521 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105528 "powerpc.tcc"
				>::initialize_function()
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105541 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105548 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105553 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105561 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105568 "powerpc.tcc"
				>::initialize_operands()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105576 "powerpc.tcc"
				}
				//Store float
				template <
#line 38 "ppc.isa"
				class
#line 105582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105585 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105589 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105593 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105597 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105600 "powerpc.tcc"
				)
				{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105613 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105617 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105621 "powerpc.tcc"
				>::memory_access_size()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105626 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105635 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105640 "powerpc.tcc"
				> *DecodeOpStfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 105646 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105656 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105660 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105664 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105668 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105671 "powerpc.tcc"
				)
				{
#line 1050 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 105695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105703 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105707 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105711 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105715 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105718 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105722 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105725 "powerpc.tcc"
				)
				{
#line 1070 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105745 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105752 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105765 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105772 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105787 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105794 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105812 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105819 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105837 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105844 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105854 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105862 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105869 "powerpc.tcc"
				>::initialize_function()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105882 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105889 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105902 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105909 "powerpc.tcc"
				>::initialize_operands()
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105925 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105929 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105933 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105937 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105940 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105953 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105957 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105961 "powerpc.tcc"
				>::memory_access_size()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105966 "powerpc.tcc"
				}
				// Floating point stores with update
				template <
#line 38 "ppc.isa"
				class
#line 105972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105975 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105979 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105983 "powerpc.tcc"
				>::is_splitted()
				{
#line 638 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 105990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105998 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106002 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 106006 "powerpc.tcc"
				>::split_into()
				{
#line 641 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfd_ctype=0;
						stfd_ctype = 54 << 26;
						stfd_ctype = stfd_ctype | (fs << 21);
						stfd_ctype = stfd_ctype | (ra << 16);
						stfd_ctype = stfd_ctype | (d & 0xffff);
						l.push_back( new OpStfd<CONFIG>(stfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106027 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106036 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106041 "powerpc.tcc"
				> *DecodeOpStfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 106047 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106057 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106061 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106065 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106069 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106072 "powerpc.tcc"
				)
				{
#line 1080 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 106096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106104 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106108 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106112 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106116 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106119 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106123 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106126 "powerpc.tcc"
				)
				{
#line 1100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106146 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106153 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106166 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106173 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106188 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106195 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106213 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106220 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106230 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106238 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106245 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106263 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106270 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106288 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106295 "powerpc.tcc"
				>::initialize_function()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106308 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106315 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106328 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106335 "powerpc.tcc"
				>::initialize_operands()
				{
#line 436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106352 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106356 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106360 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106364 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106367 "powerpc.tcc"
				)
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106380 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106384 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106388 "powerpc.tcc"
				>::memory_access_size()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106401 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 106405 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106409 "powerpc.tcc"
				>::is_splitted()
				{
#line 659 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 106416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106424 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106428 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106432 "powerpc.tcc"
				>::split_into()
				{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfdx_ctype=0;
						stfdx_ctype = 31 << 26;
						stfdx_ctype = stfdx_ctype | (fs << 21);
						stfdx_ctype = stfdx_ctype | (ra << 16);
						stfdx_ctype = stfdx_ctype | (rb << 11);
						stfdx_ctype = stfdx_ctype | (727 << 1);
						l.push_back( new OpStfdx<CONFIG>(stfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106455 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106464 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106469 "powerpc.tcc"
				> *DecodeOpStfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 106475 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106485 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106489 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106493 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106497 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106500 "powerpc.tcc"
				)
				{
#line 1110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 106520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106528 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106532 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106536 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106540 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106543 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106547 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106550 "powerpc.tcc"
				)
				{
#line 1126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106570 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106577 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106590 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106597 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106612 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106619 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106637 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106644 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106662 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106669 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106687 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106694 "powerpc.tcc"
				>::initialize_function()
				{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106707 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106714 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106727 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106734 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106743 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106751 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106755 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106759 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106763 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106766 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106779 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106783 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106787 "powerpc.tcc"
				>::memory_access_size()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106792 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106801 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106806 "powerpc.tcc"
				> *DecodeOpStfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 106812 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106822 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106826 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106830 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106834 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106837 "powerpc.tcc"
				)
				{
#line 1136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->FpStoreLSW(fs, ea);
					}
#line 106857 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106865 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106869 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106873 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106877 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106880 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106884 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106887 "powerpc.tcc"
				)
				{
#line 1152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfiwx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106899 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106907 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106914 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106919 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106927 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106934 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106949 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106956 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106974 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106981 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106999 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107006 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107024 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107031 "powerpc.tcc"
				>::initialize_function()
				{
#line 350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107044 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107051 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107064 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107071 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 107080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107088 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107092 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107096 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107100 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107103 "powerpc.tcc"
				)
				{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107108 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107116 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107120 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107124 "powerpc.tcc"
				>::memory_access_size()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107129 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107138 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107143 "powerpc.tcc"
				> *DecodeOpStfiwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 107149 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107159 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107163 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107167 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107171 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107174 "powerpc.tcc"
				)
				{
#line 1162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 107193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107201 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107205 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107209 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107213 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107216 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107220 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107223 "powerpc.tcc"
				)
				{
#line 1177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfs f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107243 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107250 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107263 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107270 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107285 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107292 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107310 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107317 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107335 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107342 "powerpc.tcc"
				>::initialize_function()
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107355 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107362 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107375 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107382 "powerpc.tcc"
				>::initialize_operands()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107398 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107402 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107406 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107410 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107413 "powerpc.tcc"
				)
				{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107426 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107430 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107434 "powerpc.tcc"
				>::memory_access_size()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107447 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107451 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107455 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107459 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107462 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107472 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107480 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107484 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107488 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107493 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107502 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107507 "powerpc.tcc"
				> *DecodeOpStfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 107513 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107523 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107527 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107531 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107535 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107538 "powerpc.tcc"
				)
				{
#line 1187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 107561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107569 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107573 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107577 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107581 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107584 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107588 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107591 "powerpc.tcc"
				)
				{
#line 1206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107603 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107611 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107618 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107631 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107638 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107653 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107660 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107678 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107685 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107703 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107710 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107728 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107735 "powerpc.tcc"
				>::initialize_function()
				{
#line 352 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107748 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107755 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107768 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107775 "powerpc.tcc"
				>::initialize_operands()
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107783 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107791 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107795 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107799 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107803 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107806 "powerpc.tcc"
				)
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107819 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107823 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107827 "powerpc.tcc"
				>::memory_access_size()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107840 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107844 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107848 "powerpc.tcc"
				>::is_splitted()
				{
#line 682 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 107855 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107863 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 107867 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107871 "powerpc.tcc"
				>::split_into()
				{
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfs_ctype=0;
						stfs_ctype = 52 << 26;
						stfs_ctype = stfs_ctype | (fs << 21);
						stfs_ctype = stfs_ctype | (ra << 16);
						stfs_ctype = stfs_ctype | (d & 0xffff);
						l.push_back( new OpStfs<CONFIG>(stfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 107892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107900 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107904 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107908 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107912 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107915 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107933 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107937 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107941 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 764 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107946 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107955 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107960 "powerpc.tcc"
				> *DecodeOpStfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 107966 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107976 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107980 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 107984 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107988 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107991 "powerpc.tcc"
				)
				{
#line 1216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 108014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108022 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108026 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108030 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108034 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108037 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108041 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108044 "powerpc.tcc"
				)
				{
#line 1235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108064 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108071 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108084 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108091 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108098 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108106 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108113 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108131 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108138 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108156 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108163 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108181 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108188 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108198 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108206 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108213 "powerpc.tcc"
				>::initialize_function()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108226 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108233 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108246 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108253 "powerpc.tcc"
				>::initialize_operands()
				{
#line 436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108270 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108274 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108278 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108282 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108285 "powerpc.tcc"
				)
				{
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108290 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108298 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108302 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108306 "powerpc.tcc"
				>::memory_access_size()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108319 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108323 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108327 "powerpc.tcc"
				>::is_splitted()
				{
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 108334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108342 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 108346 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108350 "powerpc.tcc"
				>::split_into()
				{
#line 706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfsx_ctype=0;
						stfsx_ctype = 31 << 26;
						stfsx_ctype = stfsx_ctype | (fs << 21);
						stfsx_ctype = stfsx_ctype | (ra << 16);
						stfsx_ctype = stfsx_ctype | (rb << 11);
						stfsx_ctype = stfsx_ctype | (663 << 1);
						l.push_back( new OpStfsx<CONFIG>(stfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 108373 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108381 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108385 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108389 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108393 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108396 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108406 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108411 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108414 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108418 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108422 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108427 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108436 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108441 "powerpc.tcc"
				> *DecodeOpStfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 108447 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108457 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108461 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108465 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108469 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108472 "powerpc.tcc"
				)
				{
#line 1245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 108492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108500 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108504 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108508 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108512 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108515 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108519 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108522 "powerpc.tcc"
				)
				{
#line 1261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108542 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108549 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108562 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108569 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108584 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108591 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108609 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108616 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108634 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108641 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108651 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108659 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108666 "powerpc.tcc"
				>::initialize_function()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108679 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108686 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108691 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108699 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108706 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108723 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108727 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108731 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108735 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108738 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108743 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108751 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108755 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108759 "powerpc.tcc"
				>::memory_access_size()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108764 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108772 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108776 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108780 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108784 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108787 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108805 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108809 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108813 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108818 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108827 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108832 "powerpc.tcc"
				> *DecodeOpStfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 108838 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************

				CACHE MANAGEMENT INSTRUCTIONS

				*********************************/
				template <
#line 38 "ppc.isa"
				class
#line 108850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108853 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108857 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108861 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108865 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108868 "powerpc.tcc"
				)
				{
#line 1277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcba(ea);
					}
#line 108877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108885 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108889 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108893 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108897 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108900 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108904 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108907 "powerpc.tcc"
				)
				{
#line 1282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcba r" << ra << ", r" << rb;
					}
#line 108914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108922 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108929 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108942 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108949 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108964 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108971 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108981 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108989 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108996 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109006 "powerpc.tcc"
				}
				/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 109012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109015 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109022 "powerpc.tcc"
				>::initialize_function()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBA; }
#line 109027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109035 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109042 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109055 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109062 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109070 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109075 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109078 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109082 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109086 "powerpc.tcc"
				>::memory_access_size()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109091 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109100 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109105 "powerpc.tcc"
				> *DecodeOpDcba(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 109111 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109121 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109125 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109129 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109133 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109136 "powerpc.tcc"
				)
				{
#line 1288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbf(ea);
					}
#line 109145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109153 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109157 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109161 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109165 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109168 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109172 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109175 "powerpc.tcc"
				)
				{
#line 1293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbf r" << ra << ", r" << rb;
					}
#line 109182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109190 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109197 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109210 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109217 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109232 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109239 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109257 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109264 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109282 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109289 "powerpc.tcc"
				>::initialize_function()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBF; }
#line 109294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109302 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109309 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(8); }
#line 109314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109322 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109329 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109345 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109349 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109353 "powerpc.tcc"
				>::memory_access_size()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109358 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109367 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109372 "powerpc.tcc"
				> *DecodeOpDcbf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 109378 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109388 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109392 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109396 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109400 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109403 "powerpc.tcc"
				)
				{
#line 1298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						cpu->Dcbi(ea);
					}
#line 109411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109419 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109423 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109427 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109431 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109434 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109438 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109441 "powerpc.tcc"
				)
				{
#line 1302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbi r" << ra << ", r" << rb;
					}
#line 109448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109456 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109463 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109476 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109483 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109501 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109508 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109518 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109526 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109533 "powerpc.tcc"
				>::initialize_function()
				{
#line 292 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBI; }
#line 109538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109546 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109553 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(6); }
#line 109558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109566 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109573 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109589 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109593 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109597 "powerpc.tcc"
				>::memory_access_size()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109602 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109611 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109616 "powerpc.tcc"
				> *DecodeOpDcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 109622 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109632 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109636 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109640 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109644 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109647 "powerpc.tcc"
				)
				{
#line 1307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbst(ea);
					}
#line 109656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109664 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109668 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109672 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109676 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109679 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109683 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109686 "powerpc.tcc"
				)
				{
#line 1312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbst r" << ra << ", r" << rb;
					}
#line 109693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109701 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109708 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109721 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109728 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109743 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109750 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109768 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109775 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109793 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109800 "powerpc.tcc"
				>::initialize_function()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 109805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109813 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109820 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109833 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109840 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109856 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109860 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109864 "powerpc.tcc"
				>::memory_access_size()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109869 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109878 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109883 "powerpc.tcc"
				> *DecodeOpDcbst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 109889 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109899 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109903 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109907 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109911 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109914 "powerpc.tcc"
				)
				{
#line 1317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 109921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109929 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109933 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109937 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109941 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109944 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109948 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109951 "powerpc.tcc"
				)
				{
#line 1320 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbt r" << ra << ", r" << rb;
					}
#line 109958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109966 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109973 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109986 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109993 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110011 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110018 "powerpc.tcc"
				>::initialize_function()
				{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110023 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110031 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110038 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110043 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110051 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110058 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110066 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110074 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110078 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110082 "powerpc.tcc"
				>::memory_access_size()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110087 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110096 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110101 "powerpc.tcc"
				> *DecodeOpDcbt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 110107 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110117 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110121 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110125 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110129 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110132 "powerpc.tcc"
				)
				{
#line 1325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 110139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110147 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110151 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110155 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110159 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110162 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110166 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110169 "powerpc.tcc"
				)
				{
#line 1328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbtst r" << ra << ", r" << rb;
					}
#line 110176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110184 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110191 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110204 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110211 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110229 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110236 "powerpc.tcc"
				>::initialize_function()
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110241 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110249 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110256 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110269 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110276 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110292 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110296 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110300 "powerpc.tcc"
				>::memory_access_size()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110305 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110314 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110319 "powerpc.tcc"
				> *DecodeOpDcbtst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 110325 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110335 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110339 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110343 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110347 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110350 "powerpc.tcc"
				)
				{
#line 1333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbz(ea);
					}
#line 110360 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110368 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110372 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110376 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110380 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110383 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110387 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110390 "powerpc.tcc"
				)
				{
#line 1339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbz r" << ra << ", r" << rb;
					}
#line 110397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110405 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110412 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110425 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110432 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110447 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110454 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110464 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110472 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110479 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110489 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110497 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110504 "powerpc.tcc"
				>::initialize_function()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110509 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110517 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110524 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 236 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110529 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110537 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110544 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110560 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110564 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110568 "powerpc.tcc"
				>::memory_access_size()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110573 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110582 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110587 "powerpc.tcc"
				> *DecodeOpDcbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 110593 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110603 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110607 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110611 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110615 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110618 "powerpc.tcc"
				)
				{
#line 1344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Icbi(ea);
					}
#line 110627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110635 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110639 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110643 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110647 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110650 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110654 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110657 "powerpc.tcc"
				)
				{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "icbi r" << ra << ", r" << rb;
					}
#line 110664 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110672 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110679 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110692 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110699 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110714 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110721 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110739 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110746 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110756 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110764 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110771 "powerpc.tcc"
				>::initialize_function()
				{
#line 299 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110776 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110784 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110791 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110804 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110811 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110827 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110831 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110835 "powerpc.tcc"
				>::memory_access_size()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110840 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110849 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110854 "powerpc.tcc"
				> *DecodeOpIcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 110860 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************************

				LOOKASIDE BUFFER MANAGEMENT INSTRUCTIONS

				*********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 110872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110875 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110879 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110883 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110887 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110890 "powerpc.tcc"
				)
				{
#line 1360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							throw IllegalInstructionException<CONFIG>();
						}
						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						cpu->Tlbia();
					}
#line 110906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110914 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110918 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110922 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110926 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110929 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110933 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110936 "powerpc.tcc"
				)
				{
#line 1372 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbia"; }
#line 110941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110949 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110956 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110969 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110976 "powerpc.tcc"
				>::initialize_function()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 110981 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110989 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110996 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111009 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111016 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111036 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111040 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111044 "powerpc.tcc"
				>::memory_access_size()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111049 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111058 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111063 "powerpc.tcc"
				> *DecodeOpTlbia(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 111069 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111079 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111083 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111087 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111091 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111094 "powerpc.tcc"
				)
				{
#line 1375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbie(ea);
					}
#line 111107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111115 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111119 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111123 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111127 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111130 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111134 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111137 "powerpc.tcc"
				)
				{
#line 1384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbie r" << rb;
					}
#line 111144 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111152 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111159 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111172 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111179 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111194 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111201 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111219 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111226 "powerpc.tcc"
				>::initialize_function()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111239 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111246 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111259 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111266 "powerpc.tcc"
				>::initialize_operands()
				{
#line 865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rb);
					}
#line 111273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111281 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111285 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111289 "powerpc.tcc"
				>::memory_access_size()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111308 "powerpc.tcc"
				> *DecodeOpTlbie(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 111314 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111324 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111328 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111332 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111336 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111339 "powerpc.tcc"
				)
				{
#line 1389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* nothing to do */ }
#line 111344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111352 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111356 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111360 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111364 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111367 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111371 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111374 "powerpc.tcc"
				)
				{
#line 1390 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbsync"; }
#line 111379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111387 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111394 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111399 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111407 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111414 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111429 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111436 "powerpc.tcc"
				>::initialize_function()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111449 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111456 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111469 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111476 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111496 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111500 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111504 "powerpc.tcc"
				>::memory_access_size()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111509 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111518 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111523 "powerpc.tcc"
				> *DecodeOpTlbsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 111529 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111539 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111543 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111547 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111551 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111554 "powerpc.tcc"
				)
				{
#line 1393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!CPU<CONFIG>::IsMPC7X5() && !CPU<CONFIG>::IsMPC7XXX())
						{
							throw IllegalInstructionException<CONFIG>();
						}

						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbld(ea);
					}
#line 111572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111580 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111584 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111588 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111592 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111595 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111599 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111602 "powerpc.tcc"
				)
				{
#line 1407 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbld r" << rb;
					}
#line 111609 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111617 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111624 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111637 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111644 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111651 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111659 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111666 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111676 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111685 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111690 "powerpc.tcc"
				> *DecodeOpTlbld(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 111696 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111706 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111710 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111714 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111718 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111721 "powerpc.tcc"
				)
				{
#line 1412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!CPU<CONFIG>::IsMPC7X5() && !CPU<CONFIG>::IsMPC7XXX())
						{
							throw IllegalInstructionException<CONFIG>();
						}

						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbli(ea);
					}
#line 111739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111747 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111751 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111755 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111759 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111762 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111766 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111769 "powerpc.tcc"
				)
				{
#line 1426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbli r" << rb;
					}
#line 111776 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111784 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111791 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111804 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111811 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111826 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111833 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111843 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111852 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111857 "powerpc.tcc"
				> *DecodeOpTlbli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 111863 "powerpc.tcc"
					>(code, addr);
				}

				/********************************

				EXTERNAL CONTROL INSTRUCTIONS

				********************************/
				template <
#line 38 "ppc.isa"
				class
#line 111875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111878 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111882 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111886 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111890 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111893 "powerpc.tcc"
				)
				{
#line 1437 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 111900 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111908 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111912 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111916 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111920 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111923 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111927 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111930 "powerpc.tcc"
				)
				{
#line 1440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "eciwx r" << rd << ", r" << ra << ", r" << rb;
					}
#line 111937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111945 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111952 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111957 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111965 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111972 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111990 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111997 "powerpc.tcc"
				>::initialize_function()
				{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 112002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112010 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112017 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112022 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112032 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112039 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112048 "powerpc.tcc"
				}
				//Load & Load byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112057 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112061 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112065 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112069 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112072 "powerpc.tcc"
				)
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 112077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112085 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112089 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112093 "powerpc.tcc"
				>::memory_access_size()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112098 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112107 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112112 "powerpc.tcc"
				> *DecodeOpEciwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 112118 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112128 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112132 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112136 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112140 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112143 "powerpc.tcc"
				)
				{
#line 1445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 112150 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112158 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112162 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112166 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112170 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112173 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112177 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112180 "powerpc.tcc"
				)
				{
#line 1448 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "ecowx r" << rs << ", r" << ra << ", r" << rb;
					}
#line 112187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112195 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112202 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112215 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112222 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112240 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112247 "powerpc.tcc"
				>::initialize_function()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 112252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112260 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112267 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112272 "powerpc.tcc"
				}
				//Store & Store byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112281 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112285 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112289 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112293 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112296 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 112301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112309 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112313 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112317 "powerpc.tcc"
				>::memory_access_size()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112322 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112328 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112331 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112336 "powerpc.tcc"
				> *DecodeOpEcowx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 112342 "powerpc.tcc"
					>(code, addr);
				}

				/***************************************

				MEMORY SYNCHRONIZATION INSTRUCTIONS

				***************************************/
				template <
#line 38 "ppc.isa"
				class
#line 112354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112357 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112361 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112365 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112369 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112372 "powerpc.tcc"
				)
				{
#line 1459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* order is always enforced in functional simulation */ }
#line 112377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112385 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112389 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112393 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112397 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112400 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112404 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112407 "powerpc.tcc"
				)
				{
#line 1460 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "eieio"; }
#line 112412 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112420 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112427 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112440 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112447 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 112454 "powerpc.tcc"
				}
				/** System Register (FnSysRegister | FnSysRegisterSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 112460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112463 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112470 "powerpc.tcc"
				>::initialize_function()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 112475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112483 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112490 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112503 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112510 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112530 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112534 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112538 "powerpc.tcc"
				>::memory_access_size()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112543 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112552 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112557 "powerpc.tcc"
				> *DecodeOpEieio(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 112563 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112573 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112577 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112581 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112585 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112588 "powerpc.tcc"
				)
				{
#line 1463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* order is always enforced in functional simulation */
						/* but we still must flush subsequent instruction in the prefetch buffer, forcing refetch */
						cpu->FlushSubsequentInstructions();
					}
#line 112597 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112605 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112609 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112613 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112617 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112620 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112624 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112627 "powerpc.tcc"
				)
				{
#line 1468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "isync"; }
#line 112632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112640 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112647 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 275 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::REFETCH_SERIALIZATION;
					}
#line 112654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112662 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112669 "powerpc.tcc"
				>::initialize_function()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 112674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112682 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112689 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 244 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112702 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112709 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112729 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112733 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112737 "powerpc.tcc"
				>::memory_access_size()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112742 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112751 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112756 "powerpc.tcc"
				> *DecodeOpIsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 112762 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112772 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112776 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112780 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112784 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112787 "powerpc.tcc"
				)
				{
#line 1471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Lwarx(rd, ea);
					}
#line 112796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112804 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112808 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112812 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112816 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112819 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112823 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112826 "powerpc.tcc"
				)
				{
#line 1476 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwarx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 112838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112846 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112853 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112858 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112866 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112873 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 112880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112888 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112895 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112913 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112920 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112938 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112945 "powerpc.tcc"
				>::initialize_function()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 112950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112958 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112965 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 112970 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112980 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112987 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113004 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113008 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 113012 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 113016 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 113019 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 113024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113032 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113036 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 113040 "powerpc.tcc"
				>::memory_access_size()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113045 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113054 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113059 "powerpc.tcc"
				> *DecodeOpLwarx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 113065 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113075 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113079 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113083 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113087 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113090 "powerpc.tcc"
				)
				{
#line 1486 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Stwcx(rs, ea);
					}
#line 113099 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113107 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113111 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113115 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113119 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113122 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113126 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113129 "powerpc.tcc"
				)
				{
#line 1492 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwcx. r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 113141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113149 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113156 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113161 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113169 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113176 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 113183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113191 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113198 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113216 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113223 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113233 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113241 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113248 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113258 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113266 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113273 "powerpc.tcc"
				>::initialize_function()
				{
#line 356 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreSerial; }
#line 113278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113286 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113293 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 246 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(16); }
#line 113298 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113306 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113313 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 113322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113330 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113334 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113338 "powerpc.tcc"
				>::memory_access_size()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113343 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113352 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113357 "powerpc.tcc"
				> *DecodeOpStwcx_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 113363 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113373 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113377 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113381 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113385 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113388 "powerpc.tcc"
				)
				{
#line 1502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ cpu->Synchronize(); }
#line 113393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113401 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113405 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113409 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113413 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113416 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113420 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113423 "powerpc.tcc"
				)
				{
#line 1503 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "sync"; }
#line 113428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113436 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113443 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113456 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113463 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::STORE_SERIALIZATION);
					}
#line 113470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113478 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113485 "powerpc.tcc"
				>::initialize_function()
				{
#line 174 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 113490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113498 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113505 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 113510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113518 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113525 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113537 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113545 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113549 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113553 "powerpc.tcc"
				>::memory_access_size()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113558 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113567 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113572 "powerpc.tcc"
				> *DecodeOpSync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSync<
#line 38 "ppc.isa"
					CONFIG
#line 113578 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/*************************************

				SYSTEM LINKAGE INSTRUCTIONS

				*************************************/
				template <
#line 38 "ppc.isa"
				class
#line 113623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113626 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113630 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113634 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113638 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113641 "powerpc.tcc"
				)
				{
#line 42 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						throw SystemCallException<CONFIG>();
					}
#line 113649 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113657 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113661 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113665 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113669 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113672 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113676 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113679 "powerpc.tcc"
				)
				{
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "sc";
					}
#line 113686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113694 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113701 "powerpc.tcc"
				>::initialize_function()
				{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 113706 "powerpc.tcc"
				}
				/** Misc **/
				template <
#line 38 "ppc.isa"
				class
#line 113712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113715 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113722 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 250 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113735 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113742 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113754 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113763 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113768 "powerpc.tcc"
				> *DecodeOpSc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSc<
#line 38 "ppc.isa"
					CONFIG
#line 113774 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113784 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113788 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113792 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113796 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113799 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetNIA(cpu->GetSRR0() & 0xfffffffcUL);
						cpu->SetMSR((msr & 0xffff008cUL) | (cpu->GetSRR1() & 0x0000ff73UL));
					}
#line 113811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113819 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113823 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113827 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113831 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113834 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113838 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113841 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "rfi" << endl;
					}
#line 113848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113856 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113863 "powerpc.tcc"
				>::initialize_function()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 113868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113876 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113883 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113896 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113903 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113915 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113924 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113929 "powerpc.tcc"
				> *DecodeOpRfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 113935 "powerpc.tcc"
					>(code, addr);
				}

				/***************************

				TRAP INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 113947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113950 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113954 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113958 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113962 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113965 "powerpc.tcc"
				)
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a, b;
						int trap;
						a = cpu->GetGPR(ra);
						b = cpu->GetGPR(rb);
						trap = 0;
						if(a < b && (to & 16)) trap = 1;
						if(a > b && (to & 8)) trap = 1;
						if(a == b && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) b && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) b && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 113982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113990 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113994 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113998 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114002 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114005 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114009 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114012 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "tw " << to << ", r" << ra << ", r" << rb;
					}
#line 114019 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114027 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114034 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114039 "powerpc.tcc"
				}
				/*
				tw.initialize_function =      { Operation<CONFIG>::function = FnIntBasicSerial; }
				twi.initialize_function =     { Operation<CONFIG>::function = FnIntBasicSerial; }
				*/
				template <
#line 38 "ppc.isa"
				class
#line 114048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114051 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114058 "powerpc.tcc"
				>::initialize_function()
				{
#line 248 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114071 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114078 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114091 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114098 "powerpc.tcc"
				>::initialize_operands()
				{
#line 378 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 114106 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114115 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114120 "powerpc.tcc"
				> *DecodeOpTw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTw<
#line 38 "ppc.isa"
					CONFIG
#line 114126 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114136 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114140 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114144 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114148 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114151 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a;
						int trap;
						a = (int32_t) cpu->GetGPR(ra);
						trap = 0;
						if(a < simm && (to & 16)) trap = 1;
						if(a > simm && (to & 8)) trap = 1;
						if(a == simm && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) simm && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) simm && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 114167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114175 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114179 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114183 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114187 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114190 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114194 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114197 "powerpc.tcc"
				)
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "twi " << to << ", r" << ra << ", " << simm;
					}
#line 114204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114212 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114219 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114232 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114239 "powerpc.tcc"
				>::initialize_function()
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114252 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114259 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114272 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114279 "powerpc.tcc"
				>::initialize_operands()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
					}
#line 114286 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114295 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114300 "powerpc.tcc"
				> *DecodeOpTwi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 114306 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************

				PROCESSOR CONTROL INSTRUCTIONS

				******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 114318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114321 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114325 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114329 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114333 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114336 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read XER
						uint32_t xer = cpu->GetXER();

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR[crfD]: CR[crfD]=XER[0-3]
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | ((xer & 0xf0000000UL) >> (4 * crfD));

						// Reset XER[0-3]
						xer = xer & 0x0fffffffUL;

						// Update CR
						cpu->SetCR(cr);

						// Update XER
						cpu->SetXER(xer);
					}
#line 114359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114371 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114389 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mcrxr cr" << crfD;
					}
#line 114396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114404 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114411 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114424 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114431 "powerpc.tcc"
				>::initialize_function()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114444 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114451 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114456 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114464 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114471 "powerpc.tcc"
				>::initialize_operands()
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(XER_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 114480 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114489 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114494 "powerpc.tcc"
				> *DecodeOpMcrxr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 114500 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114510 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114514 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114518 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114522 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114525 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Move CR to destination GPR
						cpu->SetGPR(rd, cpu->GetCR());
					}
#line 114533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114541 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114545 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114549 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114553 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114556 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114560 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114563 "powerpc.tcc"
				)
				{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfcr r" << rd;
					}
#line 114570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114578 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114585 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114598 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114605 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 114612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114620 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114627 "powerpc.tcc"
				>::initialize_function()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114640 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114647 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114660 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114667 "powerpc.tcc"
				>::initialize_operands()
				{
#line 620 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);
						OUTPUT(GPR_T, rd);
					}
#line 114682 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114691 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114696 "powerpc.tcc"
				> *DecodeOpMfcr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 114702 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114712 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114716 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114720 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114724 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114727 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						// Move MSR to destination GPR
						cpu->SetGPR(rd, msr);
					}
#line 114738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114746 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114750 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114754 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114758 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114761 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114765 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114768 "powerpc.tcc"
				)
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfmsr r" << rd;
					}
#line 114775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114783 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114790 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114803 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114810 "powerpc.tcc"
				>::initialize_function()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 114815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114823 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114830 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114835 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114843 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114850 "powerpc.tcc"
				>::initialize_operands()
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 114857 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114866 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114871 "powerpc.tcc"
				> *DecodeOpMfmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 114877 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114887 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114891 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114895 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114899 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114902 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetSPR(n);
						cpu->SetGPR(rd, result);
					}
#line 114911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114919 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114923 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114927 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114931 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114934 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114938 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114941 "powerpc.tcc"
				)
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mfxer r" << rd;
							case 8: os << "mflr r" << rd; return;
							case 9: os << "mfctr r" << rd; return;
							case 22: os << "mfdec r" << rd; return;
							case 528: os << "mfibatu r" << rd << ", 0"; return;
							case 529: os << "mfibatl r" << rd << ", 0"; return;
							case 530: os << "mfibatu r" << rd << ", 1"; return;
							case 531: os << "mfibatl r" << rd << ", 1"; return;
							case 532: os << "mfibatu r" << rd << ", 2"; return;
							case 533: os << "mfibatl r" << rd << ", 2"; return;
							case 534: os << "mfibatu r" << rd << ", 3"; return;
							case 535: os << "mfibatl r" << rd << ", 3"; return;
							case 536: os << "mfdbatu r" << rd << ", 0"; return;
							case 537: os << "mfdbatl r" << rd << ", 0"; return;
							case 538: os << "mfdbatu r" << rd << ", 1"; return;
							case 539: os << "mfdbatl r" << rd << ", 1"; return;
							case 540: os << "mfdbatu r" << rd << ", 2"; return;
							case 541: os << "mfdbatl r" << rd << ", 2"; return;
							case 542: os << "mfdbatu r" << rd << ", 3"; return;
							case 543: os << "mfdbatl r" << rd << ", 3"; return;
						}

						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							switch(n)
							{
								case 560: os << "mfibatu r" << rd << ", 4"; return;
								case 561: os << "mfibatl r" << rd << ", 4"; return;
								case 562: os << "mfibatu r" << rd << ", 5"; return;
								case 563: os << "mfibatl r" << rd << ", 5"; return;
								case 564: os << "mfibatu r" << rd << ", 6"; return;
								case 565: os << "mfibatl r" << rd << ", 6"; return;
								case 566: os << "mfibatu r" << rd << ", 7"; return;
								case 567: os << "mfibatl r" << rd << ", 7"; return;
								case 568: os << "mfdbatu r" << rd << ", 4"; return;
								case 569: os << "mfdbatl r" << rd << ", 4"; return;
								case 570: os << "mfdbatu r" << rd << ", 5"; return;
								case 571: os << "mfdbatl r" << rd << ", 5"; return;
								case 572: os << "mfdbatu r" << rd << ", 6"; return;
								case 573: os << "mfdbatl r" << rd << ", 6"; return;
								case 574: os << "mfdbatu r" << rd << ", 7"; return;
								case 575: os << "mfdbatl r" << rd << ", 7"; return;
							}
						}

						os << "mfspr r" << rd << ", " << n;
					}
#line 114996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115004 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115011 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115024 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115031 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 528: // IBAT0U
							case 529: // IBAT0L
							case 530: // IBAT1U
							case 531: // IBAT1L
							case 532: // IBAT2U
							case 533: // IBAT2L
							case 534: // IBAT3U
							case 535: // IBAT3L
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
						}

						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							switch(n)
							{
								case 560: // IBAT4U
								case 561: // IBAT4L
								case 562: // IBAT5U
								case 563: // IBAT5L
								case 564: // IBAT6U
								case 565: // IBAT6L
								case 566: // IBAT7U
								case 567: // IBAT7L
								Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
								return;
							}
						}

						if(CPU<CONFIG>::IsMPC7XXX())
						{
							switch(n)
							{
								case 256: // VRSAVE
								Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
								return;
							}
						}

						// mtspr (DBAT, MSS, Time Base, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115089 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115096 "powerpc.tcc"
				>::initialize_function()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115101 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115109 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115116 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 115121 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115129 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115136 "powerpc.tcc"
				>::initialize_operands()
				{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							INPUT(XER_T,0);
							INPUT(XER_T,1);
							INPUT(XER_T,2);
							INPUT(XER_T,3);
							break;
						case 8:
							INPUT(LR_T,0);
							break;
						case 9:
							INPUT(CTR_T,0);
							/*
							INPUT(CR_T,1);
							INPUT(CR_T,2);
							INPUT(CR_T,3);
							INPUT(CR_T,4);
							INPUT(CR_T,5);
							INPUT(CR_T,6);
							INPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
						OUTPUT(GPR_T, rd);
					}
#line 115170 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115179 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115184 "powerpc.tcc"
				> *DecodeOpMfspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 115190 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115200 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115204 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115208 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115212 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115215 "powerpc.tcc"
				)
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetGPR(rs);
						cpu->SetSPR(n, result);
					}
#line 115224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115232 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115236 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115240 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115244 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115247 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115251 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115254 "powerpc.tcc"
				)
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mtxer r" << rs; return;
							case 8: os << "mtlr r" << rs; return;
							case 9: os << "mtctr r" << rs; return;
							case 22: os << "mtdec r" << rs; return;
							case 528: os << "mtibatu 0, r" << rs; return;
							case 529: os << "mtibatl 0, r" << rs; return;
							case 530: os << "mtibatu 1, r" << rs; return;
							case 531: os << "mtibatl 1, r" << rs; return;
							case 532: os << "mtibatu 2, r" << rs; return;
							case 533: os << "mtibatl 2, r" << rs; return;
							case 534: os << "mtibatu 3, r" << rs; return;
							case 535: os << "mtibatl 3, r" << rs; return;
							case 536: os << "mtdbatu 0, r" << rs; return;
							case 537: os << "mtdbatl 0, r" << rs; return;
							case 538: os << "mtdbatu 1, r" << rs; return;
							case 539: os << "mtdbatl 1, r" << rs; return;
							case 540: os << "mtdbatu 2, r" << rs; return;
							case 541: os << "mtdbatl 2, r" << rs; return;
							case 542: os << "mtdbatu 3, r" << rs; return;
							case 543: os << "mtdbatl 3, r" << rs; return;
						}

						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							switch(n)
							{
								case 560: os << "mtibatu 4, r" << rs; return;
								case 561: os << "mtibatl 4, r" << rs; return;
								case 562: os << "mtibatu 5, r" << rs; return;
								case 563: os << "mtibatl 5, r" << rs; return;
								case 564: os << "mtibatu 6, r" << rs; return;
								case 565: os << "mtibatl 6, r" << rs; return;
								case 566: os << "mtibatu 7, r" << rs; return;
								case 567: os << "mtibatl 7, r" << rs; return;
								case 568: os << "mtdbatu 4, r" << rs; return;
								case 569: os << "mtdbatl 4, r" << rs; return;
								case 570: os << "mtdbatu 5, r" << rs; return;
								case 571: os << "mtdbatl 5, r" << rs; return;
								case 572: os << "mtdbatu 6, r" << rs; return;
								case 573: os << "mtdbatl 6, r" << rs; return;
								case 574: os << "mtdbatu 7, r" << rs; return;
								case 575: os << "mtdbatl 7, r" << rs; return;
							}
						}

						os << "mtspr " << n << ", r" << rs;
					}
#line 115309 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115317 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115324 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115329 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115337 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115344 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: // XER
							Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::REFETCH_SERIALIZATION);
							return;
						}
						// mtspr (DBATs, IBATs, MSS, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115367 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115374 "powerpc.tcc"
				>::initialize_function()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnSysRegisterSerial;
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						//	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
					}
#line 115383 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115391 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115398 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 115403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115411 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115418 "powerpc.tcc"
				>::initialize_operands()
				{
#line 702 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							OUTPUT(XER_T,0);
							OUTPUT(XER_T,1);
							OUTPUT(XER_T,2);
							OUTPUT(XER_T,3);
							break;
						case 8:
							OUTPUT(LR_T,0);
							break;
						case 9:
							OUTPUT(CTR_T,0);
							/*
							OUTPUT(CR_T,1);
							OUTPUT(CR_T,2);
							OUTPUT(CR_T,3);
							OUTPUT(CR_T,4);
							OUTPUT(CR_T,5);
							OUTPUT(CR_T,6);
							OUTPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
					}
#line 115452 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115461 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115466 "powerpc.tcc"
				> *DecodeOpMtspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 115472 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115482 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115486 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115490 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115494 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115497 "powerpc.tcc"
				)
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t d;
						d = ((tbr & 0x1F) << 5) + ((tbr >> 5) & 0x1F);
						switch(d)
						{
							case 268: cpu->SetGPR(rd, cpu->GetTBL()); break;
							case 269: cpu->SetGPR(rd, cpu->GetTBU()); break;
						default:
							/* illegal instruction */
							throw IllegalInstructionException<CONFIG>();
						}
					}
#line 115513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115521 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115525 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115529 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115533 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115536 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115540 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115543 "powerpc.tcc"
				)
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mftb r" << rd << ", " << tbr;
					}
#line 115550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115558 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115565 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115578 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115585 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115600 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115607 "powerpc.tcc"
				>::initialize_function()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 115612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115620 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115627 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 258 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115640 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115647 "powerpc.tcc"
				>::initialize_operands()
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 115654 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115663 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115668 "powerpc.tcc"
				> *DecodeOpMftb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 115674 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115684 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115688 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115692 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115696 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115699 "powerpc.tcc"
				)
				{
#line 288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t cr = cpu->GetCR();

						// Generate a bit mask of bits to move from source GPR to CR
						uint32_t m = 128;
						uint32_t mask = 0;
						unsigned int i = 8; // Hope compiler will unroll the loop !
						do
						{
							mask = (crm & m) ? (mask << 4) | 0xf : mask << 4;
						} while(m >>= 1, --i);

						// Apply the bit mask
						cr = (cr & ~mask) | (s & mask);

						// Update CR
						cpu->SetCR(cr);
					}
#line 115723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115731 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115735 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115739 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115743 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115746 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115750 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115753 "powerpc.tcc"
				)
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(crm == 0xff)
						os << "mtcr r" << rs;
						else
						os << "mtcrf " << crm << ", r" << rs;
					}
#line 115763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115771 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115778 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115783 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115791 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115798 "powerpc.tcc"
				>::initialize_function()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 115803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115811 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115818 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115831 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115838 "powerpc.tcc"
				>::initialize_operands()
				{
#line 680 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 115862 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115871 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115876 "powerpc.tcc"
				> *DecodeOpMtcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 115882 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115892 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115896 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115900 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115904 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115907 "powerpc.tcc"
				)
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetMSR(cpu->GetGPR(rs));
					}
#line 115917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115925 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115929 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115933 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115937 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115940 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115944 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115947 "powerpc.tcc"
				)
				{
#line 322 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtmsr r" << rs;
					}
#line 115954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115962 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115969 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115982 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115989 "powerpc.tcc"
				>::initialize_function()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115994 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116002 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 116009 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 116014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116022 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 116029 "powerpc.tcc"
				>::initialize_operands()
				{
#line 675 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
					}
#line 116036 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116045 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116050 "powerpc.tcc"
				> *DecodeOpMtmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 116056 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************************

				SEGMENT REGISTER MANIPULATION INSTRUCTIONS

				**********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 116068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116071 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116075 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116079 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116083 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116086 "powerpc.tcc"
				)
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR(sr));
					}
#line 116096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116104 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116108 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116112 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116116 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116119 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116123 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116126 "powerpc.tcc"
				)
				{
#line 338 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsr r" << rd << ", " << sr;
					}
#line 116133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116141 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116148 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116161 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116168 "powerpc.tcc"
				>::initialize_function()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 116173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116181 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116188 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116201 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116208 "powerpc.tcc"
				>::initialize_operands()
				{
#line 740 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(SR_T, sr);
					}
#line 116216 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116225 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116230 "powerpc.tcc"
				> *DecodeOpMfsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 116236 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116246 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116250 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116254 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116258 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116261 "powerpc.tcc"
				)
				{
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR((cpu->GetGPR(rb) >> 28) & 0xf));
					}
#line 116271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116279 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116283 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116287 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116291 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116294 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116298 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116301 "powerpc.tcc"
				)
				{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsrin r" << rd << ", r" << rb;
					}
#line 116308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116316 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116323 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116336 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116343 "powerpc.tcc"
				>::initialize_function()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116356 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116363 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116376 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116383 "powerpc.tcc"
				>::initialize_operands()
				{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, rb);
					}
#line 116391 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116400 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116405 "powerpc.tcc"
				> *DecodeOpMfsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116411 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116421 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116425 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116429 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116433 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116436 "powerpc.tcc"
				)
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR(sr, cpu->GetGPR(rs));
					}
#line 116446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116454 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116458 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116462 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116466 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116469 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116473 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116476 "powerpc.tcc"
				)
				{
#line 360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsr " << sr << ", r" << rs;
					}
#line 116483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116491 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116498 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116511 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116518 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116533 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116540 "powerpc.tcc"
				>::initialize_function()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116553 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116560 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116573 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116580 "powerpc.tcc"
				>::initialize_operands()
				{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(SR_T, sr);
					}
#line 116588 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116597 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116602 "powerpc.tcc"
				> *DecodeOpMtsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 116608 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116618 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116622 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116626 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116630 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116633 "powerpc.tcc"
				)
				{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR((cpu->GetGPR(rb) >> 28) & 0xf, cpu->GetGPR(rs));
					}
#line 116643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116651 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116655 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116659 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116663 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116666 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116670 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116673 "powerpc.tcc"
				)
				{
#line 371 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsrin r" << rs << ", r" << rb;
					}
#line 116680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116688 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116695 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116708 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116715 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116730 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116737 "powerpc.tcc"
				>::initialize_function()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116750 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116757 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116770 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116777 "powerpc.tcc"
				>::initialize_operands()
				{
#line 746 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
					}
#line 116785 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116794 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116799 "powerpc.tcc"
				> *DecodeOpMtsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116805 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116815 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116819 "powerpc.tcc"
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116823 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116827 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116830 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116834 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116837 "powerpc.tcc"
				)
				{
#line 3 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dss " << strm << ", 0";
					}
#line 116844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116852 "powerpc.tcc"
				>

				void
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116859 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116864 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116873 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116878 "powerpc.tcc"
				> *DecodeOpDss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDss<
#line 38 "ppc.isa"
					CONFIG
#line 116884 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116894 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116898 "powerpc.tcc"
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116902 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116906 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116909 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116913 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116916 "powerpc.tcc"
				)
				{
#line 9 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dssall " << strm;
					}
#line 116923 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116931 "powerpc.tcc"
				>

				void
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116938 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116943 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116952 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116957 "powerpc.tcc"
				> *DecodeOpDssall(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 116963 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116973 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116977 "powerpc.tcc"
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116981 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116985 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116988 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116992 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116995 "powerpc.tcc"
				)
				{
#line 15 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dst r" << ra << ", r" << rb << ", " << strm;
					}
#line 117002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117010 "powerpc.tcc"
				>

				void
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 117017 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117022 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117031 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117036 "powerpc.tcc"
				> *DecodeOpDst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDst<
#line 38 "ppc.isa"
					CONFIG
#line 117042 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117052 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117056 "powerpc.tcc"
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117060 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117064 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117067 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117071 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117074 "powerpc.tcc"
				)
				{
#line 21 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstst r" << ra << ", r" << rb << ", " << strm;
					}
#line 117081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117089 "powerpc.tcc"
				>

				void
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117096 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117101 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117110 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117115 "powerpc.tcc"
				> *DecodeOpDstst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 117121 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117131 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117135 "powerpc.tcc"
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117139 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117143 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117146 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117150 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117153 "powerpc.tcc"
				)
				{
#line 27 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117168 "powerpc.tcc"
				>

				void
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117175 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117180 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117189 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117194 "powerpc.tcc"
				> *DecodeOpDststt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 117200 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117210 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117214 "powerpc.tcc"
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117218 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117222 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117225 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117229 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117232 "powerpc.tcc"
				)
				{
#line 33 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117247 "powerpc.tcc"
				>

				void
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117254 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117259 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117268 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117273 "powerpc.tcc"
				> *DecodeOpDstt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 117279 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117289 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117293 "powerpc.tcc"
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117297 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117301 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117304 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117308 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117311 "powerpc.tcc"
				)
				{
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvebx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117326 "powerpc.tcc"
				>

				void
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117333 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117338 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117347 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117352 "powerpc.tcc"
				> *DecodeOpLvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 117358 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117368 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117372 "powerpc.tcc"
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117376 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117380 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117383 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117387 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117390 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvehx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117405 "powerpc.tcc"
				>

				void
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117412 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117417 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117426 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117431 "powerpc.tcc"
				> *DecodeOpLvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 117437 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117447 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117451 "powerpc.tcc"
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117455 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117459 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117462 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117466 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117469 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvewx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117476 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117484 "powerpc.tcc"
				>

				void
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117491 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117496 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117505 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117510 "powerpc.tcc"
				> *DecodeOpLvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 117516 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117526 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117530 "powerpc.tcc"
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117534 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117538 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117541 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117545 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117548 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117555 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117563 "powerpc.tcc"
				>

				void
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117570 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117575 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117584 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117589 "powerpc.tcc"
				> *DecodeOpLvsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 117595 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117605 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117609 "powerpc.tcc"
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117613 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117617 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117620 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117624 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117627 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsr v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117642 "powerpc.tcc"
				>

				void
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117649 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117654 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117663 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117668 "powerpc.tcc"
				> *DecodeOpLvsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 117674 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117684 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117688 "powerpc.tcc"
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117692 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117696 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117699 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117703 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117706 "powerpc.tcc"
				)
				{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117721 "powerpc.tcc"
				>

				void
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117728 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117733 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117742 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117747 "powerpc.tcc"
				> *DecodeOpLvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 117753 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117763 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117767 "powerpc.tcc"
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117771 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117775 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117778 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117782 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117785 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvxl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117800 "powerpc.tcc"
				>

				void
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117807 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117812 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117821 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117826 "powerpc.tcc"
				> *DecodeOpLvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 117832 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117842 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117846 "powerpc.tcc"
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117850 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117854 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117857 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117861 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117864 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mfvscr v" << vd;
					}
#line 117871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117879 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117886 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117899 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117906 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117913 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117922 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117927 "powerpc.tcc"
				> *DecodeOpMfvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117933 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117943 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117947 "powerpc.tcc"
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117951 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117955 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117958 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117962 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117965 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mtvscr v" << vb;
					}
#line 117972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117980 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117987 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118000 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 118007 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 118014 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118023 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118028 "powerpc.tcc"
				> *DecodeOpMtvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 118034 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118044 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118048 "powerpc.tcc"
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118052 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118056 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118059 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118063 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118066 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvebx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118073 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118081 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118088 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118101 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118108 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118115 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118124 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118129 "powerpc.tcc"
				> *DecodeOpStvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 118135 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118145 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118149 "powerpc.tcc"
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118153 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118157 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118160 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118164 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118167 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvehx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118174 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118182 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118189 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118202 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118209 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118216 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118225 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118230 "powerpc.tcc"
				> *DecodeOpStvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 118236 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118246 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118250 "powerpc.tcc"
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118254 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118258 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118261 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118265 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118268 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvewx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118283 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118290 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118303 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118310 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118317 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118326 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118331 "powerpc.tcc"
				> *DecodeOpStvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 118337 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118347 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118351 "powerpc.tcc"
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118355 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118359 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118362 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118366 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118369 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118376 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118384 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118391 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118404 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118411 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118418 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118427 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118432 "powerpc.tcc"
				> *DecodeOpStvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 118438 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118448 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118452 "powerpc.tcc"
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118456 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118460 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118463 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118467 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118470 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvxl v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118477 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118485 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118492 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118497 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118505 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118512 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118519 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118528 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118533 "powerpc.tcc"
				> *DecodeOpStvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 118539 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118549 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118553 "powerpc.tcc"
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118557 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118561 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118564 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118568 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118571 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 118578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118586 "powerpc.tcc"
				>

				void
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118593 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118598 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118607 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118612 "powerpc.tcc"
				> *DecodeOpVaddcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 118618 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118628 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118632 "powerpc.tcc"
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118636 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118640 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118643 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118647 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118650 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 118657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118665 "powerpc.tcc"
				>

				void
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118672 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 118677 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118686 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118691 "powerpc.tcc"
				> *DecodeOpVaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 118697 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118707 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118711 "powerpc.tcc"
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118715 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118719 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118722 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118726 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118729 "powerpc.tcc"
				)
				{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118744 "powerpc.tcc"
				>

				void
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118751 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118756 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118765 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118770 "powerpc.tcc"
				> *DecodeOpVaddsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 118776 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118786 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118790 "powerpc.tcc"
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118794 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118798 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118801 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118805 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118808 "powerpc.tcc"
				)
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118823 "powerpc.tcc"
				>

				void
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118830 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118835 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118844 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118849 "powerpc.tcc"
				> *DecodeOpVaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 118855 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118865 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118869 "powerpc.tcc"
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118873 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118877 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118880 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118884 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118887 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 118894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118902 "powerpc.tcc"
				>

				void
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118909 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118914 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118923 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118928 "powerpc.tcc"
				> *DecodeOpVaddsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 118934 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118944 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118948 "powerpc.tcc"
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118952 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118956 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118959 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118963 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118966 "powerpc.tcc"
				)
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubm v" << vd << ", v" << va << ", v" << vb;
					}
#line 118973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118981 "powerpc.tcc"
				>

				void
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118988 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118993 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119002 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119007 "powerpc.tcc"
				> *DecodeOpVaddubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 119013 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119023 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119027 "powerpc.tcc"
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 119031 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119035 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119038 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119042 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119045 "powerpc.tcc"
				)
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119060 "powerpc.tcc"
				>

				void
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 119067 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119072 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119081 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119086 "powerpc.tcc"
				> *DecodeOpVaddubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 119092 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119102 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119106 "powerpc.tcc"
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119110 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119114 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119117 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119121 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119124 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119131 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119139 "powerpc.tcc"
				>

				void
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119146 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119151 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119160 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119165 "powerpc.tcc"
				> *DecodeOpVadduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 119171 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119181 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119185 "powerpc.tcc"
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119189 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119193 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119196 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119200 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119203 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119210 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119218 "powerpc.tcc"
				>

				void
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119225 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119230 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119239 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119244 "powerpc.tcc"
				> *DecodeOpVadduhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 119250 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119260 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119264 "powerpc.tcc"
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119268 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119272 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119275 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119279 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119282 "powerpc.tcc"
				)
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119289 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119297 "powerpc.tcc"
				>

				void
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119304 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119309 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119318 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119323 "powerpc.tcc"
				> *DecodeOpVadduwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 119329 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119339 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119343 "powerpc.tcc"
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119347 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119351 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119354 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119358 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119361 "powerpc.tcc"
				)
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduws v" << vd << ", v" << va << ", v" << vb;
					}
#line 119368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119376 "powerpc.tcc"
				>

				void
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119383 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119388 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119397 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119402 "powerpc.tcc"
				> *DecodeOpVadduws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 119408 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119418 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119422 "powerpc.tcc"
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119426 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119430 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119433 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119437 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119440 "powerpc.tcc"
				)
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vand v" << vd << ", v" << va << ", v" << vb;
					}
#line 119447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119455 "powerpc.tcc"
				>

				void
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119462 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119467 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119476 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119481 "powerpc.tcc"
				> *DecodeOpVand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVand<
#line 38 "ppc.isa"
					CONFIG
#line 119487 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119497 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119501 "powerpc.tcc"
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119505 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119509 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119512 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119516 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119519 "powerpc.tcc"
				)
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vandc v" << vd << ", v" << va << ", v" << vb;
					}
#line 119526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119534 "powerpc.tcc"
				>

				void
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119541 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119546 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119555 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119560 "powerpc.tcc"
				> *DecodeOpVandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 119566 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119576 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119580 "powerpc.tcc"
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119584 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119588 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119591 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119595 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119598 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 119605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119613 "powerpc.tcc"
				>

				void
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119620 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119625 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119634 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119639 "powerpc.tcc"
				> *DecodeOpVavgsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 119645 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119655 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119659 "powerpc.tcc"
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119663 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119667 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119670 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119674 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119677 "powerpc.tcc"
				)
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119692 "powerpc.tcc"
				>

				void
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119699 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119704 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119713 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119718 "powerpc.tcc"
				> *DecodeOpVavgsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 119724 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119734 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119738 "powerpc.tcc"
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119742 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119746 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119749 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119753 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119756 "powerpc.tcc"
				)
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119771 "powerpc.tcc"
				>

				void
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119778 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119783 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119792 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119797 "powerpc.tcc"
				> *DecodeOpVavgsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 119803 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119813 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119817 "powerpc.tcc"
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119821 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119825 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119828 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119832 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119835 "powerpc.tcc"
				)
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgub v" << vd << ", v" << va << ", v" << vb;
					}
#line 119842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119850 "powerpc.tcc"
				>

				void
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119857 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119862 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119871 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119876 "powerpc.tcc"
				> *DecodeOpVavgub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 119882 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119892 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119896 "powerpc.tcc"
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119900 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119904 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119907 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119911 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119914 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119929 "powerpc.tcc"
				>

				void
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119936 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119941 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119950 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119955 "powerpc.tcc"
				> *DecodeOpVavguh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 119961 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119971 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119975 "powerpc.tcc"
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119979 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119983 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119986 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119990 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119993 "powerpc.tcc"
				)
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguw v" << vd << ", v" << va << ", v" << vb;
					}
#line 120000 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120008 "powerpc.tcc"
				>

				void
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 120015 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120020 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120029 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120034 "powerpc.tcc"
				> *DecodeOpVavguw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 120040 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120050 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120054 "powerpc.tcc"
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120058 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120062 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120065 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120069 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120072 "powerpc.tcc"
				)
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfsx v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120087 "powerpc.tcc"
				>

				void
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120094 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120099 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120108 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120113 "powerpc.tcc"
				> *DecodeOpVcfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 120119 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120129 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120133 "powerpc.tcc"
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120137 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120141 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120144 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120148 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120151 "powerpc.tcc"
				)
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfux v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120166 "powerpc.tcc"
				>

				void
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120173 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120178 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120187 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120192 "powerpc.tcc"
				> *DecodeOpVcfux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 120198 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120208 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120212 "powerpc.tcc"
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120216 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120220 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120223 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120227 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120230 "powerpc.tcc"
				)
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpbfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120245 "powerpc.tcc"
				>

				void
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120252 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120257 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120266 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120271 "powerpc.tcc"
				> *DecodeOpVcmpbfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 120277 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120287 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120291 "powerpc.tcc"
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120295 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120299 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120302 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120306 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120309 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpeqfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120316 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120324 "powerpc.tcc"
				>

				void
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120331 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120336 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120345 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120350 "powerpc.tcc"
				> *DecodeOpVcmpeqfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 120356 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120366 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120370 "powerpc.tcc"
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120374 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120378 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120381 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120385 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120388 "powerpc.tcc"
				)
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120403 "powerpc.tcc"
				>

				void
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120410 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120415 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120424 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120429 "powerpc.tcc"
				> *DecodeOpVcmpequb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 120435 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120445 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120449 "powerpc.tcc"
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120453 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120457 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120460 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120464 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120467 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120482 "powerpc.tcc"
				>

				void
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120489 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120494 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120503 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120508 "powerpc.tcc"
				> *DecodeOpVcmpequh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 120514 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120524 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120528 "powerpc.tcc"
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120532 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120536 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120539 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120543 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120546 "powerpc.tcc"
				)
				{
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120553 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120561 "powerpc.tcc"
				>

				void
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120568 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120573 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120582 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120587 "powerpc.tcc"
				> *DecodeOpVcmpequw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 120593 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120603 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120607 "powerpc.tcc"
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120611 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120615 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120618 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120622 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120625 "powerpc.tcc"
				)
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgefp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120640 "powerpc.tcc"
				>

				void
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120647 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120652 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120661 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120666 "powerpc.tcc"
				> *DecodeOpVcmpgefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 120672 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120682 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120686 "powerpc.tcc"
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120690 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120694 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120697 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120701 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120704 "powerpc.tcc"
				)
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120719 "powerpc.tcc"
				>

				void
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120726 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120731 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120740 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120745 "powerpc.tcc"
				> *DecodeOpVcmpgtfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 120751 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120761 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120765 "powerpc.tcc"
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120769 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120773 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120776 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120780 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120783 "powerpc.tcc"
				)
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120798 "powerpc.tcc"
				>

				void
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120805 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120810 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120819 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120824 "powerpc.tcc"
				> *DecodeOpVcmpgtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 120830 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120840 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120844 "powerpc.tcc"
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120848 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120852 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120855 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120859 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120862 "powerpc.tcc"
				)
				{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120877 "powerpc.tcc"
				>

				void
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120884 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120889 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120898 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120903 "powerpc.tcc"
				> *DecodeOpVcmpgtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 120909 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120919 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120923 "powerpc.tcc"
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120927 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120931 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120934 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120938 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120941 "powerpc.tcc"
				)
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120948 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120956 "powerpc.tcc"
				>

				void
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120963 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120968 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120977 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120982 "powerpc.tcc"
				> *DecodeOpVcmpgtsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 120988 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120998 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121002 "powerpc.tcc"
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 121006 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121010 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121013 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121017 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121020 "powerpc.tcc"
				)
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtub" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121035 "powerpc.tcc"
				>

				void
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 121042 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121047 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121056 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121061 "powerpc.tcc"
				> *DecodeOpVcmpgtub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 121067 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121077 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121081 "powerpc.tcc"
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121085 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121089 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121092 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121096 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121099 "powerpc.tcc"
				)
				{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121106 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121114 "powerpc.tcc"
				>

				void
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121121 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121126 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121135 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121140 "powerpc.tcc"
				> *DecodeOpVcmpgtuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 121146 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121156 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121160 "powerpc.tcc"
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121164 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121168 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121171 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121175 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121178 "powerpc.tcc"
				)
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121185 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121193 "powerpc.tcc"
				>

				void
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121200 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121205 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121214 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121219 "powerpc.tcc"
				> *DecodeOpVcmpgtuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 121225 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121235 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121239 "powerpc.tcc"
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121243 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121247 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121250 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121254 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121257 "powerpc.tcc"
				)
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctsxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121272 "powerpc.tcc"
				>

				void
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121279 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121284 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121293 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121298 "powerpc.tcc"
				> *DecodeOpVctsxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 121304 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121314 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121318 "powerpc.tcc"
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121322 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121326 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121329 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121333 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121336 "powerpc.tcc"
				)
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctuxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121351 "powerpc.tcc"
				>

				void
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121358 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121363 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121372 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121377 "powerpc.tcc"
				> *DecodeOpVctuxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 121383 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121393 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121397 "powerpc.tcc"
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121401 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121405 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121408 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121412 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121415 "powerpc.tcc"
				)
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vexptefp v" << vd << ", v" << vb;
					}
#line 121422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121430 "powerpc.tcc"
				>

				void
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121437 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121442 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121451 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121456 "powerpc.tcc"
				> *DecodeOpVexptefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 121462 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121472 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121476 "powerpc.tcc"
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121480 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121484 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121487 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121491 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121494 "powerpc.tcc"
				)
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vlogefp v" << vd << ", v" << vb;
					}
#line 121501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121509 "powerpc.tcc"
				>

				void
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121516 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121521 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121530 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121535 "powerpc.tcc"
				> *DecodeOpVlogefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 121541 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121551 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121555 "powerpc.tcc"
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121559 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121563 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121566 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121570 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121573 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaddfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 121580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121588 "powerpc.tcc"
				>

				void
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121595 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121600 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121609 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121614 "powerpc.tcc"
				> *DecodeOpVmaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 121620 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121630 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121634 "powerpc.tcc"
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121638 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121642 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121645 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121649 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121652 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 121659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121667 "powerpc.tcc"
				>

				void
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121674 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121679 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121688 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121693 "powerpc.tcc"
				> *DecodeOpVmaxfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 121699 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121709 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121713 "powerpc.tcc"
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121717 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121721 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121724 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121728 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121731 "powerpc.tcc"
				)
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 121738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121746 "powerpc.tcc"
				>

				void
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121753 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121758 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121767 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121772 "powerpc.tcc"
				> *DecodeOpVmaxsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 121778 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121788 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121792 "powerpc.tcc"
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121796 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121800 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121803 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121807 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121810 "powerpc.tcc"
				)
				{
#line 369 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 121817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121825 "powerpc.tcc"
				>

				void
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121832 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121837 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121846 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121851 "powerpc.tcc"
				> *DecodeOpVmaxsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 121857 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121867 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121871 "powerpc.tcc"
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121875 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121879 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121882 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121886 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121889 "powerpc.tcc"
				)
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 121896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121904 "powerpc.tcc"
				>

				void
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121911 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121916 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121925 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121930 "powerpc.tcc"
				> *DecodeOpVmaxsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 121936 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121946 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121950 "powerpc.tcc"
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121954 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121958 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121961 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121965 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121968 "powerpc.tcc"
				)
				{
#line 381 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxub v" << vd << ", v" << va << ", v" << vb;
					}
#line 121975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121983 "powerpc.tcc"
				>

				void
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121990 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121995 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122004 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122009 "powerpc.tcc"
				> *DecodeOpVmaxub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 122015 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122025 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122029 "powerpc.tcc"
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 122033 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122037 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122040 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122044 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122047 "powerpc.tcc"
				)
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122062 "powerpc.tcc"
				>

				void
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 122069 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122074 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122083 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122088 "powerpc.tcc"
				> *DecodeOpVmaxuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 122094 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122104 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122108 "powerpc.tcc"
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122112 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122116 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122119 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122123 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122126 "powerpc.tcc"
				)
				{
#line 393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122141 "powerpc.tcc"
				>

				void
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122148 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122153 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122162 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122167 "powerpc.tcc"
				> *DecodeOpVmaxuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 122173 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122183 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122187 "powerpc.tcc"
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122191 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122195 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122198 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122202 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122205 "powerpc.tcc"
				)
				{
#line 399 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhaddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122220 "powerpc.tcc"
				>

				void
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122227 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122232 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122241 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122246 "powerpc.tcc"
				> *DecodeOpVmhaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122252 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122262 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122266 "powerpc.tcc"
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122270 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122274 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122277 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122281 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122284 "powerpc.tcc"
				)
				{
#line 405 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhraddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122291 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122299 "powerpc.tcc"
				>

				void
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122306 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122311 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122320 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122325 "powerpc.tcc"
				> *DecodeOpVmhraddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122331 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122341 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122345 "powerpc.tcc"
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122349 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122353 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122356 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122360 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122363 "powerpc.tcc"
				)
				{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 122370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122378 "powerpc.tcc"
				>

				void
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122385 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 122390 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122399 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122404 "powerpc.tcc"
				> *DecodeOpVminfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 122410 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122420 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122424 "powerpc.tcc"
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122428 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122432 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122435 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122439 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122442 "powerpc.tcc"
				)
				{
#line 417 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122449 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122457 "powerpc.tcc"
				>

				void
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122464 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122469 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122478 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122483 "powerpc.tcc"
				> *DecodeOpVminsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 122489 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122499 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122503 "powerpc.tcc"
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122507 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122511 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122514 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122518 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122521 "powerpc.tcc"
				)
				{
#line 423 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122536 "powerpc.tcc"
				>

				void
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122543 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122548 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122557 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122562 "powerpc.tcc"
				> *DecodeOpVminsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 122568 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122578 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122582 "powerpc.tcc"
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122586 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122590 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122593 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122597 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122600 "powerpc.tcc"
				)
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122615 "powerpc.tcc"
				>

				void
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122622 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122627 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122636 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122641 "powerpc.tcc"
				> *DecodeOpVminsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 122647 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122657 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122661 "powerpc.tcc"
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122665 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122669 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122672 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122676 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122679 "powerpc.tcc"
				)
				{
#line 435 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminub v" << vd << ", v" << va << ", v" << vb;
					}
#line 122686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122694 "powerpc.tcc"
				>

				void
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122701 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122706 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122715 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122720 "powerpc.tcc"
				> *DecodeOpVminub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 122726 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122736 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122740 "powerpc.tcc"
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122744 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122748 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122751 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122755 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122758 "powerpc.tcc"
				)
				{
#line 441 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122765 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122773 "powerpc.tcc"
				>

				void
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122780 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122785 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122794 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122799 "powerpc.tcc"
				> *DecodeOpVminuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 122805 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122815 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122819 "powerpc.tcc"
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122823 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122827 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122830 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122834 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122837 "powerpc.tcc"
				)
				{
#line 447 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122852 "powerpc.tcc"
				>

				void
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122859 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122864 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122873 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122878 "powerpc.tcc"
				> *DecodeOpVminuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 122884 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122894 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122898 "powerpc.tcc"
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122902 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122906 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122909 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122913 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122916 "powerpc.tcc"
				)
				{
#line 453 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmladduhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122923 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122931 "powerpc.tcc"
				>

				void
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122938 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122943 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122952 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122957 "powerpc.tcc"
				> *DecodeOpVmladduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 122963 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122973 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122977 "powerpc.tcc"
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122981 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122985 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122988 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122992 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122995 "powerpc.tcc"
				)
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123010 "powerpc.tcc"
				>

				void
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 123017 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123022 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123031 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123036 "powerpc.tcc"
				> *DecodeOpVmrghb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 123042 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123052 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123056 "powerpc.tcc"
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123060 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123064 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123067 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123071 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123074 "powerpc.tcc"
				)
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123089 "powerpc.tcc"
				>

				void
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123096 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123101 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123110 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123115 "powerpc.tcc"
				> *DecodeOpVmrghh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 123121 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123131 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123135 "powerpc.tcc"
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123139 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123143 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123146 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123150 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123153 "powerpc.tcc"
				)
				{
#line 471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123168 "powerpc.tcc"
				>

				void
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123175 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123180 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123189 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123194 "powerpc.tcc"
				> *DecodeOpVmrghw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 123200 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123210 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123214 "powerpc.tcc"
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123218 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123222 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123225 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123229 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123232 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123247 "powerpc.tcc"
				>

				void
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123254 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123259 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123268 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123273 "powerpc.tcc"
				> *DecodeOpVmrglb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 123279 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123289 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123293 "powerpc.tcc"
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123297 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123301 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123304 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123308 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123311 "powerpc.tcc"
				)
				{
#line 483 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123326 "powerpc.tcc"
				>

				void
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123333 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123338 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123347 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123352 "powerpc.tcc"
				> *DecodeOpVmrglh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 123358 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123368 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123372 "powerpc.tcc"
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123376 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123380 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123383 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123387 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123390 "powerpc.tcc"
				)
				{
#line 489 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123405 "powerpc.tcc"
				>

				void
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123412 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123417 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123426 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123431 "powerpc.tcc"
				> *DecodeOpVmrglw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 123437 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123447 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123451 "powerpc.tcc"
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123455 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123459 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123462 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123466 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123469 "powerpc.tcc"
				)
				{
#line 495 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsummbm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123476 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123484 "powerpc.tcc"
				>

				void
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123491 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123496 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123505 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123510 "powerpc.tcc"
				> *DecodeOpVmsummbm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 123516 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123526 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123530 "powerpc.tcc"
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123534 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123538 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123541 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123545 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123548 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123555 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123563 "powerpc.tcc"
				>

				void
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123570 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123575 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123584 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123589 "powerpc.tcc"
				> *DecodeOpVmsumshm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 123595 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123605 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123609 "powerpc.tcc"
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123613 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123617 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123620 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123624 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123627 "powerpc.tcc"
				)
				{
#line 507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123642 "powerpc.tcc"
				>

				void
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123649 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123654 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123663 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123668 "powerpc.tcc"
				> *DecodeOpVmsumshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 123674 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123684 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123688 "powerpc.tcc"
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123692 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123696 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123699 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123703 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123706 "powerpc.tcc"
				)
				{
#line 513 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumubm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123721 "powerpc.tcc"
				>

				void
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123728 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123733 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123742 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123747 "powerpc.tcc"
				> *DecodeOpVmsumubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 123753 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123763 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123767 "powerpc.tcc"
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123771 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123775 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123778 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123782 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123785 "powerpc.tcc"
				)
				{
#line 519 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123800 "powerpc.tcc"
				>

				void
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123807 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123812 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123821 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123826 "powerpc.tcc"
				> *DecodeOpVmsumuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 123832 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123842 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123846 "powerpc.tcc"
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123850 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123854 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123857 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123861 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123864 "powerpc.tcc"
				)
				{
#line 525 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123879 "powerpc.tcc"
				>

				void
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123886 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123891 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123900 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123905 "powerpc.tcc"
				> *DecodeOpVmsumuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 123911 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123921 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123925 "powerpc.tcc"
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123929 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123933 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123936 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123940 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123943 "powerpc.tcc"
				)
				{
#line 531 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123958 "powerpc.tcc"
				>

				void
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123965 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123970 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123979 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123984 "powerpc.tcc"
				> *DecodeOpVmulesb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 123990 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124000 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124004 "powerpc.tcc"
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 124008 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124012 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124015 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124019 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124022 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124037 "powerpc.tcc"
				>

				void
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 124044 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124049 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124058 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124063 "powerpc.tcc"
				> *DecodeOpVmulesh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 124069 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124079 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124083 "powerpc.tcc"
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124087 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124091 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124094 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124098 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124101 "powerpc.tcc"
				)
				{
#line 543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124108 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124116 "powerpc.tcc"
				>

				void
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124123 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124128 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124137 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124142 "powerpc.tcc"
				> *DecodeOpVmuleub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 124148 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124158 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124162 "powerpc.tcc"
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124166 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124170 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124173 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124177 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124180 "powerpc.tcc"
				)
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124195 "powerpc.tcc"
				>

				void
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124202 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124207 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124216 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124221 "powerpc.tcc"
				> *DecodeOpVmuleuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 124227 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124237 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124241 "powerpc.tcc"
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124245 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124249 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124252 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124256 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124259 "powerpc.tcc"
				)
				{
#line 555 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosb v" << vd << ", v" << va << ", v" << vb;
					}
#line 124266 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124274 "powerpc.tcc"
				>

				void
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124281 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124286 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124295 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124300 "powerpc.tcc"
				> *DecodeOpVmulosb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 124306 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124316 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124320 "powerpc.tcc"
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124324 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124328 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124331 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124335 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124338 "powerpc.tcc"
				)
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124353 "powerpc.tcc"
				>

				void
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124360 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124365 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124374 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124379 "powerpc.tcc"
				> *DecodeOpVmulosh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 124385 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124395 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124399 "powerpc.tcc"
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124403 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124407 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124410 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124414 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124417 "powerpc.tcc"
				)
				{
#line 567 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuloub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124424 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124432 "powerpc.tcc"
				>

				void
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124439 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124444 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124453 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124458 "powerpc.tcc"
				> *DecodeOpVmuloub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 124464 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124474 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124478 "powerpc.tcc"
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124482 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124486 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124489 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124493 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124496 "powerpc.tcc"
				)
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulouh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124511 "powerpc.tcc"
				>

				void
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124518 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124523 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124532 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124537 "powerpc.tcc"
				> *DecodeOpVmulouh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 124543 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124553 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124557 "powerpc.tcc"
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124561 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124565 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124568 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124572 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124575 "powerpc.tcc"
				)
				{
#line 579 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnmsubfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 124582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124590 "powerpc.tcc"
				>

				void
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124597 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 124602 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124611 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124616 "powerpc.tcc"
				> *DecodeOpVnmsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 124622 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124632 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124636 "powerpc.tcc"
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124640 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124644 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124647 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124651 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124654 "powerpc.tcc"
				)
				{
#line 585 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124669 "powerpc.tcc"
				>

				void
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124676 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124681 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124690 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124695 "powerpc.tcc"
				> *DecodeOpVnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 124701 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124711 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124715 "powerpc.tcc"
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124719 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124723 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124726 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124730 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124733 "powerpc.tcc"
				)
				{
#line 591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124748 "powerpc.tcc"
				>

				void
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124755 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124760 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124769 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124774 "powerpc.tcc"
				> *DecodeOpVor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVor<
#line 38 "ppc.isa"
					CONFIG
#line 124780 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124790 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124794 "powerpc.tcc"
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124798 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124802 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124805 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124809 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124812 "powerpc.tcc"
				)
				{
#line 597 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vperm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 124819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124827 "powerpc.tcc"
				>

				void
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124834 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124839 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124848 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124853 "powerpc.tcc"
				> *DecodeOpVperm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 124859 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124869 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124873 "powerpc.tcc"
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124877 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124881 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124884 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124888 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124891 "powerpc.tcc"
				)
				{
#line 603 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkpx v" << vd << ", v" << va << ", v" << vb;
					}
#line 124898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124906 "powerpc.tcc"
				>

				void
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124913 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124918 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124927 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124932 "powerpc.tcc"
				> *DecodeOpVpkpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 124938 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124948 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124952 "powerpc.tcc"
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124956 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124960 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124963 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124967 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124970 "powerpc.tcc"
				)
				{
#line 609 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshss v" << vd << ", v" << va << ", v" << vb;
					}
#line 124977 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124985 "powerpc.tcc"
				>

				void
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124992 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124997 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125006 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125011 "powerpc.tcc"
				> *DecodeOpVpkshss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 125017 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125027 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125031 "powerpc.tcc"
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 125035 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125039 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125042 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125046 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125049 "powerpc.tcc"
				)
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125064 "powerpc.tcc"
				>

				void
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 125071 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125076 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125085 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125090 "powerpc.tcc"
				> *DecodeOpVpkshus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 125096 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125106 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125110 "powerpc.tcc"
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125114 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125118 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125121 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125125 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125128 "powerpc.tcc"
				)
				{
#line 621 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswss v" << vd << ", v" << va << ", v" << vb;
					}
#line 125135 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125143 "powerpc.tcc"
				>

				void
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125150 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125155 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125164 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125169 "powerpc.tcc"
				> *DecodeOpVpkswss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 125175 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125185 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125189 "powerpc.tcc"
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125193 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125197 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125200 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125204 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125207 "powerpc.tcc"
				)
				{
#line 627 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125222 "powerpc.tcc"
				>

				void
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125229 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125234 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125243 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125248 "powerpc.tcc"
				> *DecodeOpVpkswus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 125254 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125264 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125268 "powerpc.tcc"
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125272 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125276 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125279 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125283 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125286 "powerpc.tcc"
				)
				{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125301 "powerpc.tcc"
				>

				void
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125308 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125313 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125322 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125327 "powerpc.tcc"
				> *DecodeOpVpkuhum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 125333 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125343 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125347 "powerpc.tcc"
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125351 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125355 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125358 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125362 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125365 "powerpc.tcc"
				)
				{
#line 639 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125380 "powerpc.tcc"
				>

				void
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125387 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125392 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125401 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125406 "powerpc.tcc"
				> *DecodeOpVpkuhus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 125412 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125422 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125426 "powerpc.tcc"
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125430 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125434 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125437 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125441 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125444 "powerpc.tcc"
				)
				{
#line 645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125459 "powerpc.tcc"
				>

				void
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125466 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125471 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125480 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125485 "powerpc.tcc"
				> *DecodeOpVpkuwum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 125491 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125501 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125505 "powerpc.tcc"
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125509 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125513 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125516 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125520 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125523 "powerpc.tcc"
				)
				{
#line 651 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125538 "powerpc.tcc"
				>

				void
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125545 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125550 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125559 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125564 "powerpc.tcc"
				> *DecodeOpVpkuwus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 125570 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125580 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125584 "powerpc.tcc"
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125588 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125592 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125595 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125599 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125602 "powerpc.tcc"
				)
				{
#line 657 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrefp v" << vd << ", v" << vb;
					}
#line 125609 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125617 "powerpc.tcc"
				>

				void
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125624 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125629 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125638 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125643 "powerpc.tcc"
				> *DecodeOpVrefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 125649 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125659 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125663 "powerpc.tcc"
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125667 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125671 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125674 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125678 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125681 "powerpc.tcc"
				)
				{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfim v" << vd << ", v" << vb;
					}
#line 125688 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125696 "powerpc.tcc"
				>

				void
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125703 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125708 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125717 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125722 "powerpc.tcc"
				> *DecodeOpVrfim(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 125728 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125738 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125742 "powerpc.tcc"
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125746 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125750 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125753 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125757 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125760 "powerpc.tcc"
				)
				{
#line 669 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfin v" << vd << ", v" << vb;
					}
#line 125767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125775 "powerpc.tcc"
				>

				void
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125782 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125787 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125796 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125801 "powerpc.tcc"
				> *DecodeOpVrfin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 125807 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125817 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125821 "powerpc.tcc"
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125825 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125829 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125832 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125836 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125839 "powerpc.tcc"
				)
				{
#line 675 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfip v" << vd << ", v" << vb;
					}
#line 125846 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125854 "powerpc.tcc"
				>

				void
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125861 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125866 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125875 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125880 "powerpc.tcc"
				> *DecodeOpVrfip(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 125886 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125896 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125900 "powerpc.tcc"
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125904 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125908 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125911 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125915 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125918 "powerpc.tcc"
				)
				{
#line 681 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfiz v" << vd << ", v" << vb;
					}
#line 125925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125933 "powerpc.tcc"
				>

				void
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125940 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125945 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125954 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125959 "powerpc.tcc"
				> *DecodeOpVrfiz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 125965 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125975 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125979 "powerpc.tcc"
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125983 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125987 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125990 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125994 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125997 "powerpc.tcc"
				)
				{
#line 687 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlb v" << vd << ", v" << va << ", v" << vb;
					}
#line 126004 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126012 "powerpc.tcc"
				>

				void
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 126019 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126024 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126033 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126038 "powerpc.tcc"
				> *DecodeOpVrlb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 126044 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126054 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126058 "powerpc.tcc"
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126062 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126066 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126069 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126073 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126076 "powerpc.tcc"
				)
				{
#line 693 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126091 "powerpc.tcc"
				>

				void
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126098 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126103 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126112 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126117 "powerpc.tcc"
				> *DecodeOpVrlh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 126123 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126133 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126137 "powerpc.tcc"
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126141 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126145 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126148 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126152 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126155 "powerpc.tcc"
				)
				{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126170 "powerpc.tcc"
				>

				void
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126177 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126182 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126191 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126196 "powerpc.tcc"
				> *DecodeOpVrlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 126202 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126212 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126216 "powerpc.tcc"
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126220 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126224 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126227 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126231 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126234 "powerpc.tcc"
				)
				{
#line 705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrsqrtefp v" << vd << ", v" << vb;
					}
#line 126241 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126249 "powerpc.tcc"
				>

				void
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126256 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 126261 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126270 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126275 "powerpc.tcc"
				> *DecodeOpVrsqrtefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 126281 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126291 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126295 "powerpc.tcc"
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126299 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126303 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126306 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126310 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126313 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsel v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 126320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126328 "powerpc.tcc"
				>

				void
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126335 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126340 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126349 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126354 "powerpc.tcc"
				> *DecodeOpVsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 126360 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126370 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126374 "powerpc.tcc"
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126378 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126382 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126385 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126389 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126392 "powerpc.tcc"
				)
				{
#line 717 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsl v" << vd << ", v" << va << ", v" << vb;
					}
#line 126399 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126407 "powerpc.tcc"
				>

				void
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126414 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126419 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126428 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126433 "powerpc.tcc"
				> *DecodeOpVsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 126439 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126449 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126453 "powerpc.tcc"
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126457 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126461 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126464 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126468 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126471 "powerpc.tcc"
				)
				{
#line 723 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslb v" << vd << ", v" << va << ", v" << vb;
					}
#line 126478 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126486 "powerpc.tcc"
				>

				void
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126493 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126498 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126507 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126512 "powerpc.tcc"
				> *DecodeOpVslb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 126518 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126528 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126532 "powerpc.tcc"
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126536 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126540 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126543 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126547 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126550 "powerpc.tcc"
				)
				{
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsldoi v" << vd << ", v" << va << ", v" << vb;
					}
#line 126557 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126565 "powerpc.tcc"
				>

				void
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126572 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126577 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126586 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126591 "powerpc.tcc"
				> *DecodeOpVsldoi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 126597 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126607 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126611 "powerpc.tcc"
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126615 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126619 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126622 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126626 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126629 "powerpc.tcc"
				)
				{
#line 735 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126644 "powerpc.tcc"
				>

				void
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126651 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126656 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126665 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126670 "powerpc.tcc"
				> *DecodeOpVslh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 126676 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126686 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126690 "powerpc.tcc"
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126694 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126698 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126701 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126705 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126708 "powerpc.tcc"
				)
				{
#line 741 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslo v" << vd << ", v" << va << ", v" << vb;
					}
#line 126715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126723 "powerpc.tcc"
				>

				void
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126730 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126735 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126744 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126749 "powerpc.tcc"
				> *DecodeOpVslo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 126755 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126765 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126769 "powerpc.tcc"
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126773 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126777 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126780 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126784 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126787 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126794 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126802 "powerpc.tcc"
				>

				void
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126809 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126814 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126823 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126828 "powerpc.tcc"
				> *DecodeOpVslw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 126834 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126844 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126848 "powerpc.tcc"
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126852 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126856 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126859 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126863 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126866 "powerpc.tcc"
				)
				{
#line 753 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltb v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126881 "powerpc.tcc"
				>

				void
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126888 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126893 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126902 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126907 "powerpc.tcc"
				> *DecodeOpVspltb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 126913 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126923 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126927 "powerpc.tcc"
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126931 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126935 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126938 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126942 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126945 "powerpc.tcc"
				)
				{
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsplth v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126960 "powerpc.tcc"
				>

				void
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126967 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126972 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126981 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126986 "powerpc.tcc"
				> *DecodeOpVsplth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 126992 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127002 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127006 "powerpc.tcc"
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 127010 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127014 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127017 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127021 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127024 "powerpc.tcc"
				)
				{
#line 765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisb v" << vd << ", v" << vb << ", " << (int) simm;
					}
#line 127031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127039 "powerpc.tcc"
				>

				void
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 127046 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127051 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127060 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127065 "powerpc.tcc"
				> *DecodeOpVspltisb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 127071 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127081 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127085 "powerpc.tcc"
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127089 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127093 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127096 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127100 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127103 "powerpc.tcc"
				)
				{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltish v" << vd << ", v" << vb << ", " << simm;
					}
#line 127110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127118 "powerpc.tcc"
				>

				void
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127125 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127130 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127139 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127144 "powerpc.tcc"
				> *DecodeOpVspltish(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 127150 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127160 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127164 "powerpc.tcc"
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127168 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127172 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127175 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127179 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127182 "powerpc.tcc"
				)
				{
#line 777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisw v" << vd << ", v" << vb << ", " << simm;
					}
#line 127189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127197 "powerpc.tcc"
				>

				void
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127204 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127209 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127218 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127223 "powerpc.tcc"
				> *DecodeOpVspltisw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 127229 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127239 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127243 "powerpc.tcc"
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127247 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127251 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127254 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127258 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127261 "powerpc.tcc"
				)
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltiw v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 127268 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127276 "powerpc.tcc"
				>

				void
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127283 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127288 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127297 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127302 "powerpc.tcc"
				> *DecodeOpVspltw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 127308 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127318 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127322 "powerpc.tcc"
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127326 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127330 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127333 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127337 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127340 "powerpc.tcc"
				)
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsr v" << vd << ", v" << va << ", v" << vb;
					}
#line 127347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127355 "powerpc.tcc"
				>

				void
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127362 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127367 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127376 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127381 "powerpc.tcc"
				> *DecodeOpVsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 127387 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127397 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127401 "powerpc.tcc"
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127405 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127409 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127412 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127416 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127419 "powerpc.tcc"
				)
				{
#line 795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrab v" << vd << ", v" << va << ", v" << vb;
					}
#line 127426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127434 "powerpc.tcc"
				>

				void
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127441 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127446 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127455 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127460 "powerpc.tcc"
				> *DecodeOpVsrab(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 127466 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127476 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127480 "powerpc.tcc"
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127484 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127488 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127491 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127495 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127498 "powerpc.tcc"
				)
				{
#line 801 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrah v" << vd << ", v" << va << ", v" << vb;
					}
#line 127505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127513 "powerpc.tcc"
				>

				void
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127520 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127525 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127534 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127539 "powerpc.tcc"
				> *DecodeOpVsrah(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 127545 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127555 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127559 "powerpc.tcc"
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127563 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127567 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127570 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127574 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127577 "powerpc.tcc"
				)
				{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsraw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127592 "powerpc.tcc"
				>

				void
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127599 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127604 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127613 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127618 "powerpc.tcc"
				> *DecodeOpVsraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 127624 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127634 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127638 "powerpc.tcc"
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127642 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127646 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127649 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127653 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127656 "powerpc.tcc"
				)
				{
#line 813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrb v" << vd << ", v" << va << ", v" << vb;
					}
#line 127663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127671 "powerpc.tcc"
				>

				void
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127678 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127683 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127692 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127697 "powerpc.tcc"
				> *DecodeOpVsrb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 127703 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127713 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127717 "powerpc.tcc"
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127721 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127725 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127728 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127732 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127735 "powerpc.tcc"
				)
				{
#line 819 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrh v" << vd << ", v" << va << ", v" << vb;
					}
#line 127742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127750 "powerpc.tcc"
				>

				void
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127757 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127762 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127771 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127776 "powerpc.tcc"
				> *DecodeOpVsrh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 127782 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127792 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127796 "powerpc.tcc"
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127800 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127804 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127807 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127811 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127814 "powerpc.tcc"
				)
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsro v" << vd << ", v" << va << ", v" << vb;
					}
#line 127821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127829 "powerpc.tcc"
				>

				void
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127836 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127841 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127850 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127855 "powerpc.tcc"
				> *DecodeOpVsro(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 127861 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127871 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127875 "powerpc.tcc"
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127879 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127883 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127886 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127890 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127893 "powerpc.tcc"
				)
				{
#line 831 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127900 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127908 "powerpc.tcc"
				>

				void
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127915 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127920 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127929 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127934 "powerpc.tcc"
				> *DecodeOpVsrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 127940 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127950 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127954 "powerpc.tcc"
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127958 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127962 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127965 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127969 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127972 "powerpc.tcc"
				)
				{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127987 "powerpc.tcc"
				>

				void
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127994 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127999 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128008 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128013 "powerpc.tcc"
				> *DecodeOpVsubcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 128019 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128029 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128033 "powerpc.tcc"
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 128037 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128041 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128044 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128048 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128051 "powerpc.tcc"
				)
				{
#line 843 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 128058 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128066 "powerpc.tcc"
				>

				void
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 128073 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 128078 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128087 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128092 "powerpc.tcc"
				> *DecodeOpVsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 128098 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128108 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128112 "powerpc.tcc"
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128116 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128120 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128123 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128127 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128130 "powerpc.tcc"
				)
				{
#line 849 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128137 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128145 "powerpc.tcc"
				>

				void
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128152 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128157 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128166 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128171 "powerpc.tcc"
				> *DecodeOpVsubsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 128177 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128187 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128191 "powerpc.tcc"
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128195 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128199 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128202 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128206 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128209 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128224 "powerpc.tcc"
				>

				void
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128231 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128236 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128245 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128250 "powerpc.tcc"
				> *DecodeOpVsubshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 128256 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128266 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128270 "powerpc.tcc"
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128274 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128278 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128281 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128285 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128288 "powerpc.tcc"
				)
				{
#line 861 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128303 "powerpc.tcc"
				>

				void
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128310 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128315 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128324 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128329 "powerpc.tcc"
				> *DecodeOpVsubsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 128335 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128345 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128349 "powerpc.tcc"
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128353 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128357 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128360 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128364 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128367 "powerpc.tcc"
				)
				{
#line 867 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128374 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128382 "powerpc.tcc"
				>

				void
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128389 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128394 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128403 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128408 "powerpc.tcc"
				> *DecodeOpVsububm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 128414 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128424 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128428 "powerpc.tcc"
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128432 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128436 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128439 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128443 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128446 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128461 "powerpc.tcc"
				>

				void
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128468 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128473 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128482 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128487 "powerpc.tcc"
				> *DecodeOpVsububs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 128493 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128503 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128507 "powerpc.tcc"
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128511 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128515 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128518 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128522 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128525 "powerpc.tcc"
				)
				{
#line 879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128540 "powerpc.tcc"
				>

				void
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128547 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128552 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128561 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128566 "powerpc.tcc"
				> *DecodeOpVsubuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 128572 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128582 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128586 "powerpc.tcc"
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128590 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128594 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128597 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128601 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128604 "powerpc.tcc"
				)
				{
#line 885 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128619 "powerpc.tcc"
				>

				void
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128626 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128631 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128640 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128645 "powerpc.tcc"
				> *DecodeOpVsubuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 128651 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128661 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128665 "powerpc.tcc"
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128669 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128673 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128676 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128680 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128683 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128698 "powerpc.tcc"
				>

				void
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128705 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128710 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128719 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128724 "powerpc.tcc"
				> *DecodeOpVsubuwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 128730 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128740 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128744 "powerpc.tcc"
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128748 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128752 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128755 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128759 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128762 "powerpc.tcc"
				)
				{
#line 897 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128777 "powerpc.tcc"
				>

				void
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128784 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128789 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128798 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128803 "powerpc.tcc"
				> *DecodeOpVsubuws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 128809 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128819 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128823 "powerpc.tcc"
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128827 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128831 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128834 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128838 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128841 "powerpc.tcc"
				)
				{
#line 903 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsumsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128856 "powerpc.tcc"
				>

				void
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128863 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128868 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128877 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128882 "powerpc.tcc"
				> *DecodeOpVsumsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 128888 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128898 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128902 "powerpc.tcc"
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128906 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128910 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128913 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128917 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128920 "powerpc.tcc"
				)
				{
#line 909 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum2sws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128927 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128935 "powerpc.tcc"
				>

				void
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128942 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128947 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128956 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128961 "powerpc.tcc"
				> *DecodeOpVsum2sws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 128967 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128977 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128981 "powerpc.tcc"
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128985 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128989 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128992 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128996 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128999 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4sbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129014 "powerpc.tcc"
				>

				void
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 129021 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129026 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129035 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129040 "powerpc.tcc"
				> *DecodeOpVsum4sbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 129046 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129056 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129060 "powerpc.tcc"
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129064 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129068 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129071 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129075 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129078 "powerpc.tcc"
				)
				{
#line 921 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4shs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129093 "powerpc.tcc"
				>

				void
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129100 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129105 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129114 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129119 "powerpc.tcc"
				> *DecodeOpVsum4shs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 129125 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129135 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129139 "powerpc.tcc"
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129143 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129147 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129150 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129154 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129157 "powerpc.tcc"
				)
				{
#line 927 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4ubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129172 "powerpc.tcc"
				>

				void
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129179 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129184 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129193 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129198 "powerpc.tcc"
				> *DecodeOpVsum4ubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 129204 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129214 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129218 "powerpc.tcc"
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129222 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129226 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129229 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129233 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129236 "powerpc.tcc"
				)
				{
#line 933 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhpx v" << vd << ", v" << vb;
					}
#line 129243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129251 "powerpc.tcc"
				>

				void
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129258 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129263 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129272 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129277 "powerpc.tcc"
				> *DecodeOpVupkhpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 129283 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129293 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129297 "powerpc.tcc"
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129301 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129305 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129308 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129312 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129315 "powerpc.tcc"
				)
				{
#line 939 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsb v" << vd << ", v" << vb;
					}
#line 129322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129330 "powerpc.tcc"
				>

				void
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129337 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129342 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129351 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129356 "powerpc.tcc"
				> *DecodeOpVupkhsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 129362 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129372 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129376 "powerpc.tcc"
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129380 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129384 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129387 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129391 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129394 "powerpc.tcc"
				)
				{
#line 945 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsh v" << vd << ", v" << vb;
					}
#line 129401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129409 "powerpc.tcc"
				>

				void
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129416 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129421 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129430 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129435 "powerpc.tcc"
				> *DecodeOpVupkhsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 129441 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129451 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129455 "powerpc.tcc"
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129459 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129463 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129466 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129470 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129473 "powerpc.tcc"
				)
				{
#line 951 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklpx v" << vd << ", v" << vb;
					}
#line 129480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129488 "powerpc.tcc"
				>

				void
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129495 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129500 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129509 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129514 "powerpc.tcc"
				> *DecodeOpVupklpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 129520 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129530 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129534 "powerpc.tcc"
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129538 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129542 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129545 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129549 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129552 "powerpc.tcc"
				)
				{
#line 957 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsb v" << vd << ", v" << vb;
					}
#line 129559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129567 "powerpc.tcc"
				>

				void
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129574 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129579 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129588 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129593 "powerpc.tcc"
				> *DecodeOpVupklsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 129599 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129609 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129613 "powerpc.tcc"
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129617 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129621 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129624 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129628 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129631 "powerpc.tcc"
				)
				{
#line 963 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsh v" << vd << ", v" << vb;
					}
#line 129638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129646 "powerpc.tcc"
				>

				void
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129653 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129658 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129667 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129672 "powerpc.tcc"
				> *DecodeOpVupklsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 129678 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129688 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129692 "powerpc.tcc"
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129696 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129700 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129703 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129707 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129710 "powerpc.tcc"
				)
				{
#line 969 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vxor v" << vd << ", v" << va << ", v" << vb;
					}
#line 129717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129725 "powerpc.tcc"
				>

				void
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129732 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 129737 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129746 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129751 "powerpc.tcc"
				> *DecodeOpVxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 129757 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129767 "powerpc.tcc"
				>
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 129772 "powerpc.tcc"
				>::OpAdd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129776 "powerpc.tcc"
				>(code, addr, "add")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129792 "powerpc.tcc"
				>
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 129797 "powerpc.tcc"
				>::OpAddc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129801 "powerpc.tcc"
				>(code, addr, "addc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129817 "powerpc.tcc"
				>
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 129822 "powerpc.tcc"
				>::OpAdde(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129826 "powerpc.tcc"
				>(code, addr, "adde")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129842 "powerpc.tcc"
				>
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 129847 "powerpc.tcc"
				>::OpAddi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129851 "powerpc.tcc"
				>(code, addr, "addi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129865 "powerpc.tcc"
				>
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 129870 "powerpc.tcc"
				>::OpAddic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129874 "powerpc.tcc"
				>(code, addr, "addic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129888 "powerpc.tcc"
				>
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 129893 "powerpc.tcc"
				>::OpAddic_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129897 "powerpc.tcc"
				>(code, addr, "addic_")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129911 "powerpc.tcc"
				>
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 129916 "powerpc.tcc"
				>::OpAddis(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129920 "powerpc.tcc"
				>(code, addr, "addis")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 129931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129934 "powerpc.tcc"
				>
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 129939 "powerpc.tcc"
				>::OpAddme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129943 "powerpc.tcc"
				>(code, addr, "addme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129958 "powerpc.tcc"
				>
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 129963 "powerpc.tcc"
				>::OpAddze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129967 "powerpc.tcc"
				>(code, addr, "addze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129982 "powerpc.tcc"
				>
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 129987 "powerpc.tcc"
				>::OpDivw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129991 "powerpc.tcc"
				>(code, addr, "divw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130007 "powerpc.tcc"
				>
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 130012 "powerpc.tcc"
				>::OpDivwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130016 "powerpc.tcc"
				>(code, addr, "divwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130032 "powerpc.tcc"
				>
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 130037 "powerpc.tcc"
				>::OpMulhw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130041 "powerpc.tcc"
				>(code, addr, "mulhw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130056 "powerpc.tcc"
				>
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 130061 "powerpc.tcc"
				>::OpMulhwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130065 "powerpc.tcc"
				>(code, addr, "mulhwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130080 "powerpc.tcc"
				>
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 130085 "powerpc.tcc"
				>::OpMulli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130089 "powerpc.tcc"
				>(code, addr, "mulli")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130103 "powerpc.tcc"
				>
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 130108 "powerpc.tcc"
				>::OpMullw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130112 "powerpc.tcc"
				>(code, addr, "mullw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130128 "powerpc.tcc"
				>
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 130133 "powerpc.tcc"
				>::OpNeg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130137 "powerpc.tcc"
				>(code, addr, "neg")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130152 "powerpc.tcc"
				>
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 130157 "powerpc.tcc"
				>::OpSubf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130161 "powerpc.tcc"
				>(code, addr, "subf")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130177 "powerpc.tcc"
				>
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 130182 "powerpc.tcc"
				>::OpSubfc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130186 "powerpc.tcc"
				>(code, addr, "subfc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130202 "powerpc.tcc"
				>
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 130207 "powerpc.tcc"
				>::OpSubfe(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130211 "powerpc.tcc"
				>(code, addr, "subfe")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130227 "powerpc.tcc"
				>
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 130232 "powerpc.tcc"
				>::OpSubfic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130236 "powerpc.tcc"
				>(code, addr, "subfic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130250 "powerpc.tcc"
				>
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 130255 "powerpc.tcc"
				>::OpSubfme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130259 "powerpc.tcc"
				>(code, addr, "subfme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130274 "powerpc.tcc"
				>
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 130279 "powerpc.tcc"
				>::OpSubfze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130283 "powerpc.tcc"
				>(code, addr, "subfze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130298 "powerpc.tcc"
				>
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 130303 "powerpc.tcc"
				>::OpCmp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130307 "powerpc.tcc"
				>(code, addr, "cmp")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130322 "powerpc.tcc"
				>
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 130327 "powerpc.tcc"
				>::OpCmpi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130331 "powerpc.tcc"
				>(code, addr, "cmpi")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130346 "powerpc.tcc"
				>
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 130351 "powerpc.tcc"
				>::OpCmpl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130355 "powerpc.tcc"
				>(code, addr, "cmpl")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130370 "powerpc.tcc"
				>
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 130375 "powerpc.tcc"
				>::OpCmpli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130379 "powerpc.tcc"
				>(code, addr, "cmpli")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130394 "powerpc.tcc"
				>
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 130399 "powerpc.tcc"
				>::OpAnd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130403 "powerpc.tcc"
				>(code, addr, "and")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130418 "powerpc.tcc"
				>
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 130423 "powerpc.tcc"
				>::OpAndc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130427 "powerpc.tcc"
				>(code, addr, "andc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130442 "powerpc.tcc"
				>
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 130447 "powerpc.tcc"
				>::OpAndi_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130451 "powerpc.tcc"
				>(code, addr, "andi_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130465 "powerpc.tcc"
				>
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 130470 "powerpc.tcc"
				>::OpAndis_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130474 "powerpc.tcc"
				>(code, addr, "andis_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130488 "powerpc.tcc"
				>
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 130493 "powerpc.tcc"
				>::OpCntlzw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130497 "powerpc.tcc"
				>(code, addr, "cntlzw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130511 "powerpc.tcc"
				>
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 130516 "powerpc.tcc"
				>::OpEqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130520 "powerpc.tcc"
				>(code, addr, "eqv")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130535 "powerpc.tcc"
				>
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 130540 "powerpc.tcc"
				>::OpExtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130544 "powerpc.tcc"
				>(code, addr, "extsb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130558 "powerpc.tcc"
				>
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 130563 "powerpc.tcc"
				>::OpExtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130567 "powerpc.tcc"
				>(code, addr, "extsh")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130581 "powerpc.tcc"
				>
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 130586 "powerpc.tcc"
				>::OpNand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130590 "powerpc.tcc"
				>(code, addr, "nand")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130605 "powerpc.tcc"
				>
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 130610 "powerpc.tcc"
				>::OpNor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130614 "powerpc.tcc"
				>(code, addr, "nor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130629 "powerpc.tcc"
				>
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 130634 "powerpc.tcc"
				>::OpOr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130638 "powerpc.tcc"
				>(code, addr, "or")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130653 "powerpc.tcc"
				>
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 130658 "powerpc.tcc"
				>::OpOrc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130662 "powerpc.tcc"
				>(code, addr, "orc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130677 "powerpc.tcc"
				>
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 130682 "powerpc.tcc"
				>::OpOri(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130686 "powerpc.tcc"
				>(code, addr, "ori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130700 "powerpc.tcc"
				>
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 130705 "powerpc.tcc"
				>::OpOris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130709 "powerpc.tcc"
				>(code, addr, "oris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130723 "powerpc.tcc"
				>
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 130728 "powerpc.tcc"
				>::OpXor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130732 "powerpc.tcc"
				>(code, addr, "xor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130747 "powerpc.tcc"
				>
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 130752 "powerpc.tcc"
				>::OpXori(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130756 "powerpc.tcc"
				>(code, addr, "xori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130770 "powerpc.tcc"
				>
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 130775 "powerpc.tcc"
				>::OpXoris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130779 "powerpc.tcc"
				>(code, addr, "xoris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130793 "powerpc.tcc"
				>
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 130798 "powerpc.tcc"
				>::OpRlwimi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130802 "powerpc.tcc"
				>(code, addr, "rlwimi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130819 "powerpc.tcc"
				>
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 130824 "powerpc.tcc"
				>::OpRlwinm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130828 "powerpc.tcc"
				>(code, addr, "rlwinm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130845 "powerpc.tcc"
				>
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 130850 "powerpc.tcc"
				>::OpRlwnm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130854 "powerpc.tcc"
				>(code, addr, "rlwnm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130871 "powerpc.tcc"
				>
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 130876 "powerpc.tcc"
				>::OpSlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130880 "powerpc.tcc"
				>(code, addr, "slw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130895 "powerpc.tcc"
				>
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 130900 "powerpc.tcc"
				>::OpSraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130904 "powerpc.tcc"
				>(code, addr, "sraw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130919 "powerpc.tcc"
				>
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 130924 "powerpc.tcc"
				>::OpSrawi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130928 "powerpc.tcc"
				>(code, addr, "srawi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130943 "powerpc.tcc"
				>
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 130948 "powerpc.tcc"
				>::OpSrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130952 "powerpc.tcc"
				>(code, addr, "srw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130967 "powerpc.tcc"
				>
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 130972 "powerpc.tcc"
				>::OpFadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130976 "powerpc.tcc"
				>(code, addr, "fadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130991 "powerpc.tcc"
				>
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 130996 "powerpc.tcc"
				>::OpFadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131000 "powerpc.tcc"
				>(code, addr, "fadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131015 "powerpc.tcc"
				>
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 131020 "powerpc.tcc"
				>::OpFdiv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131024 "powerpc.tcc"
				>(code, addr, "fdiv")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131039 "powerpc.tcc"
				>
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 131044 "powerpc.tcc"
				>::OpFdivs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131048 "powerpc.tcc"
				>(code, addr, "fdivs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131063 "powerpc.tcc"
				>
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 131068 "powerpc.tcc"
				>::OpFmul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131072 "powerpc.tcc"
				>(code, addr, "fmul")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131087 "powerpc.tcc"
				>
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 131092 "powerpc.tcc"
				>::OpFmuls(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131096 "powerpc.tcc"
				>(code, addr, "fmuls")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131111 "powerpc.tcc"
				>
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 131116 "powerpc.tcc"
				>::OpFres(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131120 "powerpc.tcc"
				>(code, addr, "fres")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131134 "powerpc.tcc"
				>
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 131139 "powerpc.tcc"
				>::OpFrsqrte(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131143 "powerpc.tcc"
				>(code, addr, "frsqrte")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131157 "powerpc.tcc"
				>
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 131162 "powerpc.tcc"
				>::OpFsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131166 "powerpc.tcc"
				>(code, addr, "fsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131181 "powerpc.tcc"
				>
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131186 "powerpc.tcc"
				>::OpFsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131190 "powerpc.tcc"
				>(code, addr, "fsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131205 "powerpc.tcc"
				>
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 131210 "powerpc.tcc"
				>::OpFsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131214 "powerpc.tcc"
				>(code, addr, "fsel")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131230 "powerpc.tcc"
				>
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 131235 "powerpc.tcc"
				>::OpFsqrt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131239 "powerpc.tcc"
				>(code, addr, "fsqrt")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131253 "powerpc.tcc"
				>
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 131258 "powerpc.tcc"
				>::OpFsqrts(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131262 "powerpc.tcc"
				>(code, addr, "fsqrts")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131276 "powerpc.tcc"
				>
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131281 "powerpc.tcc"
				>::OpFmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131285 "powerpc.tcc"
				>(code, addr, "fmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131301 "powerpc.tcc"
				>
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131306 "powerpc.tcc"
				>::OpFmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131310 "powerpc.tcc"
				>(code, addr, "fmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131326 "powerpc.tcc"
				>
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131331 "powerpc.tcc"
				>::OpFmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131335 "powerpc.tcc"
				>(code, addr, "fmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131351 "powerpc.tcc"
				>
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131356 "powerpc.tcc"
				>::OpFmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131360 "powerpc.tcc"
				>(code, addr, "fmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131376 "powerpc.tcc"
				>
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131381 "powerpc.tcc"
				>::OpFnmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131385 "powerpc.tcc"
				>(code, addr, "fnmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131401 "powerpc.tcc"
				>
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131406 "powerpc.tcc"
				>::OpFnmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131410 "powerpc.tcc"
				>(code, addr, "fnmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131426 "powerpc.tcc"
				>
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131431 "powerpc.tcc"
				>::OpFnmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131435 "powerpc.tcc"
				>(code, addr, "fnmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131451 "powerpc.tcc"
				>
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131456 "powerpc.tcc"
				>::OpFnmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131460 "powerpc.tcc"
				>(code, addr, "fnmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131476 "powerpc.tcc"
				>
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 131481 "powerpc.tcc"
				>::OpFcmpo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131485 "powerpc.tcc"
				>(code, addr, "fcmpo")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131499 "powerpc.tcc"
				>
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 131504 "powerpc.tcc"
				>::OpFcmpu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131508 "powerpc.tcc"
				>(code, addr, "fcmpu")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131522 "powerpc.tcc"
				>
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 131527 "powerpc.tcc"
				>::OpFctiw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131531 "powerpc.tcc"
				>(code, addr, "fctiw")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131545 "powerpc.tcc"
				>
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 131550 "powerpc.tcc"
				>::OpFctiwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131554 "powerpc.tcc"
				>(code, addr, "fctiwz")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131568 "powerpc.tcc"
				>
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 131573 "powerpc.tcc"
				>::OpFrsp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131577 "powerpc.tcc"
				>(code, addr, "frsp")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131591 "powerpc.tcc"
				>
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 131596 "powerpc.tcc"
				>::OpFabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131600 "powerpc.tcc"
				>(code, addr, "fabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131614 "powerpc.tcc"
				>
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 131619 "powerpc.tcc"
				>::OpFmr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131623 "powerpc.tcc"
				>(code, addr, "fmr")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131637 "powerpc.tcc"
				>
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 131642 "powerpc.tcc"
				>::OpFnabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131646 "powerpc.tcc"
				>(code, addr, "fnabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131660 "powerpc.tcc"
				>
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 131665 "powerpc.tcc"
				>::OpFneg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131669 "powerpc.tcc"
				>(code, addr, "fneg")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131683 "powerpc.tcc"
				>
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 131688 "powerpc.tcc"
				>::OpMcrfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131692 "powerpc.tcc"
				>(code, addr, "mcrfs")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131705 "powerpc.tcc"
				>
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 131710 "powerpc.tcc"
				>::OpMffs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131714 "powerpc.tcc"
				>(code, addr, "mffs")
				{
					fd = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131727 "powerpc.tcc"
				>
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 131732 "powerpc.tcc"
				>::OpMtfsb0(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131736 "powerpc.tcc"
				>(code, addr, "mtfsb0")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131749 "powerpc.tcc"
				>
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 131754 "powerpc.tcc"
				>::OpMtfsb1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131758 "powerpc.tcc"
				>(code, addr, "mtfsb1")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131771 "powerpc.tcc"
				>
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 131776 "powerpc.tcc"
				>::OpMtfsf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131780 "powerpc.tcc"
				>(code, addr, "mtfsf")
				{
					fm = ((code >> 17) & 0xff);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131794 "powerpc.tcc"
				>
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 131799 "powerpc.tcc"
				>::OpMtfsfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131803 "powerpc.tcc"
				>(code, addr, "mtfsfi")
				{
					crfD = ((code >> 23) & 0x7);
					imm = ((code >> 12) & 0xf);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131817 "powerpc.tcc"
				>
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 131822 "powerpc.tcc"
				>::OpB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131826 "powerpc.tcc"
				>(code, addr, "b")
				{
					li = (((((int32_t)(code >> 2)) & 0xffffff) << 8) >> 8) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131840 "powerpc.tcc"
				>
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 131845 "powerpc.tcc"
				>::OpBc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131849 "powerpc.tcc"
				>(code, addr, "bc")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					bd = (((((int32_t)(code >> 2)) & 0x3fff) << 18) >> 18) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131865 "powerpc.tcc"
				>
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 131870 "powerpc.tcc"
				>::OpBcctr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131874 "powerpc.tcc"
				>(code, addr, "bcctr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131888 "powerpc.tcc"
				>
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 131893 "powerpc.tcc"
				>::OpBclr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131897 "powerpc.tcc"
				>(code, addr, "bclr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131911 "powerpc.tcc"
				>
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 131916 "powerpc.tcc"
				>::OpCrand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131920 "powerpc.tcc"
				>(code, addr, "crand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131934 "powerpc.tcc"
				>
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 131939 "powerpc.tcc"
				>::OpCrandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131943 "powerpc.tcc"
				>(code, addr, "crandc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131957 "powerpc.tcc"
				>
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 131962 "powerpc.tcc"
				>::OpCreqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131966 "powerpc.tcc"
				>(code, addr, "creqv")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131980 "powerpc.tcc"
				>
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 131985 "powerpc.tcc"
				>::OpCrnand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131989 "powerpc.tcc"
				>(code, addr, "crnand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132003 "powerpc.tcc"
				>
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 132008 "powerpc.tcc"
				>::OpCrnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132012 "powerpc.tcc"
				>(code, addr, "crnor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132026 "powerpc.tcc"
				>
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 132031 "powerpc.tcc"
				>::OpCror(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132035 "powerpc.tcc"
				>(code, addr, "cror")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132049 "powerpc.tcc"
				>
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 132054 "powerpc.tcc"
				>::OpCrorc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132058 "powerpc.tcc"
				>(code, addr, "crorc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132072 "powerpc.tcc"
				>
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 132077 "powerpc.tcc"
				>::OpCrxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132081 "powerpc.tcc"
				>(code, addr, "crxor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132095 "powerpc.tcc"
				>
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 132100 "powerpc.tcc"
				>::OpMcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132104 "powerpc.tcc"
				>(code, addr, "mcrf")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132117 "powerpc.tcc"
				>
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 132122 "powerpc.tcc"
				>::OpLbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132126 "powerpc.tcc"
				>(code, addr, "lbz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132140 "powerpc.tcc"
				>
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 132145 "powerpc.tcc"
				>::OpLbzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132149 "powerpc.tcc"
				>(code, addr, "lbzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132163 "powerpc.tcc"
				>
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 132168 "powerpc.tcc"
				>::OpLbzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132172 "powerpc.tcc"
				>(code, addr, "lbzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132186 "powerpc.tcc"
				>
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 132191 "powerpc.tcc"
				>::OpLbzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132195 "powerpc.tcc"
				>(code, addr, "lbzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132209 "powerpc.tcc"
				>
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 132214 "powerpc.tcc"
				>::OpLha(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132218 "powerpc.tcc"
				>(code, addr, "lha")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132232 "powerpc.tcc"
				>
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 132237 "powerpc.tcc"
				>::OpLhau(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132241 "powerpc.tcc"
				>(code, addr, "lhau")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132255 "powerpc.tcc"
				>
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 132260 "powerpc.tcc"
				>::OpLhaux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132264 "powerpc.tcc"
				>(code, addr, "lhaux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132278 "powerpc.tcc"
				>
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 132283 "powerpc.tcc"
				>::OpLhax(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132287 "powerpc.tcc"
				>(code, addr, "lhax")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132301 "powerpc.tcc"
				>
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 132306 "powerpc.tcc"
				>::OpLhz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132310 "powerpc.tcc"
				>(code, addr, "lhz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132324 "powerpc.tcc"
				>
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 132329 "powerpc.tcc"
				>::OpLhzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132333 "powerpc.tcc"
				>(code, addr, "lhzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132347 "powerpc.tcc"
				>
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 132352 "powerpc.tcc"
				>::OpLhzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132356 "powerpc.tcc"
				>(code, addr, "lhzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132370 "powerpc.tcc"
				>
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 132375 "powerpc.tcc"
				>::OpLhzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132379 "powerpc.tcc"
				>(code, addr, "lhzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132393 "powerpc.tcc"
				>
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 132398 "powerpc.tcc"
				>::OpLwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132402 "powerpc.tcc"
				>(code, addr, "lwz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132416 "powerpc.tcc"
				>
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 132421 "powerpc.tcc"
				>::OpLwzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132425 "powerpc.tcc"
				>(code, addr, "lwzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132439 "powerpc.tcc"
				>
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 132444 "powerpc.tcc"
				>::OpLwzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132448 "powerpc.tcc"
				>(code, addr, "lwzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132462 "powerpc.tcc"
				>
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 132467 "powerpc.tcc"
				>::OpLwzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132471 "powerpc.tcc"
				>(code, addr, "lwzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132485 "powerpc.tcc"
				>
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 132490 "powerpc.tcc"
				>::OpStb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132494 "powerpc.tcc"
				>(code, addr, "stb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132508 "powerpc.tcc"
				>
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 132513 "powerpc.tcc"
				>::OpStbu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132517 "powerpc.tcc"
				>(code, addr, "stbu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132531 "powerpc.tcc"
				>
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 132536 "powerpc.tcc"
				>::OpStbux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132540 "powerpc.tcc"
				>(code, addr, "stbux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132554 "powerpc.tcc"
				>
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 132559 "powerpc.tcc"
				>::OpStbx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132563 "powerpc.tcc"
				>(code, addr, "stbx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132577 "powerpc.tcc"
				>
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 132582 "powerpc.tcc"
				>::OpSth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132586 "powerpc.tcc"
				>(code, addr, "sth")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132600 "powerpc.tcc"
				>
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 132605 "powerpc.tcc"
				>::OpSthu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132609 "powerpc.tcc"
				>(code, addr, "sthu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132623 "powerpc.tcc"
				>
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 132628 "powerpc.tcc"
				>::OpSthux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132632 "powerpc.tcc"
				>(code, addr, "sthux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132646 "powerpc.tcc"
				>
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 132651 "powerpc.tcc"
				>::OpSthx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132655 "powerpc.tcc"
				>(code, addr, "sthx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132669 "powerpc.tcc"
				>
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 132674 "powerpc.tcc"
				>::OpStw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132678 "powerpc.tcc"
				>(code, addr, "stw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132692 "powerpc.tcc"
				>
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 132697 "powerpc.tcc"
				>::OpStwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132701 "powerpc.tcc"
				>(code, addr, "stwu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132715 "powerpc.tcc"
				>
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 132720 "powerpc.tcc"
				>::OpStwux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132724 "powerpc.tcc"
				>(code, addr, "stwux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132738 "powerpc.tcc"
				>
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 132743 "powerpc.tcc"
				>::OpStwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132747 "powerpc.tcc"
				>(code, addr, "stwx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132761 "powerpc.tcc"
				>
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132766 "powerpc.tcc"
				>::OpLhbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132770 "powerpc.tcc"
				>(code, addr, "lhbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132784 "powerpc.tcc"
				>
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132789 "powerpc.tcc"
				>::OpLwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132793 "powerpc.tcc"
				>(code, addr, "lwbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132807 "powerpc.tcc"
				>
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132812 "powerpc.tcc"
				>::OpSthbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132816 "powerpc.tcc"
				>(code, addr, "sthbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132830 "powerpc.tcc"
				>
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132835 "powerpc.tcc"
				>::OpStwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132839 "powerpc.tcc"
				>(code, addr, "stwbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132853 "powerpc.tcc"
				>
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 132858 "powerpc.tcc"
				>::OpLswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132862 "powerpc.tcc"
				>(code, addr, "lswi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132876 "powerpc.tcc"
				>
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 132881 "powerpc.tcc"
				>::OpLswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132885 "powerpc.tcc"
				>(code, addr, "lswx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132899 "powerpc.tcc"
				>
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 132904 "powerpc.tcc"
				>::OpStswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132908 "powerpc.tcc"
				>(code, addr, "stswi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132922 "powerpc.tcc"
				>
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 132927 "powerpc.tcc"
				>::OpStswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132931 "powerpc.tcc"
				>(code, addr, "stswx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132945 "powerpc.tcc"
				>
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 132950 "powerpc.tcc"
				>::OpLmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132954 "powerpc.tcc"
				>(code, addr, "lmw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132968 "powerpc.tcc"
				>
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 132973 "powerpc.tcc"
				>::OpStmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132977 "powerpc.tcc"
				>(code, addr, "stmw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132991 "powerpc.tcc"
				>
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 132996 "powerpc.tcc"
				>::OpLfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133000 "powerpc.tcc"
				>(code, addr, "lfd")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133014 "powerpc.tcc"
				>
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 133019 "powerpc.tcc"
				>::OpLfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133023 "powerpc.tcc"
				>(code, addr, "lfdu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133037 "powerpc.tcc"
				>
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 133042 "powerpc.tcc"
				>::OpLfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133046 "powerpc.tcc"
				>(code, addr, "lfdux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133060 "powerpc.tcc"
				>
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133065 "powerpc.tcc"
				>::OpLfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133069 "powerpc.tcc"
				>(code, addr, "lfdx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133083 "powerpc.tcc"
				>
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 133088 "powerpc.tcc"
				>::OpLfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133092 "powerpc.tcc"
				>(code, addr, "lfs")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133106 "powerpc.tcc"
				>
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133111 "powerpc.tcc"
				>::OpLfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133115 "powerpc.tcc"
				>(code, addr, "lfsu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133129 "powerpc.tcc"
				>
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133134 "powerpc.tcc"
				>::OpLfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133138 "powerpc.tcc"
				>(code, addr, "lfsux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133152 "powerpc.tcc"
				>
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133157 "powerpc.tcc"
				>::OpLfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133161 "powerpc.tcc"
				>(code, addr, "lfsx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133175 "powerpc.tcc"
				>
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 133180 "powerpc.tcc"
				>::OpStfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133184 "powerpc.tcc"
				>(code, addr, "stfd")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133198 "powerpc.tcc"
				>
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 133203 "powerpc.tcc"
				>::OpStfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133207 "powerpc.tcc"
				>(code, addr, "stfdu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133221 "powerpc.tcc"
				>
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 133226 "powerpc.tcc"
				>::OpStfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133230 "powerpc.tcc"
				>(code, addr, "stfdux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133244 "powerpc.tcc"
				>
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133249 "powerpc.tcc"
				>::OpStfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133253 "powerpc.tcc"
				>(code, addr, "stfdx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133267 "powerpc.tcc"
				>
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 133272 "powerpc.tcc"
				>::OpStfiwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133276 "powerpc.tcc"
				>(code, addr, "stfiwx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133290 "powerpc.tcc"
				>
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 133295 "powerpc.tcc"
				>::OpStfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133299 "powerpc.tcc"
				>(code, addr, "stfs")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133313 "powerpc.tcc"
				>
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133318 "powerpc.tcc"
				>::OpStfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133322 "powerpc.tcc"
				>(code, addr, "stfsu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133336 "powerpc.tcc"
				>
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133341 "powerpc.tcc"
				>::OpStfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133345 "powerpc.tcc"
				>(code, addr, "stfsux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133359 "powerpc.tcc"
				>
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133364 "powerpc.tcc"
				>::OpStfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133368 "powerpc.tcc"
				>(code, addr, "stfsx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133382 "powerpc.tcc"
				>
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 133387 "powerpc.tcc"
				>::OpDcba(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133391 "powerpc.tcc"
				>(code, addr, "dcba")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133404 "powerpc.tcc"
				>
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 133409 "powerpc.tcc"
				>::OpDcbf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133413 "powerpc.tcc"
				>(code, addr, "dcbf")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133426 "powerpc.tcc"
				>
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133431 "powerpc.tcc"
				>::OpDcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133435 "powerpc.tcc"
				>(code, addr, "dcbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133448 "powerpc.tcc"
				>
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 133453 "powerpc.tcc"
				>::OpDcbst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133457 "powerpc.tcc"
				>(code, addr, "dcbst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133470 "powerpc.tcc"
				>
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 133475 "powerpc.tcc"
				>::OpDcbt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133479 "powerpc.tcc"
				>(code, addr, "dcbt")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133492 "powerpc.tcc"
				>
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 133497 "powerpc.tcc"
				>::OpDcbtst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133501 "powerpc.tcc"
				>(code, addr, "dcbtst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133514 "powerpc.tcc"
				>
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 133519 "powerpc.tcc"
				>::OpDcbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133523 "powerpc.tcc"
				>(code, addr, "dcbz")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133536 "powerpc.tcc"
				>
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133541 "powerpc.tcc"
				>::OpIcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133545 "powerpc.tcc"
				>(code, addr, "icbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133558 "powerpc.tcc"
				>
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 133563 "powerpc.tcc"
				>::OpTlbia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133567 "powerpc.tcc"
				>(code, addr, "tlbia")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133578 "powerpc.tcc"
				>
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 133583 "powerpc.tcc"
				>::OpTlbie(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133587 "powerpc.tcc"
				>(code, addr, "tlbie")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133599 "powerpc.tcc"
				>
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 133604 "powerpc.tcc"
				>::OpTlbsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133608 "powerpc.tcc"
				>(code, addr, "tlbsync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133619 "powerpc.tcc"
				>
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 133624 "powerpc.tcc"
				>::OpTlbld(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133628 "powerpc.tcc"
				>(code, addr, "tlbld")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133640 "powerpc.tcc"
				>
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 133645 "powerpc.tcc"
				>::OpTlbli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133649 "powerpc.tcc"
				>(code, addr, "tlbli")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133661 "powerpc.tcc"
				>
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 133666 "powerpc.tcc"
				>::OpEciwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133670 "powerpc.tcc"
				>(code, addr, "eciwx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133684 "powerpc.tcc"
				>
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 133689 "powerpc.tcc"
				>::OpEcowx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133693 "powerpc.tcc"
				>(code, addr, "ecowx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133707 "powerpc.tcc"
				>
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 133712 "powerpc.tcc"
				>::OpEieio(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133716 "powerpc.tcc"
				>(code, addr, "eieio")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133727 "powerpc.tcc"
				>
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 133732 "powerpc.tcc"
				>::OpIsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133736 "powerpc.tcc"
				>(code, addr, "isync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133747 "powerpc.tcc"
				>
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 133752 "powerpc.tcc"
				>::OpLwarx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133756 "powerpc.tcc"
				>(code, addr, "lwarx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133770 "powerpc.tcc"
				>
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 133775 "powerpc.tcc"
				>::OpStwcx_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133779 "powerpc.tcc"
				>(code, addr, "stwcx_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133793 "powerpc.tcc"
				>
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 133798 "powerpc.tcc"
				>::OpSync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133802 "powerpc.tcc"
				>(code, addr, "sync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133813 "powerpc.tcc"
				>
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 133818 "powerpc.tcc"
				>::OpSc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133822 "powerpc.tcc"
				>(code, addr, "sc")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133833 "powerpc.tcc"
				>
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 133838 "powerpc.tcc"
				>::OpRfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133842 "powerpc.tcc"
				>(code, addr, "rfi")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133853 "powerpc.tcc"
				>
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 133858 "powerpc.tcc"
				>::OpTw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133862 "powerpc.tcc"
				>(code, addr, "tw")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133876 "powerpc.tcc"
				>
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 133881 "powerpc.tcc"
				>::OpTwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133885 "powerpc.tcc"
				>(code, addr, "twi")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133899 "powerpc.tcc"
				>
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 133904 "powerpc.tcc"
				>::OpMcrxr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133908 "powerpc.tcc"
				>(code, addr, "mcrxr")
				{
					crfD = ((code >> 23) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133920 "powerpc.tcc"
				>
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 133925 "powerpc.tcc"
				>::OpMfcr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133929 "powerpc.tcc"
				>(code, addr, "mfcr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133941 "powerpc.tcc"
				>
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 133946 "powerpc.tcc"
				>::OpMfmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133950 "powerpc.tcc"
				>(code, addr, "mfmsr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133962 "powerpc.tcc"
				>
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 133967 "powerpc.tcc"
				>::OpMfspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133971 "powerpc.tcc"
				>(code, addr, "mfspr")
				{
					rd = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133984 "powerpc.tcc"
				>
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 133989 "powerpc.tcc"
				>::OpMtspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133993 "powerpc.tcc"
				>(code, addr, "mtspr")
				{
					rs = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134006 "powerpc.tcc"
				>
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 134011 "powerpc.tcc"
				>::OpMftb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134015 "powerpc.tcc"
				>(code, addr, "mftb")
				{
					rd = ((code >> 21) & 0x1f);
					tbr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134028 "powerpc.tcc"
				>
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 134033 "powerpc.tcc"
				>::OpMtcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134037 "powerpc.tcc"
				>(code, addr, "mtcrf")
				{
					rs = ((code >> 21) & 0x1f);
					crm = ((code >> 12) & 0xff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134050 "powerpc.tcc"
				>
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 134055 "powerpc.tcc"
				>::OpMtmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134059 "powerpc.tcc"
				>(code, addr, "mtmsr")
				{
					rs = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134071 "powerpc.tcc"
				>
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 134076 "powerpc.tcc"
				>::OpMfsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134080 "powerpc.tcc"
				>(code, addr, "mfsr")
				{
					rd = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134093 "powerpc.tcc"
				>
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134098 "powerpc.tcc"
				>::OpMfsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134102 "powerpc.tcc"
				>(code, addr, "mfsrin")
				{
					rd = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134115 "powerpc.tcc"
				>
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 134120 "powerpc.tcc"
				>::OpMtsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134124 "powerpc.tcc"
				>(code, addr, "mtsr")
				{
					rs = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134137 "powerpc.tcc"
				>
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134142 "powerpc.tcc"
				>::OpMtsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134146 "powerpc.tcc"
				>(code, addr, "mtsrin")
				{
					rs = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134159 "powerpc.tcc"
				>
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 134164 "powerpc.tcc"
				>::OpDss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134168 "powerpc.tcc"
				>(code, addr, "dss")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134180 "powerpc.tcc"
				>
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 134185 "powerpc.tcc"
				>::OpDssall(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134189 "powerpc.tcc"
				>(code, addr, "dssall")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134201 "powerpc.tcc"
				>
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 134206 "powerpc.tcc"
				>::OpDst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134210 "powerpc.tcc"
				>(code, addr, "dst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134224 "powerpc.tcc"
				>
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 134229 "powerpc.tcc"
				>::OpDstst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134233 "powerpc.tcc"
				>(code, addr, "dstst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134247 "powerpc.tcc"
				>
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 134252 "powerpc.tcc"
				>::OpDststt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134256 "powerpc.tcc"
				>(code, addr, "dststt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134270 "powerpc.tcc"
				>
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 134275 "powerpc.tcc"
				>::OpDstt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134279 "powerpc.tcc"
				>(code, addr, "dstt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134293 "powerpc.tcc"
				>
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134298 "powerpc.tcc"
				>::OpLvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134302 "powerpc.tcc"
				>(code, addr, "lvebx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134316 "powerpc.tcc"
				>
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134321 "powerpc.tcc"
				>::OpLvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134325 "powerpc.tcc"
				>(code, addr, "lvehx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134339 "powerpc.tcc"
				>
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134344 "powerpc.tcc"
				>::OpLvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134348 "powerpc.tcc"
				>(code, addr, "lvewx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134362 "powerpc.tcc"
				>
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 134367 "powerpc.tcc"
				>::OpLvsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134371 "powerpc.tcc"
				>(code, addr, "lvsl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134385 "powerpc.tcc"
				>
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 134390 "powerpc.tcc"
				>::OpLvsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134394 "powerpc.tcc"
				>(code, addr, "lvsr")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134408 "powerpc.tcc"
				>
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 134413 "powerpc.tcc"
				>::OpLvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134417 "powerpc.tcc"
				>(code, addr, "lvx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134431 "powerpc.tcc"
				>
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134436 "powerpc.tcc"
				>::OpLvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134440 "powerpc.tcc"
				>(code, addr, "lvxl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134454 "powerpc.tcc"
				>
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134459 "powerpc.tcc"
				>::OpMfvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134463 "powerpc.tcc"
				>(code, addr, "mfvscr")
				{
					vd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134475 "powerpc.tcc"
				>
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134480 "powerpc.tcc"
				>::OpMtvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134484 "powerpc.tcc"
				>(code, addr, "mtvscr")
				{
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134496 "powerpc.tcc"
				>
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134501 "powerpc.tcc"
				>::OpStvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134505 "powerpc.tcc"
				>(code, addr, "stvebx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134519 "powerpc.tcc"
				>
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134524 "powerpc.tcc"
				>::OpStvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134528 "powerpc.tcc"
				>(code, addr, "stvehx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134542 "powerpc.tcc"
				>
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134547 "powerpc.tcc"
				>::OpStvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134551 "powerpc.tcc"
				>(code, addr, "stvewx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134565 "powerpc.tcc"
				>
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 134570 "powerpc.tcc"
				>::OpStvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134574 "powerpc.tcc"
				>(code, addr, "stvx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134588 "powerpc.tcc"
				>
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134593 "powerpc.tcc"
				>::OpStvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134597 "powerpc.tcc"
				>(code, addr, "stvxl")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134611 "powerpc.tcc"
				>
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 134616 "powerpc.tcc"
				>::OpVaddcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134620 "powerpc.tcc"
				>(code, addr, "vaddcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134634 "powerpc.tcc"
				>
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 134639 "powerpc.tcc"
				>::OpVaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134643 "powerpc.tcc"
				>(code, addr, "vaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134657 "powerpc.tcc"
				>
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 134662 "powerpc.tcc"
				>::OpVaddsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134666 "powerpc.tcc"
				>(code, addr, "vaddsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134680 "powerpc.tcc"
				>
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 134685 "powerpc.tcc"
				>::OpVaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134689 "powerpc.tcc"
				>(code, addr, "vaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134703 "powerpc.tcc"
				>
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 134708 "powerpc.tcc"
				>::OpVaddsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134712 "powerpc.tcc"
				>(code, addr, "vaddsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134726 "powerpc.tcc"
				>
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 134731 "powerpc.tcc"
				>::OpVaddubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134735 "powerpc.tcc"
				>(code, addr, "vaddubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134749 "powerpc.tcc"
				>
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 134754 "powerpc.tcc"
				>::OpVaddubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134758 "powerpc.tcc"
				>(code, addr, "vaddubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134772 "powerpc.tcc"
				>
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 134777 "powerpc.tcc"
				>::OpVadduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134781 "powerpc.tcc"
				>(code, addr, "vadduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134795 "powerpc.tcc"
				>
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 134800 "powerpc.tcc"
				>::OpVadduhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134804 "powerpc.tcc"
				>(code, addr, "vadduhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134818 "powerpc.tcc"
				>
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 134823 "powerpc.tcc"
				>::OpVadduwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134827 "powerpc.tcc"
				>(code, addr, "vadduwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134841 "powerpc.tcc"
				>
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 134846 "powerpc.tcc"
				>::OpVadduws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134850 "powerpc.tcc"
				>(code, addr, "vadduws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134864 "powerpc.tcc"
				>
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 134869 "powerpc.tcc"
				>::OpVand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134873 "powerpc.tcc"
				>(code, addr, "vand")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134887 "powerpc.tcc"
				>
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 134892 "powerpc.tcc"
				>::OpVandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134896 "powerpc.tcc"
				>(code, addr, "vandc")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134910 "powerpc.tcc"
				>
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 134915 "powerpc.tcc"
				>::OpVavgsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134919 "powerpc.tcc"
				>(code, addr, "vavgsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134933 "powerpc.tcc"
				>
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 134938 "powerpc.tcc"
				>::OpVavgsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134942 "powerpc.tcc"
				>(code, addr, "vavgsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134956 "powerpc.tcc"
				>
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 134961 "powerpc.tcc"
				>::OpVavgsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134965 "powerpc.tcc"
				>(code, addr, "vavgsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134979 "powerpc.tcc"
				>
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 134984 "powerpc.tcc"
				>::OpVavgub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134988 "powerpc.tcc"
				>(code, addr, "vavgub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135002 "powerpc.tcc"
				>
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 135007 "powerpc.tcc"
				>::OpVavguh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135011 "powerpc.tcc"
				>(code, addr, "vavguh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135025 "powerpc.tcc"
				>
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 135030 "powerpc.tcc"
				>::OpVavguw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135034 "powerpc.tcc"
				>(code, addr, "vavguw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135048 "powerpc.tcc"
				>
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 135053 "powerpc.tcc"
				>::OpVcfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135057 "powerpc.tcc"
				>(code, addr, "vcfsx")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135071 "powerpc.tcc"
				>
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 135076 "powerpc.tcc"
				>::OpVcfux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135080 "powerpc.tcc"
				>(code, addr, "vcfux")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135094 "powerpc.tcc"
				>
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 135099 "powerpc.tcc"
				>::OpVcmpbfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135103 "powerpc.tcc"
				>(code, addr, "vcmpbfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135118 "powerpc.tcc"
				>
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 135123 "powerpc.tcc"
				>::OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135127 "powerpc.tcc"
				>(code, addr, "vcmpeqfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135142 "powerpc.tcc"
				>
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 135147 "powerpc.tcc"
				>::OpVcmpequb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135151 "powerpc.tcc"
				>(code, addr, "vcmpequb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135166 "powerpc.tcc"
				>
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 135171 "powerpc.tcc"
				>::OpVcmpequh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135175 "powerpc.tcc"
				>(code, addr, "vcmpequh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135190 "powerpc.tcc"
				>
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 135195 "powerpc.tcc"
				>::OpVcmpequw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135199 "powerpc.tcc"
				>(code, addr, "vcmpequw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135214 "powerpc.tcc"
				>
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 135219 "powerpc.tcc"
				>::OpVcmpgefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135223 "powerpc.tcc"
				>(code, addr, "vcmpgefp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135238 "powerpc.tcc"
				>
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 135243 "powerpc.tcc"
				>::OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135247 "powerpc.tcc"
				>(code, addr, "vcmpgtfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135262 "powerpc.tcc"
				>
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 135267 "powerpc.tcc"
				>::OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135271 "powerpc.tcc"
				>(code, addr, "vcmpgtsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135286 "powerpc.tcc"
				>
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 135291 "powerpc.tcc"
				>::OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135295 "powerpc.tcc"
				>(code, addr, "vcmpgtsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135310 "powerpc.tcc"
				>
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 135315 "powerpc.tcc"
				>::OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135319 "powerpc.tcc"
				>(code, addr, "vcmpgtsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135334 "powerpc.tcc"
				>
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 135339 "powerpc.tcc"
				>::OpVcmpgtub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135343 "powerpc.tcc"
				>(code, addr, "vcmpgtub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135358 "powerpc.tcc"
				>
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 135363 "powerpc.tcc"
				>::OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135367 "powerpc.tcc"
				>(code, addr, "vcmpgtuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135382 "powerpc.tcc"
				>
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 135387 "powerpc.tcc"
				>::OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135391 "powerpc.tcc"
				>(code, addr, "vcmpgtuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135406 "powerpc.tcc"
				>
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 135411 "powerpc.tcc"
				>::OpVctsxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135415 "powerpc.tcc"
				>(code, addr, "vctsxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135429 "powerpc.tcc"
				>
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 135434 "powerpc.tcc"
				>::OpVctuxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135438 "powerpc.tcc"
				>(code, addr, "vctuxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135452 "powerpc.tcc"
				>
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 135457 "powerpc.tcc"
				>::OpVexptefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135461 "powerpc.tcc"
				>(code, addr, "vexptefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135474 "powerpc.tcc"
				>
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 135479 "powerpc.tcc"
				>::OpVlogefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135483 "powerpc.tcc"
				>(code, addr, "vlogefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135496 "powerpc.tcc"
				>
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 135501 "powerpc.tcc"
				>::OpVmaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135505 "powerpc.tcc"
				>(code, addr, "vmaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135520 "powerpc.tcc"
				>
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 135525 "powerpc.tcc"
				>::OpVmaxfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135529 "powerpc.tcc"
				>(code, addr, "vmaxfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135543 "powerpc.tcc"
				>
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 135548 "powerpc.tcc"
				>::OpVmaxsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135552 "powerpc.tcc"
				>(code, addr, "vmaxsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135566 "powerpc.tcc"
				>
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 135571 "powerpc.tcc"
				>::OpVmaxsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135575 "powerpc.tcc"
				>(code, addr, "vmaxsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135589 "powerpc.tcc"
				>
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 135594 "powerpc.tcc"
				>::OpVmaxsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135598 "powerpc.tcc"
				>(code, addr, "vmaxsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135612 "powerpc.tcc"
				>
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 135617 "powerpc.tcc"
				>::OpVmaxub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135621 "powerpc.tcc"
				>(code, addr, "vmaxub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135635 "powerpc.tcc"
				>
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 135640 "powerpc.tcc"
				>::OpVmaxuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135644 "powerpc.tcc"
				>(code, addr, "vmaxuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135658 "powerpc.tcc"
				>
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 135663 "powerpc.tcc"
				>::OpVmaxuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135667 "powerpc.tcc"
				>(code, addr, "vmaxuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135681 "powerpc.tcc"
				>
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135686 "powerpc.tcc"
				>::OpVmhaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135690 "powerpc.tcc"
				>(code, addr, "vmhaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135705 "powerpc.tcc"
				>
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135710 "powerpc.tcc"
				>::OpVmhraddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135714 "powerpc.tcc"
				>(code, addr, "vmhraddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135729 "powerpc.tcc"
				>
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 135734 "powerpc.tcc"
				>::OpVminfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135738 "powerpc.tcc"
				>(code, addr, "vminfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135752 "powerpc.tcc"
				>
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 135757 "powerpc.tcc"
				>::OpVminsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135761 "powerpc.tcc"
				>(code, addr, "vminsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135775 "powerpc.tcc"
				>
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 135780 "powerpc.tcc"
				>::OpVminsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135784 "powerpc.tcc"
				>(code, addr, "vminsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135798 "powerpc.tcc"
				>
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 135803 "powerpc.tcc"
				>::OpVminsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135807 "powerpc.tcc"
				>(code, addr, "vminsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135821 "powerpc.tcc"
				>
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 135826 "powerpc.tcc"
				>::OpVminub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135830 "powerpc.tcc"
				>(code, addr, "vminub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135844 "powerpc.tcc"
				>
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 135849 "powerpc.tcc"
				>::OpVminuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135853 "powerpc.tcc"
				>(code, addr, "vminuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135867 "powerpc.tcc"
				>
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 135872 "powerpc.tcc"
				>::OpVminuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135876 "powerpc.tcc"
				>(code, addr, "vminuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135890 "powerpc.tcc"
				>
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 135895 "powerpc.tcc"
				>::OpVmladduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135899 "powerpc.tcc"
				>(code, addr, "vmladduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135914 "powerpc.tcc"
				>
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 135919 "powerpc.tcc"
				>::OpVmrghb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135923 "powerpc.tcc"
				>(code, addr, "vmrghb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135937 "powerpc.tcc"
				>
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 135942 "powerpc.tcc"
				>::OpVmrghh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135946 "powerpc.tcc"
				>(code, addr, "vmrghh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135960 "powerpc.tcc"
				>
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 135965 "powerpc.tcc"
				>::OpVmrghw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135969 "powerpc.tcc"
				>(code, addr, "vmrghw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135983 "powerpc.tcc"
				>
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 135988 "powerpc.tcc"
				>::OpVmrglb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135992 "powerpc.tcc"
				>(code, addr, "vmrglb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136006 "powerpc.tcc"
				>
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 136011 "powerpc.tcc"
				>::OpVmrglh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136015 "powerpc.tcc"
				>(code, addr, "vmrglh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136029 "powerpc.tcc"
				>
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 136034 "powerpc.tcc"
				>::OpVmrglw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136038 "powerpc.tcc"
				>(code, addr, "vmrglw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136052 "powerpc.tcc"
				>
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 136057 "powerpc.tcc"
				>::OpVmsummbm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136061 "powerpc.tcc"
				>(code, addr, "vmsummbm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136076 "powerpc.tcc"
				>
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 136081 "powerpc.tcc"
				>::OpVmsumshm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136085 "powerpc.tcc"
				>(code, addr, "vmsumshm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136100 "powerpc.tcc"
				>
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 136105 "powerpc.tcc"
				>::OpVmsumshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136109 "powerpc.tcc"
				>(code, addr, "vmsumshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136124 "powerpc.tcc"
				>
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 136129 "powerpc.tcc"
				>::OpVmsumubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136133 "powerpc.tcc"
				>(code, addr, "vmsumubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136148 "powerpc.tcc"
				>
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 136153 "powerpc.tcc"
				>::OpVmsumuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136157 "powerpc.tcc"
				>(code, addr, "vmsumuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136172 "powerpc.tcc"
				>
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 136177 "powerpc.tcc"
				>::OpVmsumuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136181 "powerpc.tcc"
				>(code, addr, "vmsumuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136196 "powerpc.tcc"
				>
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 136201 "powerpc.tcc"
				>::OpVmulesb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136205 "powerpc.tcc"
				>(code, addr, "vmulesb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136219 "powerpc.tcc"
				>
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 136224 "powerpc.tcc"
				>::OpVmulesh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136228 "powerpc.tcc"
				>(code, addr, "vmulesh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136242 "powerpc.tcc"
				>
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 136247 "powerpc.tcc"
				>::OpVmuleub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136251 "powerpc.tcc"
				>(code, addr, "vmuleub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136265 "powerpc.tcc"
				>
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 136270 "powerpc.tcc"
				>::OpVmuleuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136274 "powerpc.tcc"
				>(code, addr, "vmuleuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136288 "powerpc.tcc"
				>
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 136293 "powerpc.tcc"
				>::OpVmulosb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136297 "powerpc.tcc"
				>(code, addr, "vmulosb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136311 "powerpc.tcc"
				>
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 136316 "powerpc.tcc"
				>::OpVmulosh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136320 "powerpc.tcc"
				>(code, addr, "vmulosh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136334 "powerpc.tcc"
				>
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 136339 "powerpc.tcc"
				>::OpVmuloub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136343 "powerpc.tcc"
				>(code, addr, "vmuloub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136357 "powerpc.tcc"
				>
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 136362 "powerpc.tcc"
				>::OpVmulouh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136366 "powerpc.tcc"
				>(code, addr, "vmulouh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136380 "powerpc.tcc"
				>
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 136385 "powerpc.tcc"
				>::OpVnmsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136389 "powerpc.tcc"
				>(code, addr, "vnmsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136404 "powerpc.tcc"
				>
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 136409 "powerpc.tcc"
				>::OpVnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136413 "powerpc.tcc"
				>(code, addr, "vnor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136427 "powerpc.tcc"
				>
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 136432 "powerpc.tcc"
				>::OpVor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136436 "powerpc.tcc"
				>(code, addr, "vor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136450 "powerpc.tcc"
				>
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 136455 "powerpc.tcc"
				>::OpVperm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136459 "powerpc.tcc"
				>(code, addr, "vperm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136474 "powerpc.tcc"
				>
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 136479 "powerpc.tcc"
				>::OpVpkpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136483 "powerpc.tcc"
				>(code, addr, "vpkpx")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136497 "powerpc.tcc"
				>
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 136502 "powerpc.tcc"
				>::OpVpkshss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136506 "powerpc.tcc"
				>(code, addr, "vpkshss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136520 "powerpc.tcc"
				>
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 136525 "powerpc.tcc"
				>::OpVpkshus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136529 "powerpc.tcc"
				>(code, addr, "vpkshus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136543 "powerpc.tcc"
				>
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 136548 "powerpc.tcc"
				>::OpVpkswss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136552 "powerpc.tcc"
				>(code, addr, "vpkswss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136566 "powerpc.tcc"
				>
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 136571 "powerpc.tcc"
				>::OpVpkswus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136575 "powerpc.tcc"
				>(code, addr, "vpkswus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136589 "powerpc.tcc"
				>
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 136594 "powerpc.tcc"
				>::OpVpkuhum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136598 "powerpc.tcc"
				>(code, addr, "vpkuhum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136612 "powerpc.tcc"
				>
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 136617 "powerpc.tcc"
				>::OpVpkuhus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136621 "powerpc.tcc"
				>(code, addr, "vpkuhus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136635 "powerpc.tcc"
				>
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 136640 "powerpc.tcc"
				>::OpVpkuwum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136644 "powerpc.tcc"
				>(code, addr, "vpkuwum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136658 "powerpc.tcc"
				>
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 136663 "powerpc.tcc"
				>::OpVpkuwus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136667 "powerpc.tcc"
				>(code, addr, "vpkuwus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136681 "powerpc.tcc"
				>
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 136686 "powerpc.tcc"
				>::OpVrefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136690 "powerpc.tcc"
				>(code, addr, "vrefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136703 "powerpc.tcc"
				>
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 136708 "powerpc.tcc"
				>::OpVrfim(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136712 "powerpc.tcc"
				>(code, addr, "vrfim")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136725 "powerpc.tcc"
				>
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 136730 "powerpc.tcc"
				>::OpVrfin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136734 "powerpc.tcc"
				>(code, addr, "vrfin")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136747 "powerpc.tcc"
				>
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 136752 "powerpc.tcc"
				>::OpVrfip(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136756 "powerpc.tcc"
				>(code, addr, "vrfip")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136769 "powerpc.tcc"
				>
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 136774 "powerpc.tcc"
				>::OpVrfiz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136778 "powerpc.tcc"
				>(code, addr, "vrfiz")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136791 "powerpc.tcc"
				>
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 136796 "powerpc.tcc"
				>::OpVrlb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136800 "powerpc.tcc"
				>(code, addr, "vrlb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136814 "powerpc.tcc"
				>
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 136819 "powerpc.tcc"
				>::OpVrlh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136823 "powerpc.tcc"
				>(code, addr, "vrlh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136837 "powerpc.tcc"
				>
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 136842 "powerpc.tcc"
				>::OpVrlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136846 "powerpc.tcc"
				>(code, addr, "vrlw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136860 "powerpc.tcc"
				>
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 136865 "powerpc.tcc"
				>::OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136869 "powerpc.tcc"
				>(code, addr, "vrsqrtefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136882 "powerpc.tcc"
				>
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 136887 "powerpc.tcc"
				>::OpVsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136891 "powerpc.tcc"
				>(code, addr, "vsel")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136906 "powerpc.tcc"
				>
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 136911 "powerpc.tcc"
				>::OpVsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136915 "powerpc.tcc"
				>(code, addr, "vsl")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136929 "powerpc.tcc"
				>
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 136934 "powerpc.tcc"
				>::OpVslb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136938 "powerpc.tcc"
				>(code, addr, "vslb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136952 "powerpc.tcc"
				>
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 136957 "powerpc.tcc"
				>::OpVsldoi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136961 "powerpc.tcc"
				>(code, addr, "vsldoi")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					sh = ((code >> 6) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136976 "powerpc.tcc"
				>
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 136981 "powerpc.tcc"
				>::OpVslh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136985 "powerpc.tcc"
				>(code, addr, "vslh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136999 "powerpc.tcc"
				>
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 137004 "powerpc.tcc"
				>::OpVslo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137008 "powerpc.tcc"
				>(code, addr, "vslo")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137022 "powerpc.tcc"
				>
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 137027 "powerpc.tcc"
				>::OpVslw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137031 "powerpc.tcc"
				>(code, addr, "vslw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137045 "powerpc.tcc"
				>
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 137050 "powerpc.tcc"
				>::OpVspltb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137054 "powerpc.tcc"
				>(code, addr, "vspltb")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137068 "powerpc.tcc"
				>
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 137073 "powerpc.tcc"
				>::OpVsplth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137077 "powerpc.tcc"
				>(code, addr, "vsplth")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137091 "powerpc.tcc"
				>
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 137096 "powerpc.tcc"
				>::OpVspltisb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137100 "powerpc.tcc"
				>(code, addr, "vspltisb")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137114 "powerpc.tcc"
				>
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 137119 "powerpc.tcc"
				>::OpVspltish(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137123 "powerpc.tcc"
				>(code, addr, "vspltish")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137137 "powerpc.tcc"
				>
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 137142 "powerpc.tcc"
				>::OpVspltisw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137146 "powerpc.tcc"
				>(code, addr, "vspltisw")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137160 "powerpc.tcc"
				>
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 137165 "powerpc.tcc"
				>::OpVspltw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137169 "powerpc.tcc"
				>(code, addr, "vspltw")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137183 "powerpc.tcc"
				>
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 137188 "powerpc.tcc"
				>::OpVsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137192 "powerpc.tcc"
				>(code, addr, "vsr")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137206 "powerpc.tcc"
				>
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 137211 "powerpc.tcc"
				>::OpVsrab(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137215 "powerpc.tcc"
				>(code, addr, "vsrab")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137229 "powerpc.tcc"
				>
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 137234 "powerpc.tcc"
				>::OpVsrah(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137238 "powerpc.tcc"
				>(code, addr, "vsrah")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137252 "powerpc.tcc"
				>
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 137257 "powerpc.tcc"
				>::OpVsraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137261 "powerpc.tcc"
				>(code, addr, "vsraw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137275 "powerpc.tcc"
				>
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 137280 "powerpc.tcc"
				>::OpVsrb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137284 "powerpc.tcc"
				>(code, addr, "vsrb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137298 "powerpc.tcc"
				>
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 137303 "powerpc.tcc"
				>::OpVsrh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137307 "powerpc.tcc"
				>(code, addr, "vsrh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137321 "powerpc.tcc"
				>
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 137326 "powerpc.tcc"
				>::OpVsro(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137330 "powerpc.tcc"
				>(code, addr, "vsro")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137344 "powerpc.tcc"
				>
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 137349 "powerpc.tcc"
				>::OpVsrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137353 "powerpc.tcc"
				>(code, addr, "vsrw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137367 "powerpc.tcc"
				>
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 137372 "powerpc.tcc"
				>::OpVsubcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137376 "powerpc.tcc"
				>(code, addr, "vsubcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137390 "powerpc.tcc"
				>
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 137395 "powerpc.tcc"
				>::OpVsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137399 "powerpc.tcc"
				>(code, addr, "vsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137413 "powerpc.tcc"
				>
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 137418 "powerpc.tcc"
				>::OpVsubsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137422 "powerpc.tcc"
				>(code, addr, "vsubsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137436 "powerpc.tcc"
				>
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 137441 "powerpc.tcc"
				>::OpVsubshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137445 "powerpc.tcc"
				>(code, addr, "vsubshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137459 "powerpc.tcc"
				>
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 137464 "powerpc.tcc"
				>::OpVsubsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137468 "powerpc.tcc"
				>(code, addr, "vsubsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137482 "powerpc.tcc"
				>
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 137487 "powerpc.tcc"
				>::OpVsububm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137491 "powerpc.tcc"
				>(code, addr, "vsububm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137505 "powerpc.tcc"
				>
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 137510 "powerpc.tcc"
				>::OpVsububs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137514 "powerpc.tcc"
				>(code, addr, "vsububs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137528 "powerpc.tcc"
				>
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 137533 "powerpc.tcc"
				>::OpVsubuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137537 "powerpc.tcc"
				>(code, addr, "vsubuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137551 "powerpc.tcc"
				>
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 137556 "powerpc.tcc"
				>::OpVsubuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137560 "powerpc.tcc"
				>(code, addr, "vsubuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137574 "powerpc.tcc"
				>
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 137579 "powerpc.tcc"
				>::OpVsubuwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137583 "powerpc.tcc"
				>(code, addr, "vsubuwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137597 "powerpc.tcc"
				>
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 137602 "powerpc.tcc"
				>::OpVsubuws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137606 "powerpc.tcc"
				>(code, addr, "vsubuws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137620 "powerpc.tcc"
				>
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 137625 "powerpc.tcc"
				>::OpVsumsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137629 "powerpc.tcc"
				>(code, addr, "vsumsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137643 "powerpc.tcc"
				>
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 137648 "powerpc.tcc"
				>::OpVsum2sws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137652 "powerpc.tcc"
				>(code, addr, "vsum2sws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137666 "powerpc.tcc"
				>
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 137671 "powerpc.tcc"
				>::OpVsum4sbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137675 "powerpc.tcc"
				>(code, addr, "vsum4sbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137689 "powerpc.tcc"
				>
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 137694 "powerpc.tcc"
				>::OpVsum4shs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137698 "powerpc.tcc"
				>(code, addr, "vsum4shs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137712 "powerpc.tcc"
				>
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 137717 "powerpc.tcc"
				>::OpVsum4ubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137721 "powerpc.tcc"
				>(code, addr, "vsum4ubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137735 "powerpc.tcc"
				>
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 137740 "powerpc.tcc"
				>::OpVupkhpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137744 "powerpc.tcc"
				>(code, addr, "vupkhpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137757 "powerpc.tcc"
				>
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 137762 "powerpc.tcc"
				>::OpVupkhsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137766 "powerpc.tcc"
				>(code, addr, "vupkhsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137779 "powerpc.tcc"
				>
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 137784 "powerpc.tcc"
				>::OpVupkhsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137788 "powerpc.tcc"
				>(code, addr, "vupkhsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137801 "powerpc.tcc"
				>
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 137806 "powerpc.tcc"
				>::OpVupklpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137810 "powerpc.tcc"
				>(code, addr, "vupklpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137823 "powerpc.tcc"
				>
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 137828 "powerpc.tcc"
				>::OpVupklsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137832 "powerpc.tcc"
				>(code, addr, "vupklsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137845 "powerpc.tcc"
				>
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 137850 "powerpc.tcc"
				>::OpVupklsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137854 "powerpc.tcc"
				>(code, addr, "vupklsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137867 "powerpc.tcc"
				>
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 137872 "powerpc.tcc"
				>::OpVxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137876 "powerpc.tcc"
				>(code, addr, "vxor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137890 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137895 "powerpc.tcc"
				>::DecodeMapPage(typename CONFIG::address_t key)
				{
					this->key = key;
					memset(operation, 0, sizeof(operation));
					next = 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137909 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137914 "powerpc.tcc"
				>::~DecodeMapPage()
				{
					unsigned int idx;
					for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
					delete operation[idx];
				}

				template <
#line 38 "ppc.isa"
				class
#line 137925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137928 "powerpc.tcc"
				>
				DecodeTableEntry<
#line 38 "ppc.isa"
				CONFIG
#line 137933 "powerpc.tcc"
				>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137937 "powerpc.tcc"
				> *(*decode)(CodeType, typename CONFIG::address_t))
				{
					this->opcode = opcode;
					this->opcode_mask = opcode_mask;
					this->decode = decode;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137951 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 137956 "powerpc.tcc"
				>::Decoder()
				{
					little_endian = false;
					mru_page = 0;
					memset(decode_hash_table, 0, sizeof(decode_hash_table));
					if(
#line 967 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137965 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137969 "powerpc.tcc"
					>(0x100004c4UL, 0xfc0007ffUL, DecodeOpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 137973 "powerpc.tcc"
					>));
					if(
#line 961 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137978 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137982 "powerpc.tcc"
					>(0x100002ceUL, 0xfc1f07ffUL, DecodeOpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 137986 "powerpc.tcc"
					>));
					if(
#line 955 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137991 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137995 "powerpc.tcc"
					>(0x1000028eUL, 0xfc1f07ffUL, DecodeOpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 137999 "powerpc.tcc"
					>));
					if(
#line 949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138004 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138008 "powerpc.tcc"
					>(0x100003ceUL, 0xfc1f07ffUL, DecodeOpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 138012 "powerpc.tcc"
					>));
					if(
#line 943 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138017 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138021 "powerpc.tcc"
					>(0x1000024eUL, 0xfc1f07ffUL, DecodeOpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 138025 "powerpc.tcc"
					>));
					if(
#line 937 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138030 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138034 "powerpc.tcc"
					>(0x1000020eUL, 0xfc1f07ffUL, DecodeOpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 138038 "powerpc.tcc"
					>));
					if(
#line 931 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138043 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138047 "powerpc.tcc"
					>(0x1000034eUL, 0xfc1f07ffUL, DecodeOpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 138051 "powerpc.tcc"
					>));
					if(
#line 925 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138056 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138060 "powerpc.tcc"
					>(0x10000608UL, 0xfc0007ffUL, DecodeOpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 138064 "powerpc.tcc"
					>));
					if(
#line 919 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138069 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138073 "powerpc.tcc"
					>(0x10000648UL, 0xfc0007ffUL, DecodeOpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 138077 "powerpc.tcc"
					>));
					if(
#line 913 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138082 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138086 "powerpc.tcc"
					>(0x10000708UL, 0xfc0007ffUL, DecodeOpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 138090 "powerpc.tcc"
					>));
					if(
#line 907 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138095 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138099 "powerpc.tcc"
					>(0x10000688UL, 0xfc0007ffUL, DecodeOpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 138103 "powerpc.tcc"
					>));
					if(
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138108 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138112 "powerpc.tcc"
					>(0x10000788UL, 0xfc0007ffUL, DecodeOpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 138116 "powerpc.tcc"
					>));
					if(
#line 895 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138121 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138125 "powerpc.tcc"
					>(0x10000680UL, 0xfc0007ffUL, DecodeOpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 138129 "powerpc.tcc"
					>));
					if(
#line 889 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138134 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138138 "powerpc.tcc"
					>(0x10000480UL, 0xfc0007ffUL, DecodeOpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 138142 "powerpc.tcc"
					>));
					if(
#line 883 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138147 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138151 "powerpc.tcc"
					>(0x10000640UL, 0xfc0007ffUL, DecodeOpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138155 "powerpc.tcc"
					>));
					if(
#line 877 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138160 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138164 "powerpc.tcc"
					>(0x10000440UL, 0xfc0007ffUL, DecodeOpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138168 "powerpc.tcc"
					>));
					if(
#line 871 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138173 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138177 "powerpc.tcc"
					>(0x10000600UL, 0xfc0007ffUL, DecodeOpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 138181 "powerpc.tcc"
					>));
					if(
#line 865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138186 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138190 "powerpc.tcc"
					>(0x10000400UL, 0xfc0007ffUL, DecodeOpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 138194 "powerpc.tcc"
					>));
					if(
#line 859 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138199 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138203 "powerpc.tcc"
					>(0x10000780UL, 0xfc0007ffUL, DecodeOpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 138207 "powerpc.tcc"
					>));
					if(
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138212 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138216 "powerpc.tcc"
					>(0x10000740UL, 0xfc0007ffUL, DecodeOpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 138220 "powerpc.tcc"
					>));
					if(
#line 847 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138225 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138229 "powerpc.tcc"
					>(0x10000700UL, 0xfc0007ffUL, DecodeOpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 138233 "powerpc.tcc"
					>));
					if(
#line 841 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138238 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138242 "powerpc.tcc"
					>(0x1000004aUL, 0xfc0007ffUL, DecodeOpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138246 "powerpc.tcc"
					>));
					if(
#line 835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138251 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138255 "powerpc.tcc"
					>(0x10000580UL, 0xfc0007ffUL, DecodeOpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 138259 "powerpc.tcc"
					>));
					if(
#line 829 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138264 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138268 "powerpc.tcc"
					>(0x10000284UL, 0xfc0007ffUL, DecodeOpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 138272 "powerpc.tcc"
					>));
					if(
#line 823 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138277 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138281 "powerpc.tcc"
					>(0x1000044cUL, 0xfc0007ffUL, DecodeOpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 138285 "powerpc.tcc"
					>));
					if(
#line 817 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138290 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138294 "powerpc.tcc"
					>(0x10000244UL, 0xfc0007ffUL, DecodeOpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 138298 "powerpc.tcc"
					>));
					if(
#line 811 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138303 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138307 "powerpc.tcc"
					>(0x10000204UL, 0xfc0007ffUL, DecodeOpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 138311 "powerpc.tcc"
					>));
					if(
#line 805 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138316 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138320 "powerpc.tcc"
					>(0x10000384UL, 0xfc0007ffUL, DecodeOpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 138324 "powerpc.tcc"
					>));
					if(
#line 799 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138329 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138333 "powerpc.tcc"
					>(0x10000344UL, 0xfc0007ffUL, DecodeOpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 138337 "powerpc.tcc"
					>));
					if(
#line 793 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138342 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138346 "powerpc.tcc"
					>(0x10000304UL, 0xfc0007ffUL, DecodeOpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 138350 "powerpc.tcc"
					>));
					if(
#line 787 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138355 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138359 "powerpc.tcc"
					>(0x100002c4UL, 0xfc0007ffUL, DecodeOpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 138363 "powerpc.tcc"
					>));
					if(
#line 781 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138368 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138372 "powerpc.tcc"
					>(0x1000028cUL, 0xfc0007ffUL, DecodeOpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 138376 "powerpc.tcc"
					>));
					if(
#line 775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138381 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138385 "powerpc.tcc"
					>(0x1000038cUL, 0xfc0007ffUL, DecodeOpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 138389 "powerpc.tcc"
					>));
					if(
#line 769 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138394 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138398 "powerpc.tcc"
					>(0x1000034cUL, 0xfc0007ffUL, DecodeOpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 138402 "powerpc.tcc"
					>));
					if(
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138407 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138411 "powerpc.tcc"
					>(0x1000030cUL, 0xfc0007ffUL, DecodeOpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 138415 "powerpc.tcc"
					>));
					if(
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138420 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138424 "powerpc.tcc"
					>(0x1000024cUL, 0xfc0007ffUL, DecodeOpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 138428 "powerpc.tcc"
					>));
					if(
#line 751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138433 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138437 "powerpc.tcc"
					>(0x1000020cUL, 0xfc0007ffUL, DecodeOpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 138441 "powerpc.tcc"
					>));
					if(
#line 745 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138446 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138450 "powerpc.tcc"
					>(0x10000184UL, 0xfc0007ffUL, DecodeOpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 138454 "powerpc.tcc"
					>));
					if(
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138459 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138463 "powerpc.tcc"
					>(0x1000040cUL, 0xfc0007ffUL, DecodeOpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 138467 "powerpc.tcc"
					>));
					if(
#line 733 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138472 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138476 "powerpc.tcc"
					>(0x10000144UL, 0xfc0007ffUL, DecodeOpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 138480 "powerpc.tcc"
					>));
					if(
#line 727 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138485 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138489 "powerpc.tcc"
					>(0x1000002cUL, 0xfc00043fUL, DecodeOpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 138493 "powerpc.tcc"
					>));
					if(
#line 721 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138498 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138502 "powerpc.tcc"
					>(0x10000104UL, 0xfc0007ffUL, DecodeOpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 138506 "powerpc.tcc"
					>));
					if(
#line 715 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138511 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138515 "powerpc.tcc"
					>(0x100001c4UL, 0xfc0007ffUL, DecodeOpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 138519 "powerpc.tcc"
					>));
					if(
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138524 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138528 "powerpc.tcc"
					>(0x1000002aUL, 0xfc00003fUL, DecodeOpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 138532 "powerpc.tcc"
					>));
					if(
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138537 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138541 "powerpc.tcc"
					>(0x1000014aUL, 0xfc1f07ffUL, DecodeOpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 138545 "powerpc.tcc"
					>));
					if(
#line 697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138550 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138554 "powerpc.tcc"
					>(0x10000084UL, 0xfc0007ffUL, DecodeOpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 138558 "powerpc.tcc"
					>));
					if(
#line 691 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138563 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138567 "powerpc.tcc"
					>(0x10000044UL, 0xfc0007ffUL, DecodeOpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 138571 "powerpc.tcc"
					>));
					if(
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138576 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138580 "powerpc.tcc"
					>(0x10000004UL, 0xfc0007ffUL, DecodeOpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 138584 "powerpc.tcc"
					>));
					if(
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138589 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138593 "powerpc.tcc"
					>(0x1000024aUL, 0xfc1f07ffUL, DecodeOpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 138597 "powerpc.tcc"
					>));
					if(
#line 673 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138602 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138606 "powerpc.tcc"
					>(0x1000028aUL, 0xfc1f07ffUL, DecodeOpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 138610 "powerpc.tcc"
					>));
					if(
#line 667 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138615 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138619 "powerpc.tcc"
					>(0x1000020aUL, 0xfc1f07ffUL, DecodeOpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 138623 "powerpc.tcc"
					>));
					if(
#line 661 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138628 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138632 "powerpc.tcc"
					>(0x100002caUL, 0xfc1f07ffUL, DecodeOpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 138636 "powerpc.tcc"
					>));
					if(
#line 655 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138641 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138645 "powerpc.tcc"
					>(0x1000010aUL, 0xfc1f07ffUL, DecodeOpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 138649 "powerpc.tcc"
					>));
					if(
#line 649 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138654 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138658 "powerpc.tcc"
					>(0x100000ceUL, 0xfc0007ffUL, DecodeOpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 138662 "powerpc.tcc"
					>));
					if(
#line 643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138667 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138671 "powerpc.tcc"
					>(0x1000004eUL, 0xfc0007ffUL, DecodeOpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 138675 "powerpc.tcc"
					>));
					if(
#line 637 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138680 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138684 "powerpc.tcc"
					>(0x1000008eUL, 0xfc0007ffUL, DecodeOpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 138688 "powerpc.tcc"
					>));
					if(
#line 631 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138693 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138697 "powerpc.tcc"
					>(0x1000000eUL, 0xfc0007ffUL, DecodeOpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 138701 "powerpc.tcc"
					>));
					if(
#line 625 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138706 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138710 "powerpc.tcc"
					>(0x1000014eUL, 0xfc0007ffUL, DecodeOpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 138714 "powerpc.tcc"
					>));
					if(
#line 619 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138719 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138723 "powerpc.tcc"
					>(0x100001ceUL, 0xfc0007ffUL, DecodeOpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 138727 "powerpc.tcc"
					>));
					if(
#line 613 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138732 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138736 "powerpc.tcc"
					>(0x1000010eUL, 0xfc0007ffUL, DecodeOpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 138740 "powerpc.tcc"
					>));
					if(
#line 607 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138745 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138749 "powerpc.tcc"
					>(0x1000018eUL, 0xfc0007ffUL, DecodeOpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 138753 "powerpc.tcc"
					>));
					if(
#line 601 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138758 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138762 "powerpc.tcc"
					>(0x1000030eUL, 0xfc0007ffUL, DecodeOpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 138766 "powerpc.tcc"
					>));
					if(
#line 595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138771 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138775 "powerpc.tcc"
					>(0x1000002bUL, 0xfc00003fUL, DecodeOpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 138779 "powerpc.tcc"
					>));
					if(
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138784 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138788 "powerpc.tcc"
					>(0x10000484UL, 0xfc0007ffUL, DecodeOpVor<
#line 38 "ppc.isa"
					CONFIG
#line 138792 "powerpc.tcc"
					>));
					if(
#line 583 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138797 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138801 "powerpc.tcc"
					>(0x10000504UL, 0xfc0007ffUL, DecodeOpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 138805 "powerpc.tcc"
					>));
					if(
#line 577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138810 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138814 "powerpc.tcc"
					>(0x1000002fUL, 0xfc00003fUL, DecodeOpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138818 "powerpc.tcc"
					>));
					if(
#line 571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138823 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138827 "powerpc.tcc"
					>(0x10000048UL, 0xfc0007ffUL, DecodeOpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 138831 "powerpc.tcc"
					>));
					if(
#line 565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138836 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138840 "powerpc.tcc"
					>(0x10000008UL, 0xfc0007ffUL, DecodeOpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 138844 "powerpc.tcc"
					>));
					if(
#line 559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138849 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138853 "powerpc.tcc"
					>(0x10000148UL, 0xfc0007ffUL, DecodeOpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 138857 "powerpc.tcc"
					>));
					if(
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138862 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138866 "powerpc.tcc"
					>(0x10000108UL, 0xfc0007ffUL, DecodeOpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 138870 "powerpc.tcc"
					>));
					if(
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138875 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138879 "powerpc.tcc"
					>(0x10000248UL, 0xfc0007ffUL, DecodeOpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 138883 "powerpc.tcc"
					>));
					if(
#line 541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138888 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138892 "powerpc.tcc"
					>(0x10000208UL, 0xfc0007ffUL, DecodeOpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 138896 "powerpc.tcc"
					>));
					if(
#line 535 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138901 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138905 "powerpc.tcc"
					>(0x10000348UL, 0xfc0007ffUL, DecodeOpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 138909 "powerpc.tcc"
					>));
					if(
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138914 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138918 "powerpc.tcc"
					>(0x10000308UL, 0xfc0007ffUL, DecodeOpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 138922 "powerpc.tcc"
					>));
					if(
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138927 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138931 "powerpc.tcc"
					>(0x10000027UL, 0xfc00003fUL, DecodeOpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138935 "powerpc.tcc"
					>));
					if(
#line 517 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138940 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138944 "powerpc.tcc"
					>(0x10000026UL, 0xfc00003fUL, DecodeOpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138948 "powerpc.tcc"
					>));
					if(
#line 511 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138953 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138957 "powerpc.tcc"
					>(0x10000024UL, 0xfc00003fUL, DecodeOpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 138961 "powerpc.tcc"
					>));
					if(
#line 505 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138966 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138970 "powerpc.tcc"
					>(0x10000029UL, 0xfc00003fUL, DecodeOpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 138974 "powerpc.tcc"
					>));
					if(
#line 499 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138979 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138983 "powerpc.tcc"
					>(0x10000028UL, 0xfc00003fUL, DecodeOpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 138987 "powerpc.tcc"
					>));
					if(
#line 493 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138992 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138996 "powerpc.tcc"
					>(0x10000025UL, 0xfc00003fUL, DecodeOpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 139000 "powerpc.tcc"
					>));
					if(
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139005 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139009 "powerpc.tcc"
					>(0x1000018cUL, 0xfc0007ffUL, DecodeOpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 139013 "powerpc.tcc"
					>));
					if(
#line 481 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139018 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139022 "powerpc.tcc"
					>(0x1000014cUL, 0xfc0007ffUL, DecodeOpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 139026 "powerpc.tcc"
					>));
					if(
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139031 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139035 "powerpc.tcc"
					>(0x1000010cUL, 0xfc0007ffUL, DecodeOpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 139039 "powerpc.tcc"
					>));
					if(
#line 469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139044 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139048 "powerpc.tcc"
					>(0x1000008cUL, 0xfc0007ffUL, DecodeOpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 139052 "powerpc.tcc"
					>));
					if(
#line 463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139057 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139061 "powerpc.tcc"
					>(0x1000004cUL, 0xfc0007ffUL, DecodeOpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 139065 "powerpc.tcc"
					>));
					if(
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139070 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139074 "powerpc.tcc"
					>(0x1000000cUL, 0xfc0007ffUL, DecodeOpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 139078 "powerpc.tcc"
					>));
					if(
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139083 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139087 "powerpc.tcc"
					>(0x10000022UL, 0xfc00003fUL, DecodeOpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139091 "powerpc.tcc"
					>));
					if(
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139096 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139100 "powerpc.tcc"
					>(0x10000282UL, 0xfc0007ffUL, DecodeOpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 139104 "powerpc.tcc"
					>));
					if(
#line 439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139109 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139113 "powerpc.tcc"
					>(0x10000242UL, 0xfc0007ffUL, DecodeOpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 139117 "powerpc.tcc"
					>));
					if(
#line 433 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139122 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139126 "powerpc.tcc"
					>(0x10000202UL, 0xfc0007ffUL, DecodeOpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 139130 "powerpc.tcc"
					>));
					if(
#line 427 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139135 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139139 "powerpc.tcc"
					>(0x10000382UL, 0xfc0007ffUL, DecodeOpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 139143 "powerpc.tcc"
					>));
					if(
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139148 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139152 "powerpc.tcc"
					>(0x10000342UL, 0xfc0007ffUL, DecodeOpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 139156 "powerpc.tcc"
					>));
					if(
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139161 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139165 "powerpc.tcc"
					>(0x10000302UL, 0xfc0007ffUL, DecodeOpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 139169 "powerpc.tcc"
					>));
					if(
#line 409 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139174 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139178 "powerpc.tcc"
					>(0x1000044aUL, 0xfc0007ffUL, DecodeOpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 139182 "powerpc.tcc"
					>));
					if(
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139187 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139191 "powerpc.tcc"
					>(0x10000021UL, 0xfc00003fUL, DecodeOpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139195 "powerpc.tcc"
					>));
					if(
#line 397 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139200 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139204 "powerpc.tcc"
					>(0x10000020UL, 0xfc00003fUL, DecodeOpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139208 "powerpc.tcc"
					>));
					if(
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139213 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139217 "powerpc.tcc"
					>(0x10000082UL, 0xfc0007ffUL, DecodeOpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 139221 "powerpc.tcc"
					>));
					if(
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139226 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139230 "powerpc.tcc"
					>(0x10000042UL, 0xfc0007ffUL, DecodeOpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 139234 "powerpc.tcc"
					>));
					if(
#line 379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139239 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139243 "powerpc.tcc"
					>(0x10000002UL, 0xfc0007ffUL, DecodeOpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 139247 "powerpc.tcc"
					>));
					if(
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139252 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139256 "powerpc.tcc"
					>(0x10000182UL, 0xfc0007ffUL, DecodeOpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 139260 "powerpc.tcc"
					>));
					if(
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139265 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139269 "powerpc.tcc"
					>(0x10000142UL, 0xfc0007ffUL, DecodeOpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 139273 "powerpc.tcc"
					>));
					if(
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139278 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139282 "powerpc.tcc"
					>(0x10000102UL, 0xfc0007ffUL, DecodeOpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 139286 "powerpc.tcc"
					>));
					if(
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139291 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139295 "powerpc.tcc"
					>(0x1000040aUL, 0xfc0007ffUL, DecodeOpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 139299 "powerpc.tcc"
					>));
					if(
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139304 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139308 "powerpc.tcc"
					>(0x1000002eUL, 0xfc00003fUL, DecodeOpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139312 "powerpc.tcc"
					>));
					if(
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139317 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139321 "powerpc.tcc"
					>(0x100001caUL, 0xfc1f07ffUL, DecodeOpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 139325 "powerpc.tcc"
					>));
					if(
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139330 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139334 "powerpc.tcc"
					>(0x1000018aUL, 0xfc1f07ffUL, DecodeOpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 139338 "powerpc.tcc"
					>));
					if(
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139343 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139347 "powerpc.tcc"
					>(0x1000038aUL, 0xfc0007ffUL, DecodeOpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 139351 "powerpc.tcc"
					>));
					if(
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139356 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139360 "powerpc.tcc"
					>(0x100003caUL, 0xfc0007ffUL, DecodeOpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 139364 "powerpc.tcc"
					>));
					if(
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139369 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139373 "powerpc.tcc"
					>(0x10000286UL, 0xfc0003ffUL, DecodeOpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 139377 "powerpc.tcc"
					>));
					if(
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139382 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139386 "powerpc.tcc"
					>(0x10000246UL, 0xfc0003ffUL, DecodeOpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 139390 "powerpc.tcc"
					>));
					if(
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139395 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139399 "powerpc.tcc"
					>(0x10000206UL, 0xfc0003ffUL, DecodeOpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 139403 "powerpc.tcc"
					>));
					if(
#line 301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139408 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139412 "powerpc.tcc"
					>(0x10000386UL, 0xfc0003ffUL, DecodeOpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 139416 "powerpc.tcc"
					>));
					if(
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139421 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139425 "powerpc.tcc"
					>(0x10000346UL, 0xfc0003ffUL, DecodeOpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 139429 "powerpc.tcc"
					>));
					if(
#line 289 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139434 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139438 "powerpc.tcc"
					>(0x10000306UL, 0xfc0003ffUL, DecodeOpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 139442 "powerpc.tcc"
					>));
					if(
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139447 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139451 "powerpc.tcc"
					>(0x100002c6UL, 0xfc0003ffUL, DecodeOpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 139455 "powerpc.tcc"
					>));
					if(
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139460 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139464 "powerpc.tcc"
					>(0x100001c6UL, 0xfc0003ffUL, DecodeOpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 139468 "powerpc.tcc"
					>));
					if(
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139473 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139477 "powerpc.tcc"
					>(0x10000086UL, 0xfc0003ffUL, DecodeOpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 139481 "powerpc.tcc"
					>));
					if(
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139486 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139490 "powerpc.tcc"
					>(0x10000046UL, 0xfc0003ffUL, DecodeOpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 139494 "powerpc.tcc"
					>));
					if(
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139499 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139503 "powerpc.tcc"
					>(0x10000006UL, 0xfc0003ffUL, DecodeOpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 139507 "powerpc.tcc"
					>));
					if(
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139512 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139516 "powerpc.tcc"
					>(0x100000c6UL, 0xfc0003ffUL, DecodeOpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 139520 "powerpc.tcc"
					>));
					if(
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139525 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139529 "powerpc.tcc"
					>(0x100003c6UL, 0xfc0003ffUL, DecodeOpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 139533 "powerpc.tcc"
					>));
					if(
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139538 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139542 "powerpc.tcc"
					>(0x1000030aUL, 0xfc0007ffUL, DecodeOpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 139546 "powerpc.tcc"
					>));
					if(
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139551 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139555 "powerpc.tcc"
					>(0x1000034aUL, 0xfc0007ffUL, DecodeOpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 139559 "powerpc.tcc"
					>));
					if(
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139564 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139568 "powerpc.tcc"
					>(0x10000482UL, 0xfc0007ffUL, DecodeOpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 139572 "powerpc.tcc"
					>));
					if(
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139577 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139581 "powerpc.tcc"
					>(0x10000442UL, 0xfc0007ffUL, DecodeOpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 139585 "powerpc.tcc"
					>));
					if(
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139590 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139594 "powerpc.tcc"
					>(0x10000402UL, 0xfc0007ffUL, DecodeOpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 139598 "powerpc.tcc"
					>));
					if(
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139603 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139607 "powerpc.tcc"
					>(0x10000582UL, 0xfc0007ffUL, DecodeOpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 139611 "powerpc.tcc"
					>));
					if(
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139616 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139620 "powerpc.tcc"
					>(0x10000542UL, 0xfc0007ffUL, DecodeOpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 139624 "powerpc.tcc"
					>));
					if(
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139629 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139633 "powerpc.tcc"
					>(0x10000502UL, 0xfc0007ffUL, DecodeOpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 139637 "powerpc.tcc"
					>));
					if(
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139642 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139646 "powerpc.tcc"
					>(0x10000444UL, 0xfc0007ffUL, DecodeOpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 139650 "powerpc.tcc"
					>));
					if(
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139655 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139659 "powerpc.tcc"
					>(0x10000404UL, 0xfc0007ffUL, DecodeOpVand<
#line 38 "ppc.isa"
					CONFIG
#line 139663 "powerpc.tcc"
					>));
					if(
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139668 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139672 "powerpc.tcc"
					>(0x10000280UL, 0xfc0007ffUL, DecodeOpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 139676 "powerpc.tcc"
					>));
					if(
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139681 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139685 "powerpc.tcc"
					>(0x10000080UL, 0xfc0007ffUL, DecodeOpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 139689 "powerpc.tcc"
					>));
					if(
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139694 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139698 "powerpc.tcc"
					>(0x10000240UL, 0xfc0007ffUL, DecodeOpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 139702 "powerpc.tcc"
					>));
					if(
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139707 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139711 "powerpc.tcc"
					>(0x10000040UL, 0xfc0007ffUL, DecodeOpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139715 "powerpc.tcc"
					>));
					if(
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139720 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139724 "powerpc.tcc"
					>(0x10000200UL, 0xfc0007ffUL, DecodeOpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 139728 "powerpc.tcc"
					>));
					if(
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139733 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139737 "powerpc.tcc"
					>(0x10000000UL, 0xfc0007ffUL, DecodeOpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 139741 "powerpc.tcc"
					>));
					if(
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139746 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139750 "powerpc.tcc"
					>(0x10000380UL, 0xfc0007ffUL, DecodeOpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 139754 "powerpc.tcc"
					>));
					if(
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139759 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139763 "powerpc.tcc"
					>(0x10000340UL, 0xfc0007ffUL, DecodeOpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139767 "powerpc.tcc"
					>));
					if(
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139772 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139776 "powerpc.tcc"
					>(0x10000300UL, 0xfc0007ffUL, DecodeOpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 139780 "powerpc.tcc"
					>));
					if(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139785 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139789 "powerpc.tcc"
					>(0x1000000aUL, 0xfc0007ffUL, DecodeOpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139793 "powerpc.tcc"
					>));
					if(
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139798 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139802 "powerpc.tcc"
					>(0x10000180UL, 0xfc0007ffUL, DecodeOpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 139806 "powerpc.tcc"
					>));
					if(
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139811 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139815 "powerpc.tcc"
					>(0x7c0003ceUL, 0xfc0007ffUL, DecodeOpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139819 "powerpc.tcc"
					>));
					if(
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139824 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139828 "powerpc.tcc"
					>(0x7c0001ceUL, 0xfc0007ffUL, DecodeOpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 139832 "powerpc.tcc"
					>));
					if(
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139837 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139841 "powerpc.tcc"
					>(0x7c00018eUL, 0xfc0007ffUL, DecodeOpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139845 "powerpc.tcc"
					>));
					if(
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139850 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139854 "powerpc.tcc"
					>(0x7c00014eUL, 0xfc0007ffUL, DecodeOpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139858 "powerpc.tcc"
					>));
					if(
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139863 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139867 "powerpc.tcc"
					>(0x7c00010eUL, 0xfc0007ffUL, DecodeOpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139871 "powerpc.tcc"
					>));
					if(
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139876 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139880 "powerpc.tcc"
					>(0x10000644UL, 0xffff07ffUL, DecodeOpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139884 "powerpc.tcc"
					>));
					if(
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139889 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139893 "powerpc.tcc"
					>(0x10000604UL, 0xfc1fffffUL, DecodeOpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139897 "powerpc.tcc"
					>));
					if(
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139902 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139906 "powerpc.tcc"
					>(0x7c0002ceUL, 0xfc0007ffUL, DecodeOpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139910 "powerpc.tcc"
					>));
					if(
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139915 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139919 "powerpc.tcc"
					>(0x7c0000ceUL, 0xfc0007ffUL, DecodeOpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 139923 "powerpc.tcc"
					>));
					if(
#line 61 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139928 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139932 "powerpc.tcc"
					>(0x7c00004cUL, 0xfc0007ffUL, DecodeOpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 139936 "powerpc.tcc"
					>));
					if(
#line 55 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139941 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139945 "powerpc.tcc"
					>(0x7c00000cUL, 0xfc0007ffUL, DecodeOpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 139949 "powerpc.tcc"
					>));
					if(
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139954 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139958 "powerpc.tcc"
					>(0x7c00008eUL, 0xfc0007ffUL, DecodeOpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139962 "powerpc.tcc"
					>));
					if(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139967 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139971 "powerpc.tcc"
					>(0x7c00004eUL, 0xfc0007ffUL, DecodeOpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139975 "powerpc.tcc"
					>));
					if(
#line 37 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139980 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139984 "powerpc.tcc"
					>(0x7c00000eUL, 0xfc0007ffUL, DecodeOpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139988 "powerpc.tcc"
					>));
					if(
#line 31 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139993 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139997 "powerpc.tcc"
					>(0x7e0002acUL, 0xff8007ffUL, DecodeOpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 140001 "powerpc.tcc"
					>));
					if(
#line 25 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140006 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140010 "powerpc.tcc"
					>(0x7e0002ecUL, 0xff8007ffUL, DecodeOpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 140014 "powerpc.tcc"
					>));
					if(
#line 19 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140019 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140023 "powerpc.tcc"
					>(0x7c0002ecUL, 0xff8007ffUL, DecodeOpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 140027 "powerpc.tcc"
					>));
					if(
#line 13 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140032 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140036 "powerpc.tcc"
					>(0x7c0002acUL, 0xff8007ffUL, DecodeOpDst<
#line 38 "ppc.isa"
					CONFIG
#line 140040 "powerpc.tcc"
					>));
					if(
#line 7 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140045 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140049 "powerpc.tcc"
					>(0x7e00066cUL, 0xff9fffffUL, DecodeOpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 140053 "powerpc.tcc"
					>));
					if(
#line 1 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140058 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140062 "powerpc.tcc"
					>(0x7c00066cUL, 0xff9fffffUL, DecodeOpDss<
#line 38 "ppc.isa"
					CONFIG
#line 140066 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140071 "powerpc.tcc"
					>(0x7c0001e4UL, 0xfc0007feUL, DecodeOpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140075 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140080 "powerpc.tcc"
					>(0x7c0001a4UL, 0xfc0007feUL, DecodeOpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 140084 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140089 "powerpc.tcc"
					>(0x7c000526UL, 0xfc0007feUL, DecodeOpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140093 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140098 "powerpc.tcc"
					>(0x7c0004a6UL, 0xfc0007feUL, DecodeOpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 140102 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140107 "powerpc.tcc"
					>(0x7c000124UL, 0xfc0007feUL, DecodeOpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140111 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140116 "powerpc.tcc"
					>(0x7c000120UL, 0xfc0007feUL, DecodeOpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140120 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140125 "powerpc.tcc"
					>(0x7c0002e6UL, 0xfc0007feUL, DecodeOpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 140129 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140134 "powerpc.tcc"
					>(0x7c0003a6UL, 0xfc0007feUL, DecodeOpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 140138 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140143 "powerpc.tcc"
					>(0x7c0002a6UL, 0xfc0007feUL, DecodeOpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 140147 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140152 "powerpc.tcc"
					>(0x7c0000a6UL, 0xfc0007feUL, DecodeOpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140156 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140161 "powerpc.tcc"
					>(0x7c000026UL, 0xfc0007feUL, DecodeOpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 140165 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140170 "powerpc.tcc"
					>(0x7c000400UL, 0xfc0007feUL, DecodeOpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 140174 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140179 "powerpc.tcc"
					>(0xc000000UL, 0xfc000000UL, DecodeOpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 140183 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140188 "powerpc.tcc"
					>(0x7c000008UL, 0xfc0007feUL, DecodeOpTw<
#line 38 "ppc.isa"
					CONFIG
#line 140192 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140197 "powerpc.tcc"
					>(0x4c000064UL, 0xfc0007feUL, DecodeOpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 140201 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140206 "powerpc.tcc"
					>(0x44000002UL, 0xfc000002UL, DecodeOpSc<
#line 38 "ppc.isa"
					CONFIG
#line 140210 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140215 "powerpc.tcc"
					>(0x7c0004acUL, 0xfc0007feUL, DecodeOpSync<
#line 38 "ppc.isa"
					CONFIG
#line 140219 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140224 "powerpc.tcc"
					>(0x7c00012dUL, 0xfc0007ffUL, DecodeOpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 140228 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140233 "powerpc.tcc"
					>(0x7c000028UL, 0xfc0007feUL, DecodeOpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 140237 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140242 "powerpc.tcc"
					>(0x4c00012cUL, 0xfc0007feUL, DecodeOpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 140246 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140251 "powerpc.tcc"
					>(0x7c0006acUL, 0xfc0007feUL, DecodeOpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 140255 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140260 "powerpc.tcc"
					>(0x7c00036cUL, 0xfc0007feUL, DecodeOpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 140264 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140269 "powerpc.tcc"
					>(0x7c00026cUL, 0xfc0007feUL, DecodeOpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 140273 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140278 "powerpc.tcc"
					>(0x7c0007e4UL, 0xffff07ffUL, DecodeOpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 140282 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140287 "powerpc.tcc"
					>(0x7c0007a4UL, 0xffff07ffUL, DecodeOpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 140291 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140296 "powerpc.tcc"
					>(0x7c00046cUL, 0xfc0007feUL, DecodeOpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 140300 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140305 "powerpc.tcc"
					>(0x7c000264UL, 0xfc0007feUL, DecodeOpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 140309 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140314 "powerpc.tcc"
					>(0x7c0002e4UL, 0xfc0007feUL, DecodeOpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 140318 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140323 "powerpc.tcc"
					>(0x7c0007acUL, 0xfc0007feUL, DecodeOpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140327 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140332 "powerpc.tcc"
					>(0x7c0007ecUL, 0xfc0007feUL, DecodeOpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 140336 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140341 "powerpc.tcc"
					>(0x7c0001ecUL, 0xfc0007feUL, DecodeOpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 140345 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140350 "powerpc.tcc"
					>(0x7c00022cUL, 0xfc0007feUL, DecodeOpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 140354 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140359 "powerpc.tcc"
					>(0x7c00006cUL, 0xfc0007feUL, DecodeOpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 140363 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140368 "powerpc.tcc"
					>(0x7c0003acUL, 0xfc0007feUL, DecodeOpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140372 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140377 "powerpc.tcc"
					>(0x7c0000acUL, 0xfc0007feUL, DecodeOpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 140381 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140386 "powerpc.tcc"
					>(0x7c0005ecUL, 0xfc0007feUL, DecodeOpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 140390 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140395 "powerpc.tcc"
					>(0x7c00052eUL, 0xfc0007feUL, DecodeOpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140399 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140404 "powerpc.tcc"
					>(0x7c00056eUL, 0xfc0007feUL, DecodeOpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140408 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140413 "powerpc.tcc"
					>(0xd4000000UL, 0xfc000000UL, DecodeOpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140417 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140422 "powerpc.tcc"
					>(0xd0000000UL, 0xfc000000UL, DecodeOpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 140426 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140431 "powerpc.tcc"
					>(0x7c0007aeUL, 0xfc0007feUL, DecodeOpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 140435 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140440 "powerpc.tcc"
					>(0x7c0005aeUL, 0xfc0007feUL, DecodeOpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140444 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140449 "powerpc.tcc"
					>(0x7c0005eeUL, 0xfc0007feUL, DecodeOpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140453 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140458 "powerpc.tcc"
					>(0xdc000000UL, 0xfc000000UL, DecodeOpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140462 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140467 "powerpc.tcc"
					>(0xd8000000UL, 0xfc000000UL, DecodeOpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 140471 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140476 "powerpc.tcc"
					>(0x7c00042eUL, 0xfc0007feUL, DecodeOpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140480 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140485 "powerpc.tcc"
					>(0x7c00046eUL, 0xfc0007feUL, DecodeOpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140489 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140494 "powerpc.tcc"
					>(0xc4000000UL, 0xfc000000UL, DecodeOpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140498 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140503 "powerpc.tcc"
					>(0xc0000000UL, 0xfc000000UL, DecodeOpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 140507 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140512 "powerpc.tcc"
					>(0x7c0004aeUL, 0xfc0007feUL, DecodeOpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140516 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140521 "powerpc.tcc"
					>(0x7c0004eeUL, 0xfc0007feUL, DecodeOpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140525 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140530 "powerpc.tcc"
					>(0xcc000000UL, 0xfc000000UL, DecodeOpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140534 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140539 "powerpc.tcc"
					>(0xc8000000UL, 0xfc000000UL, DecodeOpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 140543 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140548 "powerpc.tcc"
					>(0xbc000000UL, 0xfc000000UL, DecodeOpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 140552 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140557 "powerpc.tcc"
					>(0xb8000000UL, 0xfc000000UL, DecodeOpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 140561 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140566 "powerpc.tcc"
					>(0x7c00052aUL, 0xfc0007feUL, DecodeOpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 140570 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140575 "powerpc.tcc"
					>(0x7c0005aaUL, 0xfc0007feUL, DecodeOpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 140579 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140584 "powerpc.tcc"
					>(0x7c00042aUL, 0xfc0007feUL, DecodeOpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 140588 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140593 "powerpc.tcc"
					>(0x7c0004aaUL, 0xfc0007feUL, DecodeOpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 140597 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140602 "powerpc.tcc"
					>(0x7c00052cUL, 0xfc0007feUL, DecodeOpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140606 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140611 "powerpc.tcc"
					>(0x7c00072cUL, 0xfc0007feUL, DecodeOpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140615 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140620 "powerpc.tcc"
					>(0x7c00042cUL, 0xfc0007feUL, DecodeOpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140624 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140629 "powerpc.tcc"
					>(0x7c00062cUL, 0xfc0007feUL, DecodeOpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140633 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140638 "powerpc.tcc"
					>(0x7c00012eUL, 0xfc0007feUL, DecodeOpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 140642 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140647 "powerpc.tcc"
					>(0x7c00016eUL, 0xfc0007feUL, DecodeOpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 140651 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140656 "powerpc.tcc"
					>(0x94000000UL, 0xfc000000UL, DecodeOpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 140660 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140665 "powerpc.tcc"
					>(0x90000000UL, 0xfc000000UL, DecodeOpStw<
#line 38 "ppc.isa"
					CONFIG
#line 140669 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140674 "powerpc.tcc"
					>(0x7c00032eUL, 0xfc0007feUL, DecodeOpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 140678 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140683 "powerpc.tcc"
					>(0x7c00036eUL, 0xfc0007feUL, DecodeOpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 140687 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140692 "powerpc.tcc"
					>(0xb4000000UL, 0xfc000000UL, DecodeOpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 140696 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140701 "powerpc.tcc"
					>(0xb0000000UL, 0xfc000000UL, DecodeOpSth<
#line 38 "ppc.isa"
					CONFIG
#line 140705 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140710 "powerpc.tcc"
					>(0x7c0001aeUL, 0xfc0007feUL, DecodeOpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 140714 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140719 "powerpc.tcc"
					>(0x7c0001eeUL, 0xfc0007feUL, DecodeOpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 140723 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140728 "powerpc.tcc"
					>(0x9c000000UL, 0xfc000000UL, DecodeOpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 140732 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140737 "powerpc.tcc"
					>(0x98000000UL, 0xfc000000UL, DecodeOpStb<
#line 38 "ppc.isa"
					CONFIG
#line 140741 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140746 "powerpc.tcc"
					>(0x7c00002eUL, 0xfc0007feUL, DecodeOpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 140750 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140755 "powerpc.tcc"
					>(0x7c00006eUL, 0xfc0007feUL, DecodeOpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 140759 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140764 "powerpc.tcc"
					>(0x84000000UL, 0xfc000000UL, DecodeOpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 140768 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140773 "powerpc.tcc"
					>(0x80000000UL, 0xfc000000UL, DecodeOpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 140777 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140782 "powerpc.tcc"
					>(0x7c00022eUL, 0xfc0007feUL, DecodeOpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 140786 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140791 "powerpc.tcc"
					>(0x7c00026eUL, 0xfc0007feUL, DecodeOpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 140795 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140800 "powerpc.tcc"
					>(0xa4000000UL, 0xfc000000UL, DecodeOpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 140804 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140809 "powerpc.tcc"
					>(0xa0000000UL, 0xfc000000UL, DecodeOpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 140813 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140818 "powerpc.tcc"
					>(0x7c0002aeUL, 0xfc0007feUL, DecodeOpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 140822 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140827 "powerpc.tcc"
					>(0x7c0002eeUL, 0xfc0007feUL, DecodeOpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 140831 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140836 "powerpc.tcc"
					>(0xac000000UL, 0xfc000000UL, DecodeOpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 140840 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140845 "powerpc.tcc"
					>(0xa8000000UL, 0xfc000000UL, DecodeOpLha<
#line 38 "ppc.isa"
					CONFIG
#line 140849 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140854 "powerpc.tcc"
					>(0x7c0000aeUL, 0xfc0007feUL, DecodeOpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 140858 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140863 "powerpc.tcc"
					>(0x7c0000eeUL, 0xfc0007feUL, DecodeOpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 140867 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140872 "powerpc.tcc"
					>(0x8c000000UL, 0xfc000000UL, DecodeOpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 140876 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140881 "powerpc.tcc"
					>(0x88000000UL, 0xfc000000UL, DecodeOpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 140885 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140890 "powerpc.tcc"
					>(0x4c000000UL, 0xfc0007feUL, DecodeOpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140894 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140899 "powerpc.tcc"
					>(0x4c000182UL, 0xfc0007feUL, DecodeOpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 140903 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140908 "powerpc.tcc"
					>(0x4c000342UL, 0xfc0007feUL, DecodeOpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 140912 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140917 "powerpc.tcc"
					>(0x4c000382UL, 0xfc0007feUL, DecodeOpCror<
#line 38 "ppc.isa"
					CONFIG
#line 140921 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140926 "powerpc.tcc"
					>(0x4c000042UL, 0xfc0007feUL, DecodeOpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 140930 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140935 "powerpc.tcc"
					>(0x4c0001c2UL, 0xfc0007feUL, DecodeOpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 140939 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140944 "powerpc.tcc"
					>(0x4c000242UL, 0xfc0007feUL, DecodeOpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 140948 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140953 "powerpc.tcc"
					>(0x4c000102UL, 0xfc0007feUL, DecodeOpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 140957 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140962 "powerpc.tcc"
					>(0x4c000202UL, 0xfc0007feUL, DecodeOpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 140966 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140971 "powerpc.tcc"
					>(0x4c000020UL, 0xfc0007feUL, DecodeOpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 140975 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140980 "powerpc.tcc"
					>(0x4c000420UL, 0xfc0007feUL, DecodeOpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 140984 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140989 "powerpc.tcc"
					>(0x40000000UL, 0xfc000000UL, DecodeOpBc<
#line 38 "ppc.isa"
					CONFIG
#line 140993 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140998 "powerpc.tcc"
					>(0x48000000UL, 0xfc000000UL, DecodeOpB<
#line 38 "ppc.isa"
					CONFIG
#line 141002 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141007 "powerpc.tcc"
					>(0xfc00010cUL, 0xfc0007feUL, DecodeOpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 141011 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141016 "powerpc.tcc"
					>(0xfc00058eUL, 0xfc0007feUL, DecodeOpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 141020 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141025 "powerpc.tcc"
					>(0xfc00004cUL, 0xfc0007feUL, DecodeOpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 141029 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141034 "powerpc.tcc"
					>(0xfc00008cUL, 0xfc0007feUL, DecodeOpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 141038 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141043 "powerpc.tcc"
					>(0xfc00048eUL, 0xfc0007feUL, DecodeOpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 141047 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141052 "powerpc.tcc"
					>(0xfc000080UL, 0xfc0007feUL, DecodeOpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 141056 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141061 "powerpc.tcc"
					>(0xfc000050UL, 0xfc0007feUL, DecodeOpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 141065 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141070 "powerpc.tcc"
					>(0xfc000110UL, 0xfc0007feUL, DecodeOpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 141074 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141079 "powerpc.tcc"
					>(0xfc000090UL, 0xfc0007feUL, DecodeOpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 141083 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141088 "powerpc.tcc"
					>(0xfc000210UL, 0xfc0007feUL, DecodeOpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 141092 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141097 "powerpc.tcc"
					>(0xfc000018UL, 0xfc0007feUL, DecodeOpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 141101 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141106 "powerpc.tcc"
					>(0xfc00001eUL, 0xfc0007feUL, DecodeOpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 141110 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141115 "powerpc.tcc"
					>(0xfc00001cUL, 0xfc0007feUL, DecodeOpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 141119 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141124 "powerpc.tcc"
					>(0xfc000000UL, 0xfc0007feUL, DecodeOpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 141128 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141133 "powerpc.tcc"
					>(0xfc000040UL, 0xfc0007feUL, DecodeOpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 141137 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141142 "powerpc.tcc"
					>(0xec00003cUL, 0xfc00003eUL, DecodeOpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141146 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141151 "powerpc.tcc"
					>(0xfc00003cUL, 0xfc00003eUL, DecodeOpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141155 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141160 "powerpc.tcc"
					>(0xec00003eUL, 0xfc00003eUL, DecodeOpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141164 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141169 "powerpc.tcc"
					>(0xfc00003eUL, 0xfc00003eUL, DecodeOpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141173 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141178 "powerpc.tcc"
					>(0xec000038UL, 0xfc00003eUL, DecodeOpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141182 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141187 "powerpc.tcc"
					>(0xfc000038UL, 0xfc00003eUL, DecodeOpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141191 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141196 "powerpc.tcc"
					>(0xec00003aUL, 0xfc00003eUL, DecodeOpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141200 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141205 "powerpc.tcc"
					>(0xfc00003aUL, 0xfc00003eUL, DecodeOpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141209 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141214 "powerpc.tcc"
					>(0xec00002cUL, 0xfc00003eUL, DecodeOpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 141218 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141223 "powerpc.tcc"
					>(0xfc00002cUL, 0xfc00003eUL, DecodeOpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 141227 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141232 "powerpc.tcc"
					>(0xfc00002eUL, 0xfc00003eUL, DecodeOpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 141236 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141241 "powerpc.tcc"
					>(0xec000028UL, 0xfc00003eUL, DecodeOpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141245 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141250 "powerpc.tcc"
					>(0xfc000028UL, 0xfc00003eUL, DecodeOpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 141254 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141259 "powerpc.tcc"
					>(0xfc000034UL, 0xfc00003eUL, DecodeOpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 141263 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141268 "powerpc.tcc"
					>(0xec000030UL, 0xfc00003eUL, DecodeOpFres<
#line 38 "ppc.isa"
					CONFIG
#line 141272 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141277 "powerpc.tcc"
					>(0xec000032UL, 0xfc00003eUL, DecodeOpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 141281 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141286 "powerpc.tcc"
					>(0xfc000032UL, 0xfc00003eUL, DecodeOpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 141290 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141295 "powerpc.tcc"
					>(0xec000024UL, 0xfc00003eUL, DecodeOpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 141299 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141304 "powerpc.tcc"
					>(0xfc000024UL, 0xfc00003eUL, DecodeOpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 141308 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141313 "powerpc.tcc"
					>(0xec00002aUL, 0xfc00003eUL, DecodeOpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 141317 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141322 "powerpc.tcc"
					>(0xfc00002aUL, 0xfc00003eUL, DecodeOpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 141326 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141331 "powerpc.tcc"
					>(0x7c000430UL, 0xfc0007feUL, DecodeOpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 141335 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141340 "powerpc.tcc"
					>(0x7c000670UL, 0xfc0007feUL, DecodeOpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 141344 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141349 "powerpc.tcc"
					>(0x7c000630UL, 0xfc0007feUL, DecodeOpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 141353 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141358 "powerpc.tcc"
					>(0x7c000030UL, 0xfc0007feUL, DecodeOpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 141362 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141367 "powerpc.tcc"
					>(0x5c000000UL, 0xfc000000UL, DecodeOpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 141371 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141376 "powerpc.tcc"
					>(0x54000000UL, 0xfc000000UL, DecodeOpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 141380 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141385 "powerpc.tcc"
					>(0x50000000UL, 0xfc000000UL, DecodeOpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 141389 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141394 "powerpc.tcc"
					>(0x6c000000UL, 0xfc000000UL, DecodeOpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 141398 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141403 "powerpc.tcc"
					>(0x68000000UL, 0xfc000000UL, DecodeOpXori<
#line 38 "ppc.isa"
					CONFIG
#line 141407 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141412 "powerpc.tcc"
					>(0x7c000278UL, 0xfc0007feUL, DecodeOpXor<
#line 38 "ppc.isa"
					CONFIG
#line 141416 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141421 "powerpc.tcc"
					>(0x64000000UL, 0xfc000000UL, DecodeOpOris<
#line 38 "ppc.isa"
					CONFIG
#line 141425 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141430 "powerpc.tcc"
					>(0x60000000UL, 0xfc000000UL, DecodeOpOri<
#line 38 "ppc.isa"
					CONFIG
#line 141434 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141439 "powerpc.tcc"
					>(0x7c000338UL, 0xfc0007feUL, DecodeOpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 141443 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141448 "powerpc.tcc"
					>(0x7c000378UL, 0xfc0007feUL, DecodeOpOr<
#line 38 "ppc.isa"
					CONFIG
#line 141452 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141457 "powerpc.tcc"
					>(0x7c0000f8UL, 0xfc0007feUL, DecodeOpNor<
#line 38 "ppc.isa"
					CONFIG
#line 141461 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141466 "powerpc.tcc"
					>(0x7c0003b8UL, 0xfc0007feUL, DecodeOpNand<
#line 38 "ppc.isa"
					CONFIG
#line 141470 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141475 "powerpc.tcc"
					>(0x7c000734UL, 0xfc0007feUL, DecodeOpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 141479 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141484 "powerpc.tcc"
					>(0x7c000774UL, 0xfc0007feUL, DecodeOpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 141488 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141493 "powerpc.tcc"
					>(0x7c000238UL, 0xfc0007feUL, DecodeOpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 141497 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141502 "powerpc.tcc"
					>(0x7c000034UL, 0xfc0007feUL, DecodeOpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 141506 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141511 "powerpc.tcc"
					>(0x74000000UL, 0xfc000000UL, DecodeOpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 141515 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141520 "powerpc.tcc"
					>(0x70000000UL, 0xfc000000UL, DecodeOpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 141524 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141529 "powerpc.tcc"
					>(0x7c000078UL, 0xfc0007feUL, DecodeOpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 141533 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141538 "powerpc.tcc"
					>(0x7c000038UL, 0xfc0007feUL, DecodeOpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 141542 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141547 "powerpc.tcc"
					>(0x28000000UL, 0xfc000000UL, DecodeOpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 141551 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141556 "powerpc.tcc"
					>(0x7c000040UL, 0xfc0007feUL, DecodeOpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 141560 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141565 "powerpc.tcc"
					>(0x2c000000UL, 0xfc000000UL, DecodeOpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 141569 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141574 "powerpc.tcc"
					>(0x7c000000UL, 0xfc0007feUL, DecodeOpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 141578 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141583 "powerpc.tcc"
					>(0x7c000190UL, 0xfc0003feUL, DecodeOpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 141587 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141592 "powerpc.tcc"
					>(0x7c0001d0UL, 0xfc0003feUL, DecodeOpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 141596 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141601 "powerpc.tcc"
					>(0x20000000UL, 0xfc000000UL, DecodeOpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 141605 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141610 "powerpc.tcc"
					>(0x7c000110UL, 0xfc0003feUL, DecodeOpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 141614 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141619 "powerpc.tcc"
					>(0x7c000010UL, 0xfc0003feUL, DecodeOpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 141623 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141628 "powerpc.tcc"
					>(0x7c000050UL, 0xfc0003feUL, DecodeOpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 141632 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141637 "powerpc.tcc"
					>(0x7c0000d0UL, 0xfc0003feUL, DecodeOpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 141641 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141646 "powerpc.tcc"
					>(0x7c0001d6UL, 0xfc0003feUL, DecodeOpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 141650 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141655 "powerpc.tcc"
					>(0x1c000000UL, 0xfc000000UL, DecodeOpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 141659 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141664 "powerpc.tcc"
					>(0x7c000016UL, 0xfc0003feUL, DecodeOpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 141668 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141673 "powerpc.tcc"
					>(0x7c000096UL, 0xfc0003feUL, DecodeOpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 141677 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141682 "powerpc.tcc"
					>(0x7c000396UL, 0xfc0003feUL, DecodeOpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 141686 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141691 "powerpc.tcc"
					>(0x7c0003d6UL, 0xfc0003feUL, DecodeOpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 141695 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141700 "powerpc.tcc"
					>(0x7c000194UL, 0xfc0003feUL, DecodeOpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 141704 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141709 "powerpc.tcc"
					>(0x7c0001d4UL, 0xfc0003feUL, DecodeOpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 141713 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141718 "powerpc.tcc"
					>(0x3c000000UL, 0xfc000000UL, DecodeOpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 141722 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141727 "powerpc.tcc"
					>(0x34000000UL, 0xfc000000UL, DecodeOpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 141731 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141736 "powerpc.tcc"
					>(0x30000000UL, 0xfc000000UL, DecodeOpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 141740 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141745 "powerpc.tcc"
					>(0x38000000UL, 0xfc000000UL, DecodeOpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 141749 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141754 "powerpc.tcc"
					>(0x7c000114UL, 0xfc0003feUL, DecodeOpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 141758 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141763 "powerpc.tcc"
					>(0x7c000014UL, 0xfc0003feUL, DecodeOpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 141767 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141772 "powerpc.tcc"
					>(0x7c000214UL, 0xfc0003feUL, DecodeOpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 141776 "powerpc.tcc"
					>));
				}

				template <
#line 38 "ppc.isa"
				class
#line 141783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141786 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141791 "powerpc.tcc"
				>::~Decoder()
				{
					InvalidateDecodingCache();
				}

				template <
#line 38 "ppc.isa"
				class
#line 141800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141803 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141808 "powerpc.tcc"
				>::Fetch(void *, typename CONFIG::address_t, uint32_t)
				{
					assert( ! "Calling unimplemented virtual method Fetch" );
				}

				template <
#line 38 "ppc.isa"
				class
#line 141817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141820 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141825 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141829 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141835 "powerpc.tcc"
					> *operation;
					CodeType code;
					Fetch(&code, addr, sizeof(code));
#if BYTE_ORDER == LITTLE_ENDIAN
					if(!little_endian)
#else
					if(little_endian)
#endif
					{
						code = ((code & 0xff000000UL) >> 24) | ((code & 0x00ff0000UL) >> 8) | ((code & 0x0000ff00UL) << 8) | ((code & 0x000000ffUL) << 24);
					}
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							operation->initialize_write_fpscr();
							operation->initialize_read_xer();
							operation->initialize_write_xer();
							operation->initialize_write_crbd();
							operation->initialize_write_cr();
							operation->initialize_read_crbb();
							operation->initialize_read_crba();
							operation->initialize_read_cr();
							operation->initialize_write_ctr();
							operation->initialize_write_lr();
							operation->initialize_write_ear();
							operation->initialize_write_ra();
							operation->initialize_write_rd();
							operation->initialize_write_fd();
							operation->initialize_read_ctr();
							operation->initialize_read_lr();
							operation->initialize_read_fs();
							operation->initialize_read_fc();
							operation->initialize_read_fb();
							operation->initialize_read_fa();
							operation->initialize_read_rs();
							operation->initialize_read_rb();
							operation->initialize_read_ra();
							operation->initialize_serialization();
							operation->initialize_unit();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141888 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					operation->initialize_write_fpscr();
					operation->initialize_read_xer();
					operation->initialize_write_xer();
					operation->initialize_write_crbd();
					operation->initialize_write_cr();
					operation->initialize_read_crbb();
					operation->initialize_read_crba();
					operation->initialize_read_cr();
					operation->initialize_write_ctr();
					operation->initialize_write_lr();
					operation->initialize_write_ear();
					operation->initialize_write_ra();
					operation->initialize_write_rd();
					operation->initialize_write_fd();
					operation->initialize_read_ctr();
					operation->initialize_read_lr();
					operation->initialize_read_fs();
					operation->initialize_read_fc();
					operation->initialize_read_fb();
					operation->initialize_read_fa();
					operation->initialize_read_rs();
					operation->initialize_read_rb();
					operation->initialize_read_ra();
					operation->initialize_serialization();
					operation->initialize_unit();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141927 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141932 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141936 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr, CodeType code)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141942 "powerpc.tcc"
					> *operation;
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							operation->initialize_write_fpscr();
							operation->initialize_read_xer();
							operation->initialize_write_xer();
							operation->initialize_write_crbd();
							operation->initialize_write_cr();
							operation->initialize_read_crbb();
							operation->initialize_read_crba();
							operation->initialize_read_cr();
							operation->initialize_write_ctr();
							operation->initialize_write_lr();
							operation->initialize_write_ear();
							operation->initialize_write_ra();
							operation->initialize_write_rd();
							operation->initialize_write_fd();
							operation->initialize_read_ctr();
							operation->initialize_read_lr();
							operation->initialize_read_fs();
							operation->initialize_read_fc();
							operation->initialize_read_fb();
							operation->initialize_read_fa();
							operation->initialize_read_rs();
							operation->initialize_read_rb();
							operation->initialize_read_ra();
							operation->initialize_serialization();
							operation->initialize_unit();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141985 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					operation->initialize_write_fpscr();
					operation->initialize_read_xer();
					operation->initialize_write_xer();
					operation->initialize_write_crbd();
					operation->initialize_write_cr();
					operation->initialize_read_crbb();
					operation->initialize_read_crba();
					operation->initialize_read_cr();
					operation->initialize_write_ctr();
					operation->initialize_write_lr();
					operation->initialize_write_ear();
					operation->initialize_write_ra();
					operation->initialize_write_rd();
					operation->initialize_write_fd();
					operation->initialize_read_ctr();
					operation->initialize_read_lr();
					operation->initialize_read_fs();
					operation->initialize_read_fc();
					operation->initialize_read_fb();
					operation->initialize_read_fa();
					operation->initialize_read_rs();
					operation->initialize_read_rb();
					operation->initialize_read_ra();
					operation->initialize_serialization();
					operation->initialize_unit();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142024 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142029 "powerpc.tcc"
				>::InvalidateDecodingCache()
				{
					uint32_t index;
					mru_page = 0;
					for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
					{
						DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142039 "powerpc.tcc"
						> *page, *next_page;
						page = decode_hash_table[index];
						if(page)
						{
							do
							{
								next_page = page->next;
								delete page;
								page = next_page;
							} while(page);
							decode_hash_table[index] = 0;
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 142058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142061 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142066 "powerpc.tcc"
				>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
				{
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					if(mru_page && mru_page->key == page_key) mru_page = 0;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142075 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							decode_hash_table[index] = cur->next;
							delete cur;
							return;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next = 0;
									delete cur;
									return;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 142108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142111 "powerpc.tcc"
				>
				inline DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 142116 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142120 "powerpc.tcc"
				>::FindPage(typename CONFIG::address_t page_key)
				{
					if(mru_page && mru_page->key == page_key) return mru_page;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142128 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							mru_page = cur;
							return cur;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next= decode_hash_table[index];
									decode_hash_table[index] = cur;
									mru_page = cur;
									return cur;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
					return 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142165 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 142170 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142174 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 142180 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142186 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142194 "powerpc.tcc"
						>(page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						return operation;
					}
					operation = NCDecode(addr);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142217 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 142222 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142226 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr, CodeType insn)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 142232 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142238 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142246 "powerpc.tcc"
						> (page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
						return operation;
						delete operation;
					}
					operation = NCDecode(addr, insn);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142271 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142276 "powerpc.tcc"
				>::SetLittleEndian()
				{
					little_endian = true;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142288 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142293 "powerpc.tcc"
				>::SetBigEndian()
				{
					little_endian = false;
				}

} } } } }
