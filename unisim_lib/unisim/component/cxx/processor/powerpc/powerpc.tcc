#include "powerpc.hh"
#include <cassert>
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"


#include <unisim/util/arithmetic/arithmetic.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::CountLeadingZeros;

					inline uint32_t Mask(uint32_t mb, uint32_t me)
					{
						return (mb > me) ? ~(((uint32_t) -1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1))) : (((uint32_t)-1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1)));
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 30 "powerpc.tcc"
#line 41 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"


#include <unisim/component/cxx/processor/powerpc/floating.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FPRF(uint32_t& fpscr, const FLOAT& result)
					{
						fpscr = fpscr & ~CONFIG::FPSCR_FPRF_MASK;

						if(unlikely(result.isQNaN()))
						{
							fpscr = fpscr | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isInfty()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isDenormalized()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isZero()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
					}

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FR(uint32_t& fpscr, const FLOAT& result, const Flags& flags)
					{
						if(flags.hasIncrementFraction(result.isNegative()))
						fpscr = fpscr | CONFIG::FPSCR_FR_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FR_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_FI(uint32_t& fpscr, const Flags& flags)
					{
						if(flags.isApproximate())
						fpscr = fpscr | CONFIG::FPSCR_FI_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FI_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_OX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isOverflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_OX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_UX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isUnderflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_UX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_ZX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isDivisionByZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXSNAN(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasSNaNOperand()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXISI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMinusInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXISI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIDI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyOnInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIDI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXZDZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isZeroOnZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXZDZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIMZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMultZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIMZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXCVI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isOverflow()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXCVI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_XX(uint32_t& fpscr)
					{
						fpscr = fpscr | ((fpscr & CONFIG::FPSCR_FI_MASK) ? CONFIG::FPSCR_XX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FX(uint32_t& fpscr, uint32_t old_fpscr)
					{
						fpscr = fpscr |
						(((~old_fpscr & fpscr & CONFIG::FPSCR_OX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_UX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_ZX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_XX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_FX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_VX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_VX_MASK) |
						(((fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_VX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FEX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_FEX_MASK) |
						(((fpscr & CONFIG::FPSCR_VX_MASK) && (fpscr & CONFIG::FPSCR_VE_MASK) ||
						(fpscr & CONFIG::FPSCR_OX_MASK) && (fpscr & CONFIG::FPSCR_OE_MASK) ||
						(fpscr & CONFIG::FPSCR_UX_MASK) && (fpscr & CONFIG::FPSCR_UE_MASK) ||
						(fpscr & CONFIG::FPSCR_ZX_MASK) && (fpscr & CONFIG::FPSCR_ZE_MASK) ||
						(fpscr & CONFIG::FPSCR_XX_MASK) && (fpscr & CONFIG::FPSCR_XE_MASK)) ? CONFIG::FPSCR_FEX_MASK : 0);
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 243 "powerpc.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"


#include <iostream>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::hex;
					using std::dec;
					using std::endl;
					using std::ios;

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 266 "powerpc.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
template <
#line 38 "ppc.isa"
class
#line 271 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 274 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 279 "powerpc.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
num_uops(
#line 35 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 285 "powerpc.tcc"
),
num_insn_operands(
#line 36 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
0
#line 290 "powerpc.tcc"
),
execution_unit(
#line 38 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_UNIT_T
#line 295 "powerpc.tcc"
),
serialization(
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_SERIALIZATION
#line 300 "powerpc.tcc"
),
insn_latency(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 305 "powerpc.tcc"
),
insn_inv_thoughput(
#line 41 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 310 "powerpc.tcc"
),
function(
#line 128 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
FnInvalid
#line 315 "powerpc.tcc"
),
latency(
#line 57 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 320 "powerpc.tcc"
),
nstages(
#line 58 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 325 "powerpc.tcc"
),
noperands(
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
0
#line 330 "powerpc.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 38 "ppc.isa"
class
#line 341 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 344 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 349 "powerpc.tcc"
>::~Operation()
{
}

template <
#line 38 "ppc.isa"
class
#line 357 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 360 "powerpc.tcc"
>
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 364 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 368 "powerpc.tcc"
>::is_sign_extended()
{
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 375 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 380 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 383 "powerpc.tcc"
>
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 387 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 391 "powerpc.tcc"
>::load_need_conversion()
{
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 398 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 403 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 406 "powerpc.tcc"
>
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 410 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 414 "powerpc.tcc"
>::store_need_conversion()
{
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 421 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 426 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 429 "powerpc.tcc"
>
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
uint32_t
#line 433 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 437 "powerpc.tcc"
>::get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 441 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 444 "powerpc.tcc"
)
{
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation do not provide single precision information: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 454 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 459 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 462 "powerpc.tcc"
>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
list <Operation<CONFIG> *>
#line 466 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 470 "powerpc.tcc"
>::split_into()
{
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation non splitable: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 480 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 485 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 488 "powerpc.tcc"
>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 492 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 496 "powerpc.tcc"
>::is_splitted()
{
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 503 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 508 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 511 "powerpc.tcc"
>
#line 249 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::address_t
#line 515 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 519 "powerpc.tcc"
>::loadstore_effective_address(
#line 249 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 523 "powerpc.tcc"
#line 249 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 526 "powerpc.tcc"
)
{
#line 249 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return cpu->GetEA();
	}
#line 533 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 538 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 541 "powerpc.tcc"
>
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 545 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 549 "powerpc.tcc"
>::loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 553 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 556 "powerpc.tcc"
)
{
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 566 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 571 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 574 "powerpc.tcc"
>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 578 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 582 "powerpc.tcc"
>::memory_access_size()
{
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0, cerr);
		cerr << endl;
		exit(1);
	}
#line 592 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 597 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 600 "powerpc.tcc"
>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 604 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 608 "powerpc.tcc"
>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 612 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 615 "powerpc.tcc"
)
{
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action loadstore_target_register not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 625 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 630 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 633 "powerpc.tcc"
>
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 637 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 641 "powerpc.tcc"
>::branch_conditioned()
{
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 648 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 653 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 656 "powerpc.tcc"
>
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 660 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 664 "powerpc.tcc"
>::branch_linked()
{
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return false;
	}
#line 671 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 676 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 679 "powerpc.tcc"
>
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 683 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 687 "powerpc.tcc"
>::branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 691 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 694 "powerpc.tcc"
)
{
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 701 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 706 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 709 "powerpc.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 713 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 717 "powerpc.tcc"
>::get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 721 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cia
#line 724 "powerpc.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 728 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 731 "powerpc.tcc"
)
{
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return 0;
	}
#line 738 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 743 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 746 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 753 "powerpc.tcc"
>::initialize_operands()
{
#line 130 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	{
		stringstream ss;
		Operation<CONFIG>::disasm(0,ss);
		string s;
		ss >> s;
		if(s!="???")
		{ cerr << "Error: missing initialize_operands for instruction \"" << s << "\" !" << endl;
		}
	}
#line 766 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 774 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 781 "powerpc.tcc"
>::initialize_latencies()
{
#line 64 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	{
	}
#line 787 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 792 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 795 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 802 "powerpc.tcc"
>::initialize_function()
{
#line 130 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
	{
		/*
		Operation<CONFIG>::function = FnInvalid;
		registers_written = RegNone;
		*/
	}
#line 812 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 817 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 820 "powerpc.tcc"
>
#line 102 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 824 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 828 "powerpc.tcc"
>::get_num_uops(
#line 102 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 832 "powerpc.tcc"
#line 102 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 835 "powerpc.tcc"
)
{
#line 102 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{ return 1; }
#line 840 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 845 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 848 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 855 "powerpc.tcc"
>::initialize_write_fpscr()
{
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 860 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 865 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 868 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 875 "powerpc.tcc"
>::initialize_read_xer()
{
#line 98 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 880 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 885 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 888 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 895 "powerpc.tcc"
>::initialize_write_xer()
{
#line 96 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 900 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 905 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 908 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 915 "powerpc.tcc"
>::initialize_write_crbd()
{
#line 94 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 920 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 928 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 935 "powerpc.tcc"
>::initialize_write_cr()
{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 940 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 945 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 948 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 955 "powerpc.tcc"
>::initialize_read_crbb()
{
#line 90 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 960 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 965 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 968 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 975 "powerpc.tcc"
>::initialize_read_crba()
{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 980 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 988 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 995 "powerpc.tcc"
>::initialize_read_cr()
{
#line 86 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1000 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1005 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1008 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1015 "powerpc.tcc"
>::initialize_write_ctr()
{
#line 84 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1020 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1025 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1028 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1035 "powerpc.tcc"
>::initialize_write_lr()
{
#line 82 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1040 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1045 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1048 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1055 "powerpc.tcc"
>::initialize_write_ear()
{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1060 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1065 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1068 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1075 "powerpc.tcc"
>::initialize_write_ra()
{
#line 78 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1080 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1085 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1088 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1095 "powerpc.tcc"
>::initialize_write_rd()
{
#line 76 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1100 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1105 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1108 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1115 "powerpc.tcc"
>::initialize_write_fd()
{
#line 74 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1120 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1125 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1128 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1135 "powerpc.tcc"
>::initialize_read_ctr()
{
#line 72 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1140 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1145 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1148 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1155 "powerpc.tcc"
>::initialize_read_lr()
{
#line 70 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1160 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1165 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1168 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1175 "powerpc.tcc"
>::initialize_read_fs()
{
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1180 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1185 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1188 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1195 "powerpc.tcc"
>::initialize_read_fc()
{
#line 66 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1200 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1205 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1208 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1215 "powerpc.tcc"
>::initialize_read_fb()
{
#line 64 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1220 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1225 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1228 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1235 "powerpc.tcc"
>::initialize_read_fa()
{
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1240 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1245 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1248 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1255 "powerpc.tcc"
>::initialize_read_rs()
{
#line 60 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1260 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1265 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1268 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1275 "powerpc.tcc"
>::initialize_read_rb()
{
#line 58 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1280 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1285 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1288 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1295 "powerpc.tcc"
>::initialize_read_ra()
{
#line 56 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1300 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1305 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1308 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1315 "powerpc.tcc"
>::initialize_serialization()
{
#line 54 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1320 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1325 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1328 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1335 "powerpc.tcc"
>::initialize_unit()
{
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1340 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1345 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1348 "powerpc.tcc"
>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1352 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1356 "powerpc.tcc"
>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1360 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1363 "powerpc.tcc"
,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1367 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1370 "powerpc.tcc"
)
{
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
		execute(cpu);
	}
#line 1378 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1383 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1386 "powerpc.tcc"
>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1390 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1394 "powerpc.tcc"
>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1398 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1401 "powerpc.tcc"
,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1405 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1408 "powerpc.tcc"
)
{
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
	}
#line 1415 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1420 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1423 "powerpc.tcc"
>
#line 64 "ppc.isa"
void
#line 1427 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1431 "powerpc.tcc"
>::disasm(
#line 64 "ppc.isa"
typename CONFIG::STATE *
#line 1435 "powerpc.tcc"
#line 64 "ppc.isa"
cpu
#line 1438 "powerpc.tcc"
,
#line 64 "ppc.isa"
ostream&
#line 1442 "powerpc.tcc"
#line 64 "ppc.isa"
os
#line 1445 "powerpc.tcc"
)
{
#line 64 "ppc.isa"
	{
		os << "???";
	}
#line 1452 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1457 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1460 "powerpc.tcc"
>
#line 60 "ppc.isa"
void
#line 1464 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1468 "powerpc.tcc"
>::execute(
#line 60 "ppc.isa"
typename CONFIG::STATE *
#line 1472 "powerpc.tcc"
#line 60 "ppc.isa"
cpu
#line 1475 "powerpc.tcc"
)
{
#line 60 "ppc.isa"
	{
		throw IllegalInstructionException<CONFIG>();
	}
#line 1482 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1487 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1490 "powerpc.tcc"
>
class OpAdd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1495 "powerpc.tcc"
>
{
public:
	OpAdd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1542 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1546 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1549 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1554 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1558 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1561 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1565 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1568 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1737 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1740 "powerpc.tcc"
>
class OpAddc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1745 "powerpc.tcc"
>
{
public:
	OpAddc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1792 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1796 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1799 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1804 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1808 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1811 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1815 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1818 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1990 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1993 "powerpc.tcc"
>
class OpAdde : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1998 "powerpc.tcc"
>
{
public:
	OpAdde(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2045 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2049 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2052 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2057 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2061 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2064 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2068 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2071 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2249 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2252 "powerpc.tcc"
>
class OpAddi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2257 "powerpc.tcc"
>
{
public:
	OpAddi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2302 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2306 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2309 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2314 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2318 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2321 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2325 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2328 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2491 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2494 "powerpc.tcc"
>
class OpAddic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2499 "powerpc.tcc"
>
{
public:
	OpAddic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2544 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2548 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2551 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2556 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2560 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2563 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2567 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2570 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2736 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2739 "powerpc.tcc"
>
class OpAddic_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2744 "powerpc.tcc"
>
{
public:
	OpAddic_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2789 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2793 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2796 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2801 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2805 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2808 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2812 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2815 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2984 "powerpc.tcc"
>
class OpAddis : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2989 "powerpc.tcc"
>
{
public:
	OpAddis(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3223 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3226 "powerpc.tcc"
>
class OpAddme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3231 "powerpc.tcc"
>
{
public:
	OpAddme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3277 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3281 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3284 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3289 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3293 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3296 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3300 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3303 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3475 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3478 "powerpc.tcc"
>
class OpAddze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3483 "powerpc.tcc"
>
{
public:
	OpAddze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3529 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3533 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3536 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3541 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3545 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3548 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3552 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3555 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3730 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3733 "powerpc.tcc"
>
class OpDivw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3738 "powerpc.tcc"
>
{
public:
	OpDivw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3785 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3789 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3792 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3797 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3801 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3804 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3808 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3811 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3980 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3983 "powerpc.tcc"
>
class OpDivwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3988 "powerpc.tcc"
>
{
public:
	OpDivwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4230 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4233 "powerpc.tcc"
>
class OpMulhw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4238 "powerpc.tcc"
>
{
public:
	OpMulhw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4284 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4288 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4291 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4296 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4300 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4303 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4307 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4310 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4479 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4482 "powerpc.tcc"
>
class OpMulhwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4487 "powerpc.tcc"
>
{
public:
	OpMulhwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4533 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4537 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4540 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4545 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4549 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4552 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4556 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4559 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4728 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4731 "powerpc.tcc"
>
class OpMulli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4736 "powerpc.tcc"
>
{
public:
	OpMulli(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4781 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4785 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4788 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4793 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4797 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4800 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4804 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4807 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4970 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4973 "powerpc.tcc"
>
class OpMullw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4978 "powerpc.tcc"
>
{
public:
	OpMullw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5025 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5029 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5032 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5037 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5041 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5044 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5048 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5051 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5220 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5223 "powerpc.tcc"
>
class OpNeg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5228 "powerpc.tcc"
>
{
public:
	OpNeg(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5274 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5278 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5281 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5286 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5290 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5293 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5297 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5300 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5463 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5466 "powerpc.tcc"
>
class OpSubf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5471 "powerpc.tcc"
>
{
public:
	OpSubf(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5518 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5522 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5525 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5530 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5534 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5537 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5541 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5544 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5707 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5710 "powerpc.tcc"
>
class OpSubfc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5715 "powerpc.tcc"
>
{
public:
	OpSubfc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5762 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5766 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5769 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5774 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5778 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5781 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5785 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5788 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5954 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5957 "powerpc.tcc"
>
class OpSubfe : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5962 "powerpc.tcc"
>
{
public:
	OpSubfe(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6009 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6013 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6016 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6021 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6025 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6028 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6032 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6035 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6207 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6210 "powerpc.tcc"
>
class OpSubfic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6215 "powerpc.tcc"
>
{
public:
	OpSubfic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6260 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6264 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6267 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6272 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6276 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6279 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6283 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6286 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6452 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6455 "powerpc.tcc"
>
class OpSubfme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6460 "powerpc.tcc"
>
{
public:
	OpSubfme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6506 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6510 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6513 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6518 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6522 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6525 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6529 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6532 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6704 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6707 "powerpc.tcc"
>
class OpSubfze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6712 "powerpc.tcc"
>
{
public:
	OpSubfze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6758 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6762 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6765 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6770 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6774 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6777 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6781 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6784 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6956 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6959 "powerpc.tcc"
>
class OpCmp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6964 "powerpc.tcc"
>
{
public:
	OpCmp(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7010 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7014 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7017 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7022 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7026 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7029 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7033 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7036 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7202 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7205 "powerpc.tcc"
>
class OpCmpi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7210 "powerpc.tcc"
>
{
public:
	OpCmpi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7256 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7260 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7263 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7268 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7272 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7275 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7279 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7282 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7442 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7445 "powerpc.tcc"
>
class OpCmpl : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7450 "powerpc.tcc"
>
{
public:
	OpCmpl(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7496 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7500 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7503 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7508 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7512 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7515 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7519 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7522 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7685 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7688 "powerpc.tcc"
>
class OpCmpli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7693 "powerpc.tcc"
>
{
public:
	OpCmpli(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7739 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7743 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7746 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7751 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7755 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7758 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7762 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7765 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7928 "powerpc.tcc"
>
class OpAnd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7933 "powerpc.tcc"
>
{
public:
	OpAnd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7979 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7983 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7986 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7991 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7995 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7998 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8002 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8005 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8168 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8171 "powerpc.tcc"
>
class OpAndc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8176 "powerpc.tcc"
>
{
public:
	OpAndc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8222 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8226 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8229 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8234 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8238 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8241 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8245 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8248 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8411 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8414 "powerpc.tcc"
>
class OpAndi_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8419 "powerpc.tcc"
>
{
public:
	OpAndi_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8464 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8468 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8471 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8476 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8480 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8483 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8487 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8490 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8650 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8653 "powerpc.tcc"
>
class OpAndis_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8658 "powerpc.tcc"
>
{
public:
	OpAndis_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8703 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8707 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8710 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8715 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8719 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8722 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8726 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8729 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8889 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8892 "powerpc.tcc"
>
class OpCntlzw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8897 "powerpc.tcc"
>
{
public:
	OpCntlzw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8942 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8946 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8949 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8954 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8958 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8961 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8965 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8968 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9128 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9131 "powerpc.tcc"
>
class OpEqv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9136 "powerpc.tcc"
>
{
public:
	OpEqv(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9182 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9186 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9189 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9194 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9198 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9201 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9205 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9208 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9371 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9374 "powerpc.tcc"
>
class OpExtsb : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9379 "powerpc.tcc"
>
{
public:
	OpExtsb(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9424 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9428 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9431 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9436 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9440 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9443 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9447 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9450 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9610 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9613 "powerpc.tcc"
>
class OpExtsh : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9618 "powerpc.tcc"
>
{
public:
	OpExtsh(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9663 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9667 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9670 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9675 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9679 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9682 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9686 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9689 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9849 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9852 "powerpc.tcc"
>
class OpNand : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9857 "powerpc.tcc"
>
{
public:
	OpNand(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9903 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9907 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9910 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9915 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9919 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9922 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9926 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9929 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10092 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10095 "powerpc.tcc"
>
class OpNor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10100 "powerpc.tcc"
>
{
public:
	OpNor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10146 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10150 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10153 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10158 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10162 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10165 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10169 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10172 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10335 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10338 "powerpc.tcc"
>
class OpOr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10343 "powerpc.tcc"
>
{
public:
	OpOr(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10389 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10393 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10396 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10401 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10405 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10408 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10412 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10415 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10578 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10581 "powerpc.tcc"
>
class OpOrc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10586 "powerpc.tcc"
>
{
public:
	OpOrc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10632 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10636 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10639 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10644 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10648 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10651 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10655 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10658 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10821 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10824 "powerpc.tcc"
>
class OpOri : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10829 "powerpc.tcc"
>
{
public:
	OpOri(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10874 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10878 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10881 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10886 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10890 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10893 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10897 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10900 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11060 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11063 "powerpc.tcc"
>
class OpOris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11068 "powerpc.tcc"
>
{
public:
	OpOris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11113 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11117 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11120 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11125 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11129 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11132 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11136 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11139 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11299 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11302 "powerpc.tcc"
>
class OpXor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11307 "powerpc.tcc"
>
{
public:
	OpXor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11353 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11357 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11360 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11365 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11369 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11372 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11376 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11379 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11542 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11545 "powerpc.tcc"
>
class OpXori : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11550 "powerpc.tcc"
>
{
public:
	OpXori(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11595 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11599 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11602 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11607 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11611 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11614 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11618 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11621 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11781 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11784 "powerpc.tcc"
>
class OpXoris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11789 "powerpc.tcc"
>
{
public:
	OpXoris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11834 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11838 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11841 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11846 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11850 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11853 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11857 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11860 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12020 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12023 "powerpc.tcc"
>
class OpRlwimi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12028 "powerpc.tcc"
>
{
public:
	OpRlwimi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12076 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12080 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12083 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12088 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12092 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12095 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12099 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12102 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12265 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12268 "powerpc.tcc"
>
class OpRlwinm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12273 "powerpc.tcc"
>
{
public:
	OpRlwinm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12321 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12325 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12328 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12333 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12337 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12340 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12344 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12347 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12507 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12510 "powerpc.tcc"
>
class OpRlwnm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12515 "powerpc.tcc"
>
{
public:
	OpRlwnm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12563 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12567 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12570 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12575 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12579 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12582 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12586 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12589 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12752 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12755 "powerpc.tcc"
>
class OpSlw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12760 "powerpc.tcc"
>
{
public:
	OpSlw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12806 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12810 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12813 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12818 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12822 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12825 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12829 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12832 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12995 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12998 "powerpc.tcc"
>
class OpSraw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13003 "powerpc.tcc"
>
{
public:
	OpSraw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13049 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13053 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13056 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13061 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13065 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13068 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13072 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13075 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13241 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13244 "powerpc.tcc"
>
class OpSrawi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13249 "powerpc.tcc"
>
{
public:
	OpSrawi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13295 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13299 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13302 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13307 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13311 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13314 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13318 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13321 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13481 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13484 "powerpc.tcc"
>
class OpSrw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13489 "powerpc.tcc"
>
{
public:
	OpSrw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13535 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13539 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13542 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13547 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13551 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13554 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13558 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13561 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13724 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13727 "powerpc.tcc"
>
class OpFadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13732 "powerpc.tcc"
>
{
public:
	OpFadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13778 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13782 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13785 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13790 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13794 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13797 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13801 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13804 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13976 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13979 "powerpc.tcc"
>
class OpFadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13984 "powerpc.tcc"
>
{
public:
	OpFadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14030 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14034 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14037 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14042 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14046 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14049 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14053 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14056 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14228 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14231 "powerpc.tcc"
>
class OpFdiv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14236 "powerpc.tcc"
>
{
public:
	OpFdiv(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14282 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14286 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14289 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14294 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14298 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14301 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14305 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14308 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14480 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14483 "powerpc.tcc"
>
class OpFdivs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14488 "powerpc.tcc"
>
{
public:
	OpFdivs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14560 "powerpc.tcc"
	);
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14732 "powerpc.tcc"
>
class OpFmul : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14737 "powerpc.tcc"
>
{
public:
	OpFmul(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14783 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14787 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14790 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14795 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14799 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14802 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14806 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14809 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14984 "powerpc.tcc"
>
class OpFmuls : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14989 "powerpc.tcc"
>
{
public:
	OpFmuls(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15233 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15236 "powerpc.tcc"
>
class OpFres : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15241 "powerpc.tcc"
>
{
public:
	OpFres(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15286 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15290 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15293 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15298 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15302 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15305 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15309 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15312 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15481 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15484 "powerpc.tcc"
>
class OpFrsqrte : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15489 "powerpc.tcc"
>
{
public:
	OpFrsqrte(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15560 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15732 "powerpc.tcc"
>
class OpFsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15737 "powerpc.tcc"
>
{
public:
	OpFsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15783 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15787 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15790 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15795 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15799 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15802 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15806 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15809 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15984 "powerpc.tcc"
>
class OpFsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15989 "powerpc.tcc"
>
{
public:
	OpFsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16233 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16236 "powerpc.tcc"
>
class OpFsel : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16241 "powerpc.tcc"
>
{
public:
	OpFsel(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16288 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16292 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16295 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16300 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16304 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16307 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16311 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16314 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16489 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16492 "powerpc.tcc"
>
class OpFsqrt : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16497 "powerpc.tcc"
>
{
public:
	OpFsqrt(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16542 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16546 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16549 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16554 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16558 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16561 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16565 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16568 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16734 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16737 "powerpc.tcc"
>
class OpFsqrts : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16742 "powerpc.tcc"
>
{
public:
	OpFsqrts(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16787 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16791 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16794 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16799 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16803 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16806 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16810 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16813 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16979 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16982 "powerpc.tcc"
>
class OpFmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16987 "powerpc.tcc"
>
{
public:
	OpFmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17235 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17238 "powerpc.tcc"
>
class OpFmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17243 "powerpc.tcc"
>
{
public:
	OpFmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17290 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17294 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17297 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17302 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17306 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17309 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17313 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17316 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17491 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17494 "powerpc.tcc"
>
class OpFmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17499 "powerpc.tcc"
>
{
public:
	OpFmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17546 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17550 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17553 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17558 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17562 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17565 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17569 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17572 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17747 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17750 "powerpc.tcc"
>
class OpFmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17755 "powerpc.tcc"
>
{
public:
	OpFmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17802 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17806 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17809 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17814 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17818 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17821 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17825 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17828 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18003 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18006 "powerpc.tcc"
>
class OpFnmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18011 "powerpc.tcc"
>
{
public:
	OpFnmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18058 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18062 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18065 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18070 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18074 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18077 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18081 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18084 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18259 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18262 "powerpc.tcc"
>
class OpFnmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18267 "powerpc.tcc"
>
{
public:
	OpFnmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18314 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18318 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18321 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18326 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18330 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18333 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18337 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18340 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18518 "powerpc.tcc"
>
class OpFnmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18523 "powerpc.tcc"
>
{
public:
	OpFnmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18570 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18574 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18577 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18582 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18586 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18589 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18593 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18596 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18774 "powerpc.tcc"
>
class OpFnmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18779 "powerpc.tcc"
>
{
public:
	OpFnmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18826 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18830 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18833 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18838 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18842 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18845 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18849 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18852 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19027 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19030 "powerpc.tcc"
>
class OpFcmpo : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19035 "powerpc.tcc"
>
{
public:
	OpFcmpo(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19080 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19084 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19087 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19092 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19096 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19099 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19103 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19106 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19275 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19278 "powerpc.tcc"
>
class OpFcmpu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19283 "powerpc.tcc"
>
{
public:
	OpFcmpu(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19328 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19332 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19335 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19340 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19344 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19347 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19351 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19354 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19523 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19526 "powerpc.tcc"
>
class OpFctiw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19531 "powerpc.tcc"
>
{
public:
	OpFctiw(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19576 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19580 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19583 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19588 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19592 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19595 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19599 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19602 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19774 "powerpc.tcc"
>
class OpFctiwz : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19779 "powerpc.tcc"
>
{
public:
	OpFctiwz(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19824 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19828 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19831 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19836 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19840 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19843 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19847 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19850 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20019 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20022 "powerpc.tcc"
>
class OpFrsp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20027 "powerpc.tcc"
>
{
public:
	OpFrsp(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20072 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20076 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20079 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20084 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20088 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20091 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20095 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20098 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20267 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20270 "powerpc.tcc"
>
class OpFabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20275 "powerpc.tcc"
>
{
public:
	OpFabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20320 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20324 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20327 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20332 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20336 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20339 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20343 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20346 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20518 "powerpc.tcc"
>
class OpFmr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20523 "powerpc.tcc"
>
{
public:
	OpFmr(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20568 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20572 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20575 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20580 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20584 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20587 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20591 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20594 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20763 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20766 "powerpc.tcc"
>
class OpFnabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20771 "powerpc.tcc"
>
{
public:
	OpFnabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20816 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20820 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20823 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20828 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20832 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20835 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20839 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20842 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21011 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21014 "powerpc.tcc"
>
class OpFneg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21019 "powerpc.tcc"
>
{
public:
	OpFneg(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21064 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21068 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21071 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21076 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21080 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21083 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21087 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21090 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21259 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21262 "powerpc.tcc"
>
class OpMcrfs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21267 "powerpc.tcc"
>
{
public:
	OpMcrfs(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t crfS;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21311 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21315 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21318 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21323 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21327 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21330 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21334 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21337 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21497 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21500 "powerpc.tcc"
>
class OpMffs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21505 "powerpc.tcc"
>
{
public:
	OpMffs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21549 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21553 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21556 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21561 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21565 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21568 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21572 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21575 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21744 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21747 "powerpc.tcc"
>
class OpMtfsb0 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21752 "powerpc.tcc"
>
{
public:
	OpMtfsb0(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21796 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21800 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21803 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21808 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21812 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21815 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21819 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21822 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21988 "powerpc.tcc"
>
class OpMtfsb1 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21993 "powerpc.tcc"
>
{
public:
	OpMtfsb1(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22037 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22041 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22044 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22049 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22053 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22056 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22060 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22063 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22226 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22229 "powerpc.tcc"
>
class OpMtfsf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22234 "powerpc.tcc"
>
{
public:
	OpMtfsf(CodeType code, typename CONFIG::address_t addr);
	uint32_t fm;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22279 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22283 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22286 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22291 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22295 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22298 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22302 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22305 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_fb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22468 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22471 "powerpc.tcc"
>
class OpMtfsfi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22476 "powerpc.tcc"
>
{
public:
	OpMtfsfi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t imm;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22521 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22525 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22528 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22533 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22537 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22540 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22544 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22547 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22710 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22713 "powerpc.tcc"
>
class OpB : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22718 "powerpc.tcc"
>
{
public:
	OpB(CodeType code, typename CONFIG::address_t addr);
	int32_t li;
	uint32_t aa;
	uint32_t lk;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22763 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22767 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22770 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22775 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22779 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22782 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22786 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22789 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_write_lr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Returns the target address of branch instructions.
	* The AA bit inform if the branch is relative or absolute.
	*/
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22984 "powerpc.tcc"
	get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22988 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cia
#line 22991 "powerpc.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 22995 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 22998 "powerpc.tcc"
	);
	// ----------------------------------------------------------------------------
	/**
	* Returns true if the branch is statically preficten taken.
	* The powerpc instruction set has a bit of the bo field to set
	* up the default branch prediction value statically.
	* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
	*/
	virtual
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 23010 "powerpc.tcc"
	branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 23014 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 23017 "powerpc.tcc"
	);
	// Are branches linked ?
	//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
		virtual
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23024 "powerpc.tcc"
		branch_linked();
		virtual
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23029 "powerpc.tcc"
		branch_conditioned();
	private:
	};

	template <
#line 38 "ppc.isa"
	class
#line 23037 "powerpc.tcc"
#line 38 "ppc.isa"
	CONFIG
#line 23040 "powerpc.tcc"
	>
	class OpBc : public Operation<
#line 38 "ppc.isa"
	CONFIG
#line 23045 "powerpc.tcc"
	>
	{
	public:
		OpBc(CodeType code, typename CONFIG::address_t addr);
		uint32_t bo;
		uint32_t bi;
		int32_t bd;
		uint32_t aa;
		uint32_t lk;
		/*
		*  Copyright (c) 2007,
		*  Commissariat a l'Energie Atomique (CEA)
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*/
		/* instruction endian */
		virtual
#line 60 "ppc.isa"
		void
#line 23092 "powerpc.tcc"
		execute(
#line 60 "ppc.isa"
		typename CONFIG::STATE *
#line 23096 "powerpc.tcc"
#line 60 "ppc.isa"
		cpu
#line 23099 "powerpc.tcc"
		);
		virtual
#line 64 "ppc.isa"
		void
#line 23104 "powerpc.tcc"
		disasm(
#line 64 "ppc.isa"
		typename CONFIG::STATE *
#line 23108 "powerpc.tcc"
#line 64 "ppc.isa"
		cpu
#line 23111 "powerpc.tcc"
		,
#line 64 "ppc.isa"
		ostream&
#line 23115 "powerpc.tcc"
#line 64 "ppc.isa"
		os
#line 23118 "powerpc.tcc"
		);
		virtual
		void
		initialize_unit();
		virtual
		void
		initialize_read_ctr();
		virtual
		void
		initialize_read_cr();
		virtual
		void
		initialize_write_lr();
		virtual
		void
		initialize_write_ctr();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*          Eric Renard (erenard@lri.fr)
		*          Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		//var registers_written : {registers_written_t} = {0}
		/** Functions **/
		virtual
		void
		initialize_function();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Initilize the latency values of each instrucion
		*/
		virtual
		void
		initialize_latencies();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/* --------------------------------------------------------------------------

		Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
		Mais sinon elle respecte bien le format rd = premier registre

		> lbzu lhau lhzu lwzu
		> lbzux, lhaux, lhzux, lwzux
		> stbu, sthu, stwu
		> stbux, sthux, stwux

		> lfdu, lfsu
		> lfdux
		> stfdu, stfsu
		> stfdux, stfsux

		manque les loafd flottant a update comme lfdu)
		-------------------------------------------------------------------------- */
		/* ----
		lswi: load string should output to (rd .. rd+ ceil(nb/4))
		lswx: should output to (rd.. XER[25..31] /4)
		stswi: should input (rs .. rs+ceil(nb/4))
		stswx: should input (rs .. rs+ceil(XER[25..31]/4))
		----- */
		/*
	* NOTES :
		*     -- For store fisrt operand is to oprand to write into memory.
		*     -- For other instructions (to defined)
		*/
		virtual
		void
		initialize_operands();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Returns the target address of branch instructions.
		* The AA bit inform if the branch is relative or absolute.
		*/
		virtual
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23322 "powerpc.tcc"
		get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23326 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cia
#line 23329 "powerpc.tcc"
		,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23333 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23336 "powerpc.tcc"
		);
		// ----------------------------------------------------------------------------
		/**
		* Returns true if the branch is statically preficten taken.
		* The powerpc instruction set has a bit of the bo field to set
		* up the default branch prediction value statically.
		* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
		*/
		virtual
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23348 "powerpc.tcc"
		branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23352 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23355 "powerpc.tcc"
		);
		// Are branches linked ?
		//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
			virtual
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23362 "powerpc.tcc"
			branch_linked();
			virtual
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23367 "powerpc.tcc"
			branch_conditioned();
		private:
		};

		template <
#line 38 "ppc.isa"
		class
#line 23375 "powerpc.tcc"
#line 38 "ppc.isa"
		CONFIG
#line 23378 "powerpc.tcc"
		>
		class OpBcctr : public Operation<
#line 38 "ppc.isa"
		CONFIG
#line 23383 "powerpc.tcc"
		>
		{
		public:
			OpBcctr(CodeType code, typename CONFIG::address_t addr);
			uint32_t bo;
			uint32_t bi;
			uint32_t lk;
			/*
			*  Copyright (c) 2007,
			*  Commissariat a l'Energie Atomique (CEA)
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*/
			/* instruction endian */
			virtual
#line 60 "ppc.isa"
			void
#line 23428 "powerpc.tcc"
			execute(
#line 60 "ppc.isa"
			typename CONFIG::STATE *
#line 23432 "powerpc.tcc"
#line 60 "ppc.isa"
			cpu
#line 23435 "powerpc.tcc"
			);
			virtual
#line 64 "ppc.isa"
			void
#line 23440 "powerpc.tcc"
			disasm(
#line 64 "ppc.isa"
			typename CONFIG::STATE *
#line 23444 "powerpc.tcc"
#line 64 "ppc.isa"
			cpu
#line 23447 "powerpc.tcc"
			,
#line 64 "ppc.isa"
			ostream&
#line 23451 "powerpc.tcc"
#line 64 "ppc.isa"
			os
#line 23454 "powerpc.tcc"
			);
			virtual
			void
			initialize_unit();
			virtual
			void
			initialize_read_ctr();
			virtual
			void
			initialize_read_cr();
			virtual
			void
			initialize_write_lr();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*          Eric Renard (erenard@lri.fr)
			*          Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			//var registers_written : {registers_written_t} = {0}
			/** Functions **/
			virtual
			void
			initialize_function();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Initilize the latency values of each instrucion
			*/
			virtual
			void
			initialize_latencies();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/* --------------------------------------------------------------------------

			Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
			Mais sinon elle respecte bien le format rd = premier registre

			> lbzu lhau lhzu lwzu
			> lbzux, lhaux, lhzux, lwzux
			> stbu, sthu, stwu
			> stbux, sthux, stwux

			> lfdu, lfsu
			> lfdux
			> stfdu, stfsu
			> stfdux, stfsux

			manque les loafd flottant a update comme lfdu)
			-------------------------------------------------------------------------- */
			/* ----
			lswi: load string should output to (rd .. rd+ ceil(nb/4))
			lswx: should output to (rd.. XER[25..31] /4)
			stswi: should input (rs .. rs+ceil(nb/4))
			stswx: should input (rs .. rs+ceil(XER[25..31]/4))
			----- */
			/*
		* NOTES :
			*     -- For store fisrt operand is to oprand to write into memory.
			*     -- For other instructions (to defined)
			*/
			virtual
			void
			initialize_operands();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Returns the target address of branch instructions.
			* The AA bit inform if the branch is relative or absolute.
			*/
			virtual
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23655 "powerpc.tcc"
			get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23659 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cia
#line 23662 "powerpc.tcc"
			,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23666 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23669 "powerpc.tcc"
			);
			// ----------------------------------------------------------------------------
			/**
			* Returns true if the branch is statically preficten taken.
			* The powerpc instruction set has a bit of the bo field to set
			* up the default branch prediction value statically.
			* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
			*/
			virtual
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23681 "powerpc.tcc"
			branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23685 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23688 "powerpc.tcc"
			);
			// Are branches linked ?
			//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
				virtual
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23695 "powerpc.tcc"
				branch_linked();
				virtual
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23700 "powerpc.tcc"
				branch_conditioned();
			private:
			};

			template <
#line 38 "ppc.isa"
			class
#line 23708 "powerpc.tcc"
#line 38 "ppc.isa"
			CONFIG
#line 23711 "powerpc.tcc"
			>
			class OpBclr : public Operation<
#line 38 "ppc.isa"
			CONFIG
#line 23716 "powerpc.tcc"
			>
			{
			public:
				OpBclr(CodeType code, typename CONFIG::address_t addr);
				uint32_t bo;
				uint32_t bi;
				uint32_t lk;
				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/* instruction endian */
				virtual
#line 60 "ppc.isa"
				void
#line 23761 "powerpc.tcc"
				execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 23765 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 23768 "powerpc.tcc"
				);
				virtual
#line 64 "ppc.isa"
				void
#line 23773 "powerpc.tcc"
				disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 23777 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 23780 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 23784 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 23787 "powerpc.tcc"
				);
				virtual
				void
				initialize_unit();
				virtual
				void
				initialize_read_lr();
				virtual
				void
				initialize_read_ctr();
				virtual
				void
				initialize_read_cr();
				virtual
				void
				initialize_write_lr();
				virtual
				void
				initialize_write_ctr();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*          Eric Renard (erenard@lri.fr)
				*          Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				//var registers_written : {registers_written_t} = {0}
				/** Functions **/
				virtual
				void
				initialize_function();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Initilize the latency values of each instrucion
				*/
				virtual
				void
				initialize_latencies();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/* --------------------------------------------------------------------------

				Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
				Mais sinon elle respecte bien le format rd = premier registre

				> lbzu lhau lhzu lwzu
				> lbzux, lhaux, lhzux, lwzux
				> stbu, sthu, stwu
				> stbux, sthux, stwux

				> lfdu, lfsu
				> lfdux
				> stfdu, stfsu
				> stfdux, stfsux

				manque les loafd flottant a update comme lfdu)
				-------------------------------------------------------------------------- */
				/* ----
				lswi: load string should output to (rd .. rd+ ceil(nb/4))
				lswx: should output to (rd.. XER[25..31] /4)
				stswi: should input (rs .. rs+ceil(nb/4))
				stswx: should input (rs .. rs+ceil(XER[25..31]/4))
				----- */
				/*
			* NOTES :
				*     -- For store fisrt operand is to oprand to write into memory.
				*     -- For other instructions (to defined)
				*/
				virtual
				void
				initialize_operands();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Returns the target address of branch instructions.
				* The AA bit inform if the branch is relative or absolute.
				*/
				virtual
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23994 "powerpc.tcc"
				get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23998 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 24001 "powerpc.tcc"
				,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24005 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24008 "powerpc.tcc"
				);
				// ----------------------------------------------------------------------------
				/**
				* Returns true if the branch is statically preficten taken.
				* The powerpc instruction set has a bit of the bo field to set
				* up the default branch prediction value statically.
				* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
				*/
				virtual
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 24020 "powerpc.tcc"
				branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24024 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24027 "powerpc.tcc"
				);
				// Are branches linked ?
				//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
					virtual
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24034 "powerpc.tcc"
					branch_linked();
					virtual
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24039 "powerpc.tcc"
					branch_conditioned();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24050 "powerpc.tcc"
				>
				class OpCrand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24055 "powerpc.tcc"
				>
				{
				public:
					OpCrand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24100 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24104 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24107 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24112 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24116 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24119 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24123 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24126 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24298 "powerpc.tcc"
				>
				class OpCrandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24303 "powerpc.tcc"
				>
				{
				public:
					OpCrandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24348 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24352 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24355 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24360 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24364 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24367 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24371 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24374 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24546 "powerpc.tcc"
				>
				class OpCreqv : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24551 "powerpc.tcc"
				>
				{
				public:
					OpCreqv(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24596 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24600 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24603 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24608 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24612 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24615 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24619 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24622 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24794 "powerpc.tcc"
				>
				class OpCrnand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24799 "powerpc.tcc"
				>
				{
				public:
					OpCrnand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24844 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24848 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24851 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25042 "powerpc.tcc"
				>
				class OpCrnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25047 "powerpc.tcc"
				>
				{
				public:
					OpCrnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25092 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25096 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25099 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25104 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25108 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25111 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25115 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25118 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25290 "powerpc.tcc"
				>
				class OpCror : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25295 "powerpc.tcc"
				>
				{
				public:
					OpCror(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25340 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25344 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25347 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25352 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25356 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25359 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25363 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25366 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25538 "powerpc.tcc"
				>
				class OpCrorc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25543 "powerpc.tcc"
				>
				{
				public:
					OpCrorc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25588 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25592 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25595 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25600 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25604 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25607 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25611 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25614 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25786 "powerpc.tcc"
				>
				class OpCrxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25791 "powerpc.tcc"
				>
				{
				public:
					OpCrxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25836 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25840 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25843 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25848 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25852 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25855 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25859 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25862 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26034 "powerpc.tcc"
				>
				class OpMcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26039 "powerpc.tcc"
				>
				{
				public:
					OpMcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					uint32_t crfS;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26083 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26087 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26090 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26095 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26099 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26102 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26106 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26109 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_cr();
					virtual
					void
					initialize_write_cr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26275 "powerpc.tcc"
				>
				class OpLbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26280 "powerpc.tcc"
				>
				{
				public:
					OpLbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26325 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26329 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26332 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26337 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26341 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26344 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26348 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26351 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26545 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26549 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26552 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26560 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26571 "powerpc.tcc"
				>
				class OpLbzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26576 "powerpc.tcc"
				>
				{
				public:
					OpLbzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26621 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26625 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26628 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26633 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26637 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26640 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26644 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26647 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26844 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26848 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26851 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26859 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 26865 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 26870 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26881 "powerpc.tcc"
				>
				class OpLbzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26886 "powerpc.tcc"
				>
				{
				public:
					OpLbzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26931 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26935 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26938 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26943 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26947 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26950 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26954 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26957 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27157 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27161 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27164 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27172 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27178 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 27183 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27194 "powerpc.tcc"
				>
				class OpLbzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27199 "powerpc.tcc"
				>
				{
				public:
					OpLbzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27244 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27248 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27251 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27256 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27260 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27263 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27267 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27270 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27467 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27471 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27474 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27482 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27493 "powerpc.tcc"
				>
				class OpLha : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27498 "powerpc.tcc"
				>
				{
				public:
					OpLha(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27543 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27547 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27550 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27555 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27559 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27562 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27566 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27569 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27763 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27767 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27770 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27778 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27784 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27795 "powerpc.tcc"
				>
				class OpLhau : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27800 "powerpc.tcc"
				>
				{
				public:
					OpLhau(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27845 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27849 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27852 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27857 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27861 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27864 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27868 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27871 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28068 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28072 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28075 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28083 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28089 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28100 "powerpc.tcc"
				>
				class OpLhaux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28105 "powerpc.tcc"
				>
				{
				public:
					OpLhaux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28150 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28154 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28157 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28162 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28166 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28169 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28173 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28176 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28376 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28380 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28383 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28391 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28397 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28408 "powerpc.tcc"
				>
				class OpLhax : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28413 "powerpc.tcc"
				>
				{
				public:
					OpLhax(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28458 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28462 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28465 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28470 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28474 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28477 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28481 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28484 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28681 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28685 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28688 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28696 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28702 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28713 "powerpc.tcc"
				>
				class OpLhz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28718 "powerpc.tcc"
				>
				{
				public:
					OpLhz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28763 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28767 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28770 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28775 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28779 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28782 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28786 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28789 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28983 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28987 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28990 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28998 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29009 "powerpc.tcc"
				>
				class OpLhzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29014 "powerpc.tcc"
				>
				{
				public:
					OpLhzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29059 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29063 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29066 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29071 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29075 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29078 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29082 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29085 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29282 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29286 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29289 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29297 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29303 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29308 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29319 "powerpc.tcc"
				>
				class OpLhzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29324 "powerpc.tcc"
				>
				{
				public:
					OpLhzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29369 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29373 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29376 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29381 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29385 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29388 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29392 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29395 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29595 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29599 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29602 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29610 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29616 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29621 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29632 "powerpc.tcc"
				>
				class OpLhzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29637 "powerpc.tcc"
				>
				{
				public:
					OpLhzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29682 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29686 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29689 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29694 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29698 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29701 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29705 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29708 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29905 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29909 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29912 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29920 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29931 "powerpc.tcc"
				>
				class OpLwz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29936 "powerpc.tcc"
				>
				{
				public:
					OpLwz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29981 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29985 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29988 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29993 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29997 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30000 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30004 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30007 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30201 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30205 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30208 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30216 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30227 "powerpc.tcc"
				>
				class OpLwzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30232 "powerpc.tcc"
				>
				{
				public:
					OpLwzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30277 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30281 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30284 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30289 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30293 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30296 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30300 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30303 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30500 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30504 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30507 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30515 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30521 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30526 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30537 "powerpc.tcc"
				>
				class OpLwzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30542 "powerpc.tcc"
				>
				{
				public:
					OpLwzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30587 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30591 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30594 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30599 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30603 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30606 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30610 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30613 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30813 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30817 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30820 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30828 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30834 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30839 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30850 "powerpc.tcc"
				>
				class OpLwzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30855 "powerpc.tcc"
				>
				{
				public:
					OpLwzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30900 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30904 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30907 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30912 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30916 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30919 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30923 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30926 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31123 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31127 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31130 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31138 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31149 "powerpc.tcc"
				>
				class OpStb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31154 "powerpc.tcc"
				>
				{
				public:
					OpStb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31199 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31203 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31206 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31425 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31429 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31432 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31440 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31451 "powerpc.tcc"
				>
				class OpStbu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31456 "powerpc.tcc"
				>
				{
				public:
					OpStbu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31501 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31505 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31508 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31513 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31517 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31520 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31524 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31527 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31730 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31734 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31737 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31745 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 31751 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 31756 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31767 "powerpc.tcc"
				>
				class OpStbux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31772 "powerpc.tcc"
				>
				{
				public:
					OpStbux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31817 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31821 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31824 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31829 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31833 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31836 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31840 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31843 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32049 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32053 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32056 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32064 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32070 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32075 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32086 "powerpc.tcc"
				>
				class OpStbx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32091 "powerpc.tcc"
				>
				{
				public:
					OpStbx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32136 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32140 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32143 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32148 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32152 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32155 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32159 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32162 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32365 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32369 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32372 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32380 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32391 "powerpc.tcc"
				>
				class OpSth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32396 "powerpc.tcc"
				>
				{
				public:
					OpSth(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32441 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32445 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32448 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32453 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32457 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32460 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32464 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32467 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32667 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32671 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32674 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32682 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32693 "powerpc.tcc"
				>
				class OpSthu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32698 "powerpc.tcc"
				>
				{
				public:
					OpSthu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32743 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32747 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32750 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32755 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32759 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32762 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32766 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32769 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32972 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32976 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32979 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32987 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32993 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32998 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33009 "powerpc.tcc"
				>
				class OpSthux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33014 "powerpc.tcc"
				>
				{
				public:
					OpSthux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33059 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33063 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33066 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33071 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33075 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33078 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33082 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33085 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33288 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33292 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33295 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33303 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 33309 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 33314 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33325 "powerpc.tcc"
				>
				class OpSthx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33330 "powerpc.tcc"
				>
				{
				public:
					OpSthx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33375 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33379 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33382 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33387 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33391 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33394 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33398 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33401 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33601 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33605 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33608 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33616 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33627 "powerpc.tcc"
				>
				class OpStw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33632 "powerpc.tcc"
				>
				{
				public:
					OpStw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33677 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33681 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33684 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33689 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33693 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33696 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33700 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33703 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33903 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33907 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33910 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33918 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33929 "powerpc.tcc"
				>
				class OpStwu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33934 "powerpc.tcc"
				>
				{
				public:
					OpStwu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33979 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33983 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33986 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33991 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33995 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33998 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34002 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34005 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34208 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34212 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34215 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34223 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34229 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34234 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34245 "powerpc.tcc"
				>
				class OpStwux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34250 "powerpc.tcc"
				>
				{
				public:
					OpStwux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34295 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34299 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34302 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34307 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34311 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34314 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34318 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34321 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34527 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34531 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34534 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34542 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34548 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34553 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34564 "powerpc.tcc"
				>
				class OpStwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34569 "powerpc.tcc"
				>
				{
				public:
					OpStwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34614 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34618 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34621 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34626 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34630 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34633 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34637 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34640 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34843 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34847 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34850 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34858 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34869 "powerpc.tcc"
				>
				class OpLhbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34874 "powerpc.tcc"
				>
				{
				public:
					OpLhbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34919 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34923 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34926 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34931 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34935 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34938 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34942 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34945 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35142 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35146 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35149 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35157 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35168 "powerpc.tcc"
				>
				class OpLwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35173 "powerpc.tcc"
				>
				{
				public:
					OpLwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35218 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35222 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35225 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35230 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35234 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35237 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35241 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35244 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35441 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35445 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35448 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35456 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35467 "powerpc.tcc"
				>
				class OpSthbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35472 "powerpc.tcc"
				>
				{
				public:
					OpSthbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35517 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35521 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35524 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35529 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35533 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35536 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35540 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35543 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35746 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35750 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35753 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35761 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35772 "powerpc.tcc"
				>
				class OpStwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35777 "powerpc.tcc"
				>
				{
				public:
					OpStwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35822 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35826 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35829 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35834 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35838 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35841 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35845 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35848 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36051 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36055 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36058 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36066 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36077 "powerpc.tcc"
				>
				class OpLswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36082 "powerpc.tcc"
				>
				{
				public:
					OpLswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36127 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36131 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36134 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36139 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36143 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36146 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36150 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36153 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36197 "powerpc.tcc"
					resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36201 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36204 "powerpc.tcc"
					,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36208 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36211 "powerpc.tcc"
					);
					virtual
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36216 "powerpc.tcc"
					uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36220 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36223 "powerpc.tcc"
					,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36227 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36230 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36418 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36422 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36425 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36433 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36441 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36445 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36448 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36459 "powerpc.tcc"
				>
				class OpLswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36464 "powerpc.tcc"
				>
				{
				public:
					OpLswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36509 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36513 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36516 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36521 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36525 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36528 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36532 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36535 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36582 "powerpc.tcc"
					resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36586 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36589 "powerpc.tcc"
					,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36593 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36596 "powerpc.tcc"
					);
					virtual
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36601 "powerpc.tcc"
					uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36605 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36608 "powerpc.tcc"
					,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36612 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36615 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36803 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36807 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36810 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36818 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36826 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36830 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36833 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36844 "powerpc.tcc"
				>
				class OpStswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36849 "powerpc.tcc"
				>
				{
				public:
					OpStswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36894 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36898 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36901 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36906 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36910 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36913 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36917 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36920 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36967 "powerpc.tcc"
					resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36971 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36974 "powerpc.tcc"
					,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36978 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36981 "powerpc.tcc"
					);
					virtual
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36986 "powerpc.tcc"
					uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36990 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36993 "powerpc.tcc"
					,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36997 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37000 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37188 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37192 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37195 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37203 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37211 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37215 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37218 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37229 "powerpc.tcc"
				>
				class OpStswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37234 "powerpc.tcc"
				>
				{
				public:
					OpStswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37279 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37283 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37286 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37291 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37295 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37298 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37302 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37305 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37355 "powerpc.tcc"
					resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37359 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37362 "powerpc.tcc"
					,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37366 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37369 "powerpc.tcc"
					);
					virtual
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37374 "powerpc.tcc"
					uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37378 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37381 "powerpc.tcc"
					,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37385 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37388 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37576 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37580 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37583 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37591 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37599 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37603 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37606 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37617 "powerpc.tcc"
				>
				class OpLmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37622 "powerpc.tcc"
				>
				{
				public:
					OpLmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37667 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37671 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37674 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37679 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37683 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37686 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37690 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37693 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37737 "powerpc.tcc"
					resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37741 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37744 "powerpc.tcc"
					,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37748 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37751 "powerpc.tcc"
					);
					virtual
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37756 "powerpc.tcc"
					uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37760 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37763 "powerpc.tcc"
					,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37767 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37770 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37958 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37962 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37965 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37973 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37984 "powerpc.tcc"
				>
				class OpStmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37989 "powerpc.tcc"
				>
				{
				public:
					OpStmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38034 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38038 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38041 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38046 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38050 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38053 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38057 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38060 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38107 "powerpc.tcc"
					resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38111 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38114 "powerpc.tcc"
					,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38118 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38121 "powerpc.tcc"
					);
					virtual
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38126 "powerpc.tcc"
					uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38130 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38133 "powerpc.tcc"
					,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38137 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38140 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38328 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38332 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38335 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38343 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38354 "powerpc.tcc"
				>
				class OpLfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38359 "powerpc.tcc"
				>
				{
				public:
					OpLfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38404 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38408 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38411 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38416 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38420 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38423 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38427 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38430 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38630 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38634 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38637 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38645 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38656 "powerpc.tcc"
				>
				class OpLfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38661 "powerpc.tcc"
				>
				{
				public:
					OpLfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38706 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38710 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38713 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38718 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38722 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38725 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38729 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38732 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38935 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38939 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38942 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38950 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 38956 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 38961 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38972 "powerpc.tcc"
				>
				class OpLfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38977 "powerpc.tcc"
				>
				{
				public:
					OpLfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39022 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39026 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39029 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39034 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39038 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39041 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39045 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39048 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39254 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39258 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39261 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39269 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39275 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 39280 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39291 "powerpc.tcc"
				>
				class OpLfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39296 "powerpc.tcc"
				>
				{
				public:
					OpLfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39341 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39345 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39348 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39353 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39357 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39360 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39364 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39367 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39570 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39574 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39577 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39585 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39596 "powerpc.tcc"
				>
				class OpLfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39601 "powerpc.tcc"
				>
				{
				public:
					OpLfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39646 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39650 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39653 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39658 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39662 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39665 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39669 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39672 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39872 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39876 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39879 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39887 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39895 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39906 "powerpc.tcc"
				>
				class OpLfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39911 "powerpc.tcc"
				>
				{
				public:
					OpLfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39956 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39960 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39963 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39968 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39972 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39975 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39979 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39982 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40185 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40189 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40192 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40200 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40206 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40211 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40219 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40230 "powerpc.tcc"
				>
				class OpLfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40235 "powerpc.tcc"
				>
				{
				public:
					OpLfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40280 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40284 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40287 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40292 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40296 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40299 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40303 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40306 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40447 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40451 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40454 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40462 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40468 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40473 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40481 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40492 "powerpc.tcc"
				>
				class OpLfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40497 "powerpc.tcc"
				>
				{
				public:
					OpLfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40542 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40546 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40549 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40554 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40558 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40561 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40565 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40568 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40771 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40775 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40778 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40786 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40794 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40805 "powerpc.tcc"
				>
				class OpStfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40810 "powerpc.tcc"
				>
				{
				public:
					OpStfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40855 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40859 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40862 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40867 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40871 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40874 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40878 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40881 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41081 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41085 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41088 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41096 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41107 "powerpc.tcc"
				>
				class OpStfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41112 "powerpc.tcc"
				>
				{
				public:
					OpStfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41157 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41161 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41164 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41169 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41173 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41176 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41180 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41183 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41386 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41390 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41393 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41401 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41407 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41412 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41423 "powerpc.tcc"
				>
				class OpStfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41428 "powerpc.tcc"
				>
				{
				public:
					OpStfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41473 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41477 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41480 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41485 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41489 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41492 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41496 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41499 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41705 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41709 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41712 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41720 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41726 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41731 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41742 "powerpc.tcc"
				>
				class OpStfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41747 "powerpc.tcc"
				>
				{
				public:
					OpStfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41792 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41796 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41799 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42021 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42025 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42028 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42036 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42047 "powerpc.tcc"
				>
				class OpStfiwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42052 "powerpc.tcc"
				>
				{
				public:
					OpStfiwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42097 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42101 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42104 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42109 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42113 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42116 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42120 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42123 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42326 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42330 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42333 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42341 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42352 "powerpc.tcc"
				>
				class OpStfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42357 "powerpc.tcc"
				>
				{
				public:
					OpStfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42402 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42406 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42409 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42628 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42632 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42635 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42643 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42651 "powerpc.tcc"
					get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42655 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42658 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42674 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42685 "powerpc.tcc"
				>
				class OpStfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42690 "powerpc.tcc"
				>
				{
				public:
					OpStfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42735 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42739 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42742 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42747 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42751 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42754 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42758 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42761 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42964 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42968 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42971 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42979 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42985 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 42990 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42998 "powerpc.tcc"
					get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43002 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43005 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43021 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43032 "powerpc.tcc"
				>
				class OpStfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43037 "powerpc.tcc"
				>
				{
				public:
					OpStfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43082 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43086 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43089 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43094 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43098 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43101 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43105 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43108 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43314 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43318 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43321 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43329 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43335 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 43340 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43348 "powerpc.tcc"
					get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43352 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43355 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43371 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43382 "powerpc.tcc"
				>
				class OpStfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43387 "powerpc.tcc"
				>
				{
				public:
					OpStfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43432 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43436 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43439 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43444 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43448 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43451 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43455 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43458 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43661 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43665 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43668 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43676 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43684 "powerpc.tcc"
					get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43688 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43691 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43707 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43718 "powerpc.tcc"
				>
				class OpDcba : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43723 "powerpc.tcc"
				>
				{
				public:
					OpDcba(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43767 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43771 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43774 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43779 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43783 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43786 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43790 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43793 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43959 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43970 "powerpc.tcc"
				>
				class OpDcbf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43975 "powerpc.tcc"
				>
				{
				public:
					OpDcbf(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44019 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44023 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44026 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44031 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44035 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44038 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44042 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44045 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44211 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44222 "powerpc.tcc"
				>
				class OpDcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44227 "powerpc.tcc"
				>
				{
				public:
					OpDcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44271 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44275 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44278 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44283 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44287 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44290 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44294 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44297 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44460 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44471 "powerpc.tcc"
				>
				class OpDcbst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44476 "powerpc.tcc"
				>
				{
				public:
					OpDcbst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44520 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44524 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44527 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44532 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44536 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44539 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44543 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44546 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44712 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44723 "powerpc.tcc"
				>
				class OpDcbt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44728 "powerpc.tcc"
				>
				{
				public:
					OpDcbt(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44772 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44776 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44779 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44784 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44788 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44791 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44795 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44798 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44958 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44969 "powerpc.tcc"
				>
				class OpDcbtst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44974 "powerpc.tcc"
				>
				{
				public:
					OpDcbtst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45018 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45022 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45025 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45030 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45034 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45037 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45041 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45044 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45204 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45215 "powerpc.tcc"
				>
				class OpDcbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45220 "powerpc.tcc"
				>
				{
				public:
					OpDcbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45264 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45268 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45271 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45276 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45280 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45283 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45287 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45290 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45456 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45467 "powerpc.tcc"
				>
				class OpIcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45472 "powerpc.tcc"
				>
				{
				public:
					OpIcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45516 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45520 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45523 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45528 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45532 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45535 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45539 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45542 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45708 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45719 "powerpc.tcc"
				>
				class OpTlbia : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45724 "powerpc.tcc"
				>
				{
				public:
					OpTlbia(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45766 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45770 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45773 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45778 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45782 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45785 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45789 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45792 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45949 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45960 "powerpc.tcc"
				>
				class OpTlbie : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45965 "powerpc.tcc"
				>
				{
				public:
					OpTlbie(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46008 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46012 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46015 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46020 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46024 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46027 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46031 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46034 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46197 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46208 "powerpc.tcc"
				>
				class OpTlbsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46213 "powerpc.tcc"
				>
				{
				public:
					OpTlbsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46255 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46259 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46262 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46267 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46271 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46274 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46278 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46281 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46441 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46452 "powerpc.tcc"
				>
				class OpTlbld : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46457 "powerpc.tcc"
				>
				{
				public:
					OpTlbld(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46500 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46504 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46507 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46512 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46516 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46519 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46523 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46526 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46546 "powerpc.tcc"
				>
				class OpTlbli : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46551 "powerpc.tcc"
				>
				{
				public:
					OpTlbli(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46594 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46598 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46601 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46606 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46610 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46613 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46617 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46620 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46640 "powerpc.tcc"
				>
				class OpEciwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46645 "powerpc.tcc"
				>
				{
				public:
					OpEciwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46690 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46694 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46697 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46702 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46706 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46709 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46713 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46716 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46910 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 46914 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 46917 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46925 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46936 "powerpc.tcc"
				>
				class OpEcowx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46941 "powerpc.tcc"
				>
				{
				public:
					OpEcowx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46986 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46990 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46993 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46998 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47002 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47005 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47009 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47012 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47141 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47145 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47148 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47156 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47167 "powerpc.tcc"
				>
				class OpEieio : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47172 "powerpc.tcc"
				>
				{
				public:
					OpEieio(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47214 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47218 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47221 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47226 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47230 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47233 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47237 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47240 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47400 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47411 "powerpc.tcc"
				>
				class OpIsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47416 "powerpc.tcc"
				>
				{
				public:
					OpIsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47458 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47462 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47465 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47470 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47474 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47477 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47481 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47484 "powerpc.tcc"
					);
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47641 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47652 "powerpc.tcc"
				>
				class OpLwarx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47657 "powerpc.tcc"
				>
				{
				public:
					OpLwarx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47702 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47706 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47709 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47714 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47718 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47721 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47725 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47728 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47928 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47932 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47935 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47943 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47954 "powerpc.tcc"
				>
				class OpStwcx_ : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47959 "powerpc.tcc"
				>
				{
				public:
					OpStwcx_(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48004 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48008 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48011 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48016 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48020 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48023 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48027 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48030 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48199 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48210 "powerpc.tcc"
				>
				class OpSync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48215 "powerpc.tcc"
				>
				{
				public:
					OpSync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48257 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48261 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48264 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48269 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48273 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48276 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48280 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48283 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48443 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48454 "powerpc.tcc"
				>
				class OpSc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48459 "powerpc.tcc"
				>
				{
				public:
					OpSc(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48501 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48505 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48508 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48513 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48517 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48520 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48524 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48527 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48684 "powerpc.tcc"
				>
				class OpRfi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48689 "powerpc.tcc"
				>
				{
				public:
					OpRfi(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48731 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48735 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48738 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48743 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48747 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48750 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48754 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48757 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48914 "powerpc.tcc"
				>
				class OpTw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48919 "powerpc.tcc"
				>
				{
				public:
					OpTw(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48964 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48968 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48971 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48976 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48980 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48983 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48987 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48990 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49150 "powerpc.tcc"
				>
				class OpTwi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49155 "powerpc.tcc"
				>
				{
				public:
					OpTwi(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					int32_t simm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49200 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49204 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49207 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49212 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49216 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49219 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49223 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49226 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49386 "powerpc.tcc"
				>
				class OpMcrxr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49391 "powerpc.tcc"
				>
				{
				public:
					OpMcrxr(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49434 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49438 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49441 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49446 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49450 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49453 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49457 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49460 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49620 "powerpc.tcc"
				>
				class OpMfcr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49625 "powerpc.tcc"
				>
				{
				public:
					OpMfcr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49668 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49672 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49675 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49680 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49684 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49687 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49691 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49694 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49857 "powerpc.tcc"
				>
				class OpMfmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49862 "powerpc.tcc"
				>
				{
				public:
					OpMfmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49905 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49909 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49912 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49917 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49921 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49924 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49928 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49931 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50091 "powerpc.tcc"
				>
				class OpMfspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50096 "powerpc.tcc"
				>
				{
				public:
					OpMfspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50140 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50144 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50147 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50152 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50156 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50159 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50163 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50166 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50329 "powerpc.tcc"
				>
				class OpMtspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50334 "powerpc.tcc"
				>
				{
				public:
					OpMtspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50378 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50382 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50385 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50390 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50394 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50397 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50401 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50404 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50567 "powerpc.tcc"
				>
				class OpMftb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50572 "powerpc.tcc"
				>
				{
				public:
					OpMftb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t tbr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50616 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50620 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50623 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50805 "powerpc.tcc"
				>
				class OpMtcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50810 "powerpc.tcc"
				>
				{
				public:
					OpMtcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t crm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50854 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50858 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50861 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50866 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50870 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50873 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50877 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50880 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51040 "powerpc.tcc"
				>
				class OpMtmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51045 "powerpc.tcc"
				>
				{
				public:
					OpMtmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51088 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51092 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51095 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51100 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51104 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51107 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51111 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51114 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51274 "powerpc.tcc"
				>
				class OpMfsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51279 "powerpc.tcc"
				>
				{
				public:
					OpMfsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51323 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51327 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51330 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51335 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51339 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51342 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51346 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51349 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51509 "powerpc.tcc"
				>
				class OpMfsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51514 "powerpc.tcc"
				>
				{
				public:
					OpMfsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51558 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51562 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51565 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51570 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51574 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51577 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51581 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51584 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51744 "powerpc.tcc"
				>
				class OpMtsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51749 "powerpc.tcc"
				>
				{
				public:
					OpMtsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51793 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51797 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51800 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51805 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51809 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51812 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51816 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51819 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51982 "powerpc.tcc"
				>
				class OpMtsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51987 "powerpc.tcc"
				>
				{
				public:
					OpMtsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 52031 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 52035 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 52038 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 52043 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52047 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52050 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52054 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52057 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52220 "powerpc.tcc"
				>
				class OpDss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52225 "powerpc.tcc"
				>
				{
				public:
					OpDss(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52234 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52238 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52241 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52245 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52248 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52262 "powerpc.tcc"
				>
				class OpDssall : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52267 "powerpc.tcc"
				>
				{
				public:
					OpDssall(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52276 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52280 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52283 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52287 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52290 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52304 "powerpc.tcc"
				>
				class OpDst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52309 "powerpc.tcc"
				>
				{
				public:
					OpDst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52320 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52324 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52327 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52331 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52334 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52348 "powerpc.tcc"
				>
				class OpDstst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52353 "powerpc.tcc"
				>
				{
				public:
					OpDstst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52364 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52368 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52371 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52375 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52378 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52392 "powerpc.tcc"
				>
				class OpDststt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52397 "powerpc.tcc"
				>
				{
				public:
					OpDststt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52408 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52412 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52415 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52419 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52422 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52436 "powerpc.tcc"
				>
				class OpDstt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52441 "powerpc.tcc"
				>
				{
				public:
					OpDstt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52452 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52456 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52459 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52463 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52466 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52480 "powerpc.tcc"
				>
				class OpLvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52485 "powerpc.tcc"
				>
				{
				public:
					OpLvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52496 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52500 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52503 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52507 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52510 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52524 "powerpc.tcc"
				>
				class OpLvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52529 "powerpc.tcc"
				>
				{
				public:
					OpLvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52540 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52544 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52547 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52551 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52554 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52568 "powerpc.tcc"
				>
				class OpLvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52573 "powerpc.tcc"
				>
				{
				public:
					OpLvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52584 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52588 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52591 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52595 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52598 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52612 "powerpc.tcc"
				>
				class OpLvsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52617 "powerpc.tcc"
				>
				{
				public:
					OpLvsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52656 "powerpc.tcc"
				>
				class OpLvsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52661 "powerpc.tcc"
				>
				{
				public:
					OpLvsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52672 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52676 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52679 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52683 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52686 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52700 "powerpc.tcc"
				>
				class OpLvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52705 "powerpc.tcc"
				>
				{
				public:
					OpLvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52716 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52720 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52723 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52727 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52730 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52744 "powerpc.tcc"
				>
				class OpLvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52749 "powerpc.tcc"
				>
				{
				public:
					OpLvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52760 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52764 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52767 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52771 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52774 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52788 "powerpc.tcc"
				>
				class OpMfvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52793 "powerpc.tcc"
				>
				{
				public:
					OpMfvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					virtual
#line 64 "ppc.isa"
					void
#line 52802 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52806 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52809 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52813 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52816 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52833 "powerpc.tcc"
				>
				class OpMtvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52838 "powerpc.tcc"
				>
				{
				public:
					OpMtvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 52847 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52851 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52854 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52858 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52861 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52878 "powerpc.tcc"
				>
				class OpStvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52883 "powerpc.tcc"
				>
				{
				public:
					OpStvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52894 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52898 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52901 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52905 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52908 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52925 "powerpc.tcc"
				>
				class OpStvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52930 "powerpc.tcc"
				>
				{
				public:
					OpStvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52941 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52945 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52948 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52952 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52955 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52972 "powerpc.tcc"
				>
				class OpStvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52977 "powerpc.tcc"
				>
				{
				public:
					OpStvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53019 "powerpc.tcc"
				>
				class OpStvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53024 "powerpc.tcc"
				>
				{
				public:
					OpStvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53035 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53039 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53042 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53046 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53049 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53066 "powerpc.tcc"
				>
				class OpStvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53071 "powerpc.tcc"
				>
				{
				public:
					OpStvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53082 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53086 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53089 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53093 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53096 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53113 "powerpc.tcc"
				>
				class OpVaddcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53118 "powerpc.tcc"
				>
				{
				public:
					OpVaddcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53129 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53133 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53136 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53140 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53143 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53157 "powerpc.tcc"
				>
				class OpVaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53162 "powerpc.tcc"
				>
				{
				public:
					OpVaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53173 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53177 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53180 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53184 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53187 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53201 "powerpc.tcc"
				>
				class OpVaddsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53206 "powerpc.tcc"
				>
				{
				public:
					OpVaddsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53217 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53221 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53224 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53228 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53231 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53245 "powerpc.tcc"
				>
				class OpVaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53250 "powerpc.tcc"
				>
				{
				public:
					OpVaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53261 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53265 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53268 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53272 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53275 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53289 "powerpc.tcc"
				>
				class OpVaddsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53294 "powerpc.tcc"
				>
				{
				public:
					OpVaddsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53305 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53309 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53312 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53316 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53319 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53333 "powerpc.tcc"
				>
				class OpVaddubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53338 "powerpc.tcc"
				>
				{
				public:
					OpVaddubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53349 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53353 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53356 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53360 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53363 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53377 "powerpc.tcc"
				>
				class OpVaddubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53382 "powerpc.tcc"
				>
				{
				public:
					OpVaddubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53393 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53397 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53400 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53404 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53407 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53421 "powerpc.tcc"
				>
				class OpVadduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53426 "powerpc.tcc"
				>
				{
				public:
					OpVadduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53437 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53441 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53444 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53448 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53451 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53465 "powerpc.tcc"
				>
				class OpVadduhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53470 "powerpc.tcc"
				>
				{
				public:
					OpVadduhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53481 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53485 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53488 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53492 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53495 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53509 "powerpc.tcc"
				>
				class OpVadduwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53514 "powerpc.tcc"
				>
				{
				public:
					OpVadduwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53525 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53529 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53532 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53536 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53539 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53553 "powerpc.tcc"
				>
				class OpVadduws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53558 "powerpc.tcc"
				>
				{
				public:
					OpVadduws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53569 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53573 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53576 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53580 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53583 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53597 "powerpc.tcc"
				>
				class OpVand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53602 "powerpc.tcc"
				>
				{
				public:
					OpVand(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53613 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53617 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53620 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53624 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53627 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53641 "powerpc.tcc"
				>
				class OpVandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53646 "powerpc.tcc"
				>
				{
				public:
					OpVandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53657 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53661 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53664 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53668 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53671 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53685 "powerpc.tcc"
				>
				class OpVavgsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53690 "powerpc.tcc"
				>
				{
				public:
					OpVavgsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53701 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53705 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53708 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53712 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53715 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53729 "powerpc.tcc"
				>
				class OpVavgsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53734 "powerpc.tcc"
				>
				{
				public:
					OpVavgsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53745 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53749 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53752 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53756 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53759 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53773 "powerpc.tcc"
				>
				class OpVavgsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53778 "powerpc.tcc"
				>
				{
				public:
					OpVavgsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53789 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53793 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53796 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53800 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53803 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53817 "powerpc.tcc"
				>
				class OpVavgub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53822 "powerpc.tcc"
				>
				{
				public:
					OpVavgub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53833 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53837 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53840 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53844 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53847 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53858 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53861 "powerpc.tcc"
				>
				class OpVavguh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53866 "powerpc.tcc"
				>
				{
				public:
					OpVavguh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53877 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53881 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53884 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53888 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53891 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53905 "powerpc.tcc"
				>
				class OpVavguw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53910 "powerpc.tcc"
				>
				{
				public:
					OpVavguw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53921 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53925 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53928 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53932 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53935 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53949 "powerpc.tcc"
				>
				class OpVcfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53954 "powerpc.tcc"
				>
				{
				public:
					OpVcfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53965 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53969 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53972 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53976 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53979 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53993 "powerpc.tcc"
				>
				class OpVcfux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53998 "powerpc.tcc"
				>
				{
				public:
					OpVcfux(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54009 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54013 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54016 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54020 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54023 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54037 "powerpc.tcc"
				>
				class OpVcmpbfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54042 "powerpc.tcc"
				>
				{
				public:
					OpVcmpbfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54054 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54058 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54061 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54065 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54068 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54082 "powerpc.tcc"
				>
				class OpVcmpeqfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54087 "powerpc.tcc"
				>
				{
				public:
					OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54099 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54103 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54106 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54110 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54113 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54127 "powerpc.tcc"
				>
				class OpVcmpequb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54132 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54144 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54148 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54151 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54155 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54158 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54172 "powerpc.tcc"
				>
				class OpVcmpequh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54177 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54189 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54193 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54196 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54200 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54203 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54217 "powerpc.tcc"
				>
				class OpVcmpequw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54222 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54234 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54238 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54241 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54245 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54248 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54262 "powerpc.tcc"
				>
				class OpVcmpgefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54267 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54279 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54283 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54286 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54290 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54293 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54307 "powerpc.tcc"
				>
				class OpVcmpgtfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54312 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54324 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54328 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54331 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54335 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54338 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54352 "powerpc.tcc"
				>
				class OpVcmpgtsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54357 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54369 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54373 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54376 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54380 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54383 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54397 "powerpc.tcc"
				>
				class OpVcmpgtsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54402 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54442 "powerpc.tcc"
				>
				class OpVcmpgtsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54447 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54459 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54463 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54466 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54470 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54473 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54487 "powerpc.tcc"
				>
				class OpVcmpgtub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54492 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54504 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54508 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54511 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54515 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54518 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54532 "powerpc.tcc"
				>
				class OpVcmpgtuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54537 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54549 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54553 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54556 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54560 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54563 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54577 "powerpc.tcc"
				>
				class OpVcmpgtuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54582 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54594 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54598 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54601 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54605 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54608 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54622 "powerpc.tcc"
				>
				class OpVctsxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54627 "powerpc.tcc"
				>
				{
				public:
					OpVctsxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54638 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54642 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54645 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54649 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54652 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54666 "powerpc.tcc"
				>
				class OpVctuxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54671 "powerpc.tcc"
				>
				{
				public:
					OpVctuxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54682 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54686 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54689 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54693 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54696 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54710 "powerpc.tcc"
				>
				class OpVexptefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54715 "powerpc.tcc"
				>
				{
				public:
					OpVexptefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54725 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54729 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54732 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54736 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54739 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54753 "powerpc.tcc"
				>
				class OpVlogefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54758 "powerpc.tcc"
				>
				{
				public:
					OpVlogefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54768 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54772 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54775 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54779 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54782 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54796 "powerpc.tcc"
				>
				class OpVmaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54801 "powerpc.tcc"
				>
				{
				public:
					OpVmaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 54813 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54817 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54820 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54824 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54827 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54841 "powerpc.tcc"
				>
				class OpVmaxfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54846 "powerpc.tcc"
				>
				{
				public:
					OpVmaxfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54857 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54861 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54864 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54868 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54871 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54885 "powerpc.tcc"
				>
				class OpVmaxsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54890 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54901 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54905 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54908 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54912 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54915 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54929 "powerpc.tcc"
				>
				class OpVmaxsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54934 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54945 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54949 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54952 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54956 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54959 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54973 "powerpc.tcc"
				>
				class OpVmaxsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54978 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54989 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54993 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54996 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55000 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55003 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55017 "powerpc.tcc"
				>
				class OpVmaxub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55022 "powerpc.tcc"
				>
				{
				public:
					OpVmaxub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55033 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55037 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55040 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55044 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55047 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55061 "powerpc.tcc"
				>
				class OpVmaxuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55066 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55077 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55081 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55084 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55088 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55091 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55105 "powerpc.tcc"
				>
				class OpVmaxuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55110 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55121 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55125 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55128 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55132 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55135 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55149 "powerpc.tcc"
				>
				class OpVmhaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55154 "powerpc.tcc"
				>
				{
				public:
					OpVmhaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55166 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55170 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55173 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55177 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55180 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55194 "powerpc.tcc"
				>
				class OpVmhraddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55199 "powerpc.tcc"
				>
				{
				public:
					OpVmhraddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55239 "powerpc.tcc"
				>
				class OpVminfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55244 "powerpc.tcc"
				>
				{
				public:
					OpVminfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55255 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55259 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55262 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55266 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55269 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55283 "powerpc.tcc"
				>
				class OpVminsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55288 "powerpc.tcc"
				>
				{
				public:
					OpVminsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55299 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55303 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55306 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55310 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55313 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55327 "powerpc.tcc"
				>
				class OpVminsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55332 "powerpc.tcc"
				>
				{
				public:
					OpVminsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55343 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55347 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55350 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55354 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55357 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55371 "powerpc.tcc"
				>
				class OpVminsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55376 "powerpc.tcc"
				>
				{
				public:
					OpVminsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55387 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55391 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55394 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55398 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55401 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55415 "powerpc.tcc"
				>
				class OpVminub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55420 "powerpc.tcc"
				>
				{
				public:
					OpVminub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55431 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55435 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55438 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55442 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55445 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55459 "powerpc.tcc"
				>
				class OpVminuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55464 "powerpc.tcc"
				>
				{
				public:
					OpVminuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55475 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55479 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55482 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55486 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55489 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55503 "powerpc.tcc"
				>
				class OpVminuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55508 "powerpc.tcc"
				>
				{
				public:
					OpVminuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55519 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55523 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55526 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55530 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55533 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55547 "powerpc.tcc"
				>
				class OpVmladduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55552 "powerpc.tcc"
				>
				{
				public:
					OpVmladduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55564 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55568 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55571 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55575 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55578 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55592 "powerpc.tcc"
				>
				class OpVmrghb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55597 "powerpc.tcc"
				>
				{
				public:
					OpVmrghb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55608 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55612 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55615 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55619 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55622 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55636 "powerpc.tcc"
				>
				class OpVmrghh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55641 "powerpc.tcc"
				>
				{
				public:
					OpVmrghh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55652 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55656 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55659 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55663 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55666 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55680 "powerpc.tcc"
				>
				class OpVmrghw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55685 "powerpc.tcc"
				>
				{
				public:
					OpVmrghw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55696 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55700 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55703 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55707 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55710 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55724 "powerpc.tcc"
				>
				class OpVmrglb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55729 "powerpc.tcc"
				>
				{
				public:
					OpVmrglb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55740 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55744 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55747 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55751 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55754 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55768 "powerpc.tcc"
				>
				class OpVmrglh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55773 "powerpc.tcc"
				>
				{
				public:
					OpVmrglh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55784 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55788 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55791 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55795 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55798 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55812 "powerpc.tcc"
				>
				class OpVmrglw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55817 "powerpc.tcc"
				>
				{
				public:
					OpVmrglw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55828 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55832 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55835 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55839 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55842 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55856 "powerpc.tcc"
				>
				class OpVmsummbm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55861 "powerpc.tcc"
				>
				{
				public:
					OpVmsummbm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55873 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55877 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55880 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55884 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55887 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55901 "powerpc.tcc"
				>
				class OpVmsumshm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55906 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55918 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55922 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55925 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55929 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55932 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55946 "powerpc.tcc"
				>
				class OpVmsumshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55951 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55963 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55967 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55970 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55974 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55977 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55991 "powerpc.tcc"
				>
				class OpVmsumubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55996 "powerpc.tcc"
				>
				{
				public:
					OpVmsumubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56008 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56012 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56015 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56019 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56022 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56036 "powerpc.tcc"
				>
				class OpVmsumuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56041 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56053 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56057 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56060 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56064 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56067 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56081 "powerpc.tcc"
				>
				class OpVmsumuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56086 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56098 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56102 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56105 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56109 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56112 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56126 "powerpc.tcc"
				>
				class OpVmulesb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56131 "powerpc.tcc"
				>
				{
				public:
					OpVmulesb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56142 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56146 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56149 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56153 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56156 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56170 "powerpc.tcc"
				>
				class OpVmulesh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56175 "powerpc.tcc"
				>
				{
				public:
					OpVmulesh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56186 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56190 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56193 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56197 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56200 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56214 "powerpc.tcc"
				>
				class OpVmuleub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56219 "powerpc.tcc"
				>
				{
				public:
					OpVmuleub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56230 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56234 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56237 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56241 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56244 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56258 "powerpc.tcc"
				>
				class OpVmuleuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56263 "powerpc.tcc"
				>
				{
				public:
					OpVmuleuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56274 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56278 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56281 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56285 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56288 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56302 "powerpc.tcc"
				>
				class OpVmulosb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56307 "powerpc.tcc"
				>
				{
				public:
					OpVmulosb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56318 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56322 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56325 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56329 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56332 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56346 "powerpc.tcc"
				>
				class OpVmulosh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56351 "powerpc.tcc"
				>
				{
				public:
					OpVmulosh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56362 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56366 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56369 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56373 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56376 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56390 "powerpc.tcc"
				>
				class OpVmuloub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56395 "powerpc.tcc"
				>
				{
				public:
					OpVmuloub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56406 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56410 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56413 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56417 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56420 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56434 "powerpc.tcc"
				>
				class OpVmulouh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56439 "powerpc.tcc"
				>
				{
				public:
					OpVmulouh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56450 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56454 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56457 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56461 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56464 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56478 "powerpc.tcc"
				>
				class OpVnmsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56483 "powerpc.tcc"
				>
				{
				public:
					OpVnmsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56495 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56499 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56502 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56506 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56509 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56523 "powerpc.tcc"
				>
				class OpVnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56528 "powerpc.tcc"
				>
				{
				public:
					OpVnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56539 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56543 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56546 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56550 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56553 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56567 "powerpc.tcc"
				>
				class OpVor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56572 "powerpc.tcc"
				>
				{
				public:
					OpVor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56583 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56587 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56590 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56594 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56597 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56611 "powerpc.tcc"
				>
				class OpVperm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56616 "powerpc.tcc"
				>
				{
				public:
					OpVperm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56656 "powerpc.tcc"
				>
				class OpVpkpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56661 "powerpc.tcc"
				>
				{
				public:
					OpVpkpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56672 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56676 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56679 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56683 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56686 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56700 "powerpc.tcc"
				>
				class OpVpkshss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56705 "powerpc.tcc"
				>
				{
				public:
					OpVpkshss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56716 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56720 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56723 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56727 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56730 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56744 "powerpc.tcc"
				>
				class OpVpkshus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56749 "powerpc.tcc"
				>
				{
				public:
					OpVpkshus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56760 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56764 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56767 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56771 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56774 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56788 "powerpc.tcc"
				>
				class OpVpkswss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56793 "powerpc.tcc"
				>
				{
				public:
					OpVpkswss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56832 "powerpc.tcc"
				>
				class OpVpkswus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56837 "powerpc.tcc"
				>
				{
				public:
					OpVpkswus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56848 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56852 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56855 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56859 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56862 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56876 "powerpc.tcc"
				>
				class OpVpkuhum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56881 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56892 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56896 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56899 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56903 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56906 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56920 "powerpc.tcc"
				>
				class OpVpkuhus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56925 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56936 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56940 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56943 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56947 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56950 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56964 "powerpc.tcc"
				>
				class OpVpkuwum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56969 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56980 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56984 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56987 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56991 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56994 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57008 "powerpc.tcc"
				>
				class OpVpkuwus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57013 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57024 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57028 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57031 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57035 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57038 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57052 "powerpc.tcc"
				>
				class OpVrefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57057 "powerpc.tcc"
				>
				{
				public:
					OpVrefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57067 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57071 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57074 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57078 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57081 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57095 "powerpc.tcc"
				>
				class OpVrfim : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57100 "powerpc.tcc"
				>
				{
				public:
					OpVrfim(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57110 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57114 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57117 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57121 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57124 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57138 "powerpc.tcc"
				>
				class OpVrfin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57143 "powerpc.tcc"
				>
				{
				public:
					OpVrfin(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57153 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57157 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57160 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57164 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57167 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57181 "powerpc.tcc"
				>
				class OpVrfip : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57186 "powerpc.tcc"
				>
				{
				public:
					OpVrfip(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57196 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57200 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57203 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57207 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57210 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57224 "powerpc.tcc"
				>
				class OpVrfiz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57229 "powerpc.tcc"
				>
				{
				public:
					OpVrfiz(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57239 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57243 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57246 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57250 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57253 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57267 "powerpc.tcc"
				>
				class OpVrlb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57272 "powerpc.tcc"
				>
				{
				public:
					OpVrlb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57283 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57287 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57290 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57294 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57297 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57311 "powerpc.tcc"
				>
				class OpVrlh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57316 "powerpc.tcc"
				>
				{
				public:
					OpVrlh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57327 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57331 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57334 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57338 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57341 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57355 "powerpc.tcc"
				>
				class OpVrlw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57360 "powerpc.tcc"
				>
				{
				public:
					OpVrlw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57371 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57375 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57378 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57382 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57385 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57399 "powerpc.tcc"
				>
				class OpVrsqrtefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57404 "powerpc.tcc"
				>
				{
				public:
					OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57442 "powerpc.tcc"
				>
				class OpVsel : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57447 "powerpc.tcc"
				>
				{
				public:
					OpVsel(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 57459 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57463 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57466 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57470 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57473 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57487 "powerpc.tcc"
				>
				class OpVsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57492 "powerpc.tcc"
				>
				{
				public:
					OpVsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57503 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57507 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57510 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57514 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57517 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57531 "powerpc.tcc"
				>
				class OpVslb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57536 "powerpc.tcc"
				>
				{
				public:
					OpVslb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57547 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57551 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57554 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57558 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57561 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57575 "powerpc.tcc"
				>
				class OpVsldoi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57580 "powerpc.tcc"
				>
				{
				public:
					OpVsldoi(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t sh;
					virtual
#line 64 "ppc.isa"
					void
#line 57592 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57596 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57599 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57603 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57606 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57620 "powerpc.tcc"
				>
				class OpVslh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57625 "powerpc.tcc"
				>
				{
				public:
					OpVslh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57636 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57640 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57643 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57647 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57650 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57664 "powerpc.tcc"
				>
				class OpVslo : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57669 "powerpc.tcc"
				>
				{
				public:
					OpVslo(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57680 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57684 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57687 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57691 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57694 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57708 "powerpc.tcc"
				>
				class OpVslw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57713 "powerpc.tcc"
				>
				{
				public:
					OpVslw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57724 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57728 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57731 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57735 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57738 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57752 "powerpc.tcc"
				>
				class OpVspltb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57757 "powerpc.tcc"
				>
				{
				public:
					OpVspltb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57768 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57772 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57775 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57779 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57782 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57796 "powerpc.tcc"
				>
				class OpVsplth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57801 "powerpc.tcc"
				>
				{
				public:
					OpVsplth(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57812 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57816 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57819 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57823 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57826 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57840 "powerpc.tcc"
				>
				class OpVspltisb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57845 "powerpc.tcc"
				>
				{
				public:
					OpVspltisb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57884 "powerpc.tcc"
				>
				class OpVspltish : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57889 "powerpc.tcc"
				>
				{
				public:
					OpVspltish(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57900 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57904 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57907 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57911 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57914 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57928 "powerpc.tcc"
				>
				class OpVspltisw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57933 "powerpc.tcc"
				>
				{
				public:
					OpVspltisw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57944 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57948 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57951 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57955 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57958 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57972 "powerpc.tcc"
				>
				class OpVspltw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57977 "powerpc.tcc"
				>
				{
				public:
					OpVspltw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58016 "powerpc.tcc"
				>
				class OpVsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58021 "powerpc.tcc"
				>
				{
				public:
					OpVsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58032 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58036 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58039 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58043 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58046 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58060 "powerpc.tcc"
				>
				class OpVsrab : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58065 "powerpc.tcc"
				>
				{
				public:
					OpVsrab(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58076 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58080 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58083 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58087 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58090 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58104 "powerpc.tcc"
				>
				class OpVsrah : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58109 "powerpc.tcc"
				>
				{
				public:
					OpVsrah(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58120 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58124 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58127 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58131 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58134 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58148 "powerpc.tcc"
				>
				class OpVsraw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58153 "powerpc.tcc"
				>
				{
				public:
					OpVsraw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58164 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58168 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58171 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58175 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58178 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58192 "powerpc.tcc"
				>
				class OpVsrb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58197 "powerpc.tcc"
				>
				{
				public:
					OpVsrb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58208 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58212 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58215 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58219 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58222 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58236 "powerpc.tcc"
				>
				class OpVsrh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58241 "powerpc.tcc"
				>
				{
				public:
					OpVsrh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58252 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58256 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58259 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58263 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58266 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58280 "powerpc.tcc"
				>
				class OpVsro : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58285 "powerpc.tcc"
				>
				{
				public:
					OpVsro(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58296 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58300 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58303 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58307 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58310 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58324 "powerpc.tcc"
				>
				class OpVsrw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58329 "powerpc.tcc"
				>
				{
				public:
					OpVsrw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58340 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58344 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58347 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58351 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58354 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58368 "powerpc.tcc"
				>
				class OpVsubcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58373 "powerpc.tcc"
				>
				{
				public:
					OpVsubcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58384 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58388 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58391 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58395 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58398 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58412 "powerpc.tcc"
				>
				class OpVsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58417 "powerpc.tcc"
				>
				{
				public:
					OpVsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58428 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58432 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58435 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58439 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58442 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58456 "powerpc.tcc"
				>
				class OpVsubsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58461 "powerpc.tcc"
				>
				{
				public:
					OpVsubsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58472 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58476 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58479 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58483 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58486 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58500 "powerpc.tcc"
				>
				class OpVsubshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58505 "powerpc.tcc"
				>
				{
				public:
					OpVsubshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58516 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58520 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58523 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58527 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58530 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58544 "powerpc.tcc"
				>
				class OpVsubsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58549 "powerpc.tcc"
				>
				{
				public:
					OpVsubsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58560 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58564 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58567 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58571 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58574 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58588 "powerpc.tcc"
				>
				class OpVsububm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58593 "powerpc.tcc"
				>
				{
				public:
					OpVsububm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58604 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58608 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58611 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58615 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58618 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58632 "powerpc.tcc"
				>
				class OpVsububs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58637 "powerpc.tcc"
				>
				{
				public:
					OpVsububs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58648 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58652 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58655 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58659 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58662 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58676 "powerpc.tcc"
				>
				class OpVsubuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58681 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58692 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58696 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58699 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58703 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58706 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58720 "powerpc.tcc"
				>
				class OpVsubuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58725 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58736 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58740 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58743 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58747 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58750 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58764 "powerpc.tcc"
				>
				class OpVsubuwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58769 "powerpc.tcc"
				>
				{
				public:
					OpVsubuwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58780 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58784 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58787 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58791 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58794 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58808 "powerpc.tcc"
				>
				class OpVsubuws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58813 "powerpc.tcc"
				>
				{
				public:
					OpVsubuws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58824 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58828 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58831 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58835 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58838 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58852 "powerpc.tcc"
				>
				class OpVsumsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58857 "powerpc.tcc"
				>
				{
				public:
					OpVsumsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58868 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58872 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58875 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58879 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58882 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58896 "powerpc.tcc"
				>
				class OpVsum2sws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58901 "powerpc.tcc"
				>
				{
				public:
					OpVsum2sws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58912 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58916 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58919 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58923 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58926 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58940 "powerpc.tcc"
				>
				class OpVsum4sbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58945 "powerpc.tcc"
				>
				{
				public:
					OpVsum4sbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58956 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58960 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58963 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58967 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58970 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58984 "powerpc.tcc"
				>
				class OpVsum4shs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58989 "powerpc.tcc"
				>
				{
				public:
					OpVsum4shs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59000 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59004 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59007 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59011 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59014 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59028 "powerpc.tcc"
				>
				class OpVsum4ubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59033 "powerpc.tcc"
				>
				{
				public:
					OpVsum4ubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59044 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59048 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59051 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59055 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59058 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59072 "powerpc.tcc"
				>
				class OpVupkhpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59077 "powerpc.tcc"
				>
				{
				public:
					OpVupkhpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59087 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59091 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59094 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59098 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59101 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59115 "powerpc.tcc"
				>
				class OpVupkhsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59120 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59130 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59134 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59137 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59141 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59144 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59158 "powerpc.tcc"
				>
				class OpVupkhsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59163 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59173 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59177 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59180 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59184 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59187 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59201 "powerpc.tcc"
				>
				class OpVupklpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59206 "powerpc.tcc"
				>
				{
				public:
					OpVupklpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59216 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59220 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59223 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59227 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59230 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59244 "powerpc.tcc"
				>
				class OpVupklsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59249 "powerpc.tcc"
				>
				{
				public:
					OpVupklsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59259 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59263 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59266 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59270 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59273 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59287 "powerpc.tcc"
				>
				class OpVupklsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59292 "powerpc.tcc"
				>
				{
				public:
					OpVupklsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59302 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59306 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59309 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59313 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59316 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59330 "powerpc.tcc"
				>
				class OpVxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59335 "powerpc.tcc"
				>
				{
				public:
					OpVxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59346 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59350 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59353 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59357 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59360 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 59404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59407 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59411 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59415 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59419 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59422 "powerpc.tcc"
				)
				{
#line 63 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t ca; // carry out
						uint8_t ov; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						Add32(result, ca, ov, sign, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = ov ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 59468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59476 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59480 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59484 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59488 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59491 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59495 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59498 "powerpc.tcc"
				)
				{
#line 105 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "add" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59513 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59520 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59533 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59540 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59558 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59565 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59583 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59590 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59608 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59615 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59630 "powerpc.tcc"
				}
				/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
				template <
#line 38 "ppc.isa"
				class
#line 59636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59639 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59646 "powerpc.tcc"
				>::initialize_function()
				{
#line 195 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59651 "powerpc.tcc"
				}
				/** Integer **/
				template <
#line 38 "ppc.isa"
				class
#line 59657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59660 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59667 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 123 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59680 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59687 "powerpc.tcc"
				>::initialize_operands()
				{
#line 465 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 59700 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59709 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59714 "powerpc.tcc"
				> *DecodeOpAdd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 59720 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59730 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59734 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59738 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59742 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59745 "powerpc.tcc"
				)
				{
#line 110 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 59792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59800 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59804 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59808 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59812 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59815 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59819 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59822 "powerpc.tcc"
				)
				{
#line 153 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59837 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59844 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59857 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59864 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59882 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59889 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59899 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59907 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59914 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59932 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59939 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59962 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59969 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59995 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60002 "powerpc.tcc"
				>::initialize_function()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60007 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60015 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60022 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 124 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60035 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60042 "powerpc.tcc"
				>::initialize_operands()
				{
#line 476 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60056 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60065 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60070 "powerpc.tcc"
				> *DecodeOpAddc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 60076 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60086 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60090 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60094 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60098 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60101 "powerpc.tcc"
				)
				{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint32_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 60149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60157 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60161 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60165 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60169 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60172 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60176 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60179 "powerpc.tcc"
				)
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "adde" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 60186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60194 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60201 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60214 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60221 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 60228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60236 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60243 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60261 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60268 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60286 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60293 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60310 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60317 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60335 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60342 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60365 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60372 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60398 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60405 "powerpc.tcc"
				>::initialize_function()
				{
#line 197 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 60410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60418 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60425 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 125 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60438 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60445 "powerpc.tcc"
				>::initialize_operands()
				{
#line 488 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60460 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60469 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60474 "powerpc.tcc"
				> *DecodeOpAdde(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 60480 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60490 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60494 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60498 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60502 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60505 "powerpc.tcc"
				)
				{
#line 207 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = (ra != 0 ? a + simm : simm);

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 60519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60527 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60531 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60535 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60539 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60542 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60546 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60549 "powerpc.tcc"
				)
				{
#line 217 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "li r" << rd << ", " << simm;
						else
						os << "addi r" << rd << ", r" << ra << ", " << simm;
					}
#line 60559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60567 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60574 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60587 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60594 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60612 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60619 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60637 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60644 "powerpc.tcc"
				>::initialize_function()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60649 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60657 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60664 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 126 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60677 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60684 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 60696 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60705 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60710 "powerpc.tcc"
				> *DecodeOpAddi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 60716 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60726 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60730 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60734 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60738 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60741 "powerpc.tcc"
				)
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, a, simm, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 60767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60775 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60779 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60783 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60787 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60790 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60794 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60797 "powerpc.tcc"
				)
				{
#line 247 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic r" << rd << ", r" << ra << ", " << simm;
					}
#line 60804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60812 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60819 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60832 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60839 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60857 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60864 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60882 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60889 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60906 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60913 "powerpc.tcc"
				>::initialize_function()
				{
#line 199 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60926 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60933 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60938 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 60955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60958 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60965 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 60975 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60984 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60989 "powerpc.tcc"
				> *DecodeOpAddic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 60995 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61005 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61009 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61013 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61017 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61020 "powerpc.tcc"
				)
				{
#line 252 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, a, simm, 0) ;

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 61057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61065 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61069 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61073 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61077 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61080 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61084 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61087 "powerpc.tcc"
				)
				{
#line 285 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic. r" << rd << ", r" << ra << ", " << simm;
					}
#line 61094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61102 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61109 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61122 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61129 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61147 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61154 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61172 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61179 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61196 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61203 "powerpc.tcc"
				>::initialize_function()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61216 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61223 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 128 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61236 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61243 "powerpc.tcc"
				>::initialize_operands()
				{
#line 272 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
						OUTPUT(XER_T,2);

					}
#line 61254 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61263 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61268 "powerpc.tcc"
				> *DecodeOpAddic_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 61274 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61284 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61288 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61292 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61296 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61299 "powerpc.tcc"
				)
				{
#line 290 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = ra != 0 ? a + simm : simm;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 61313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61321 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61325 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61329 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61333 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61336 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61340 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61343 "powerpc.tcc"
				)
				{
#line 300 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "lis r" << rd << ", " << (simm >> 16);
						else
						os << "addis r" << rd << ", r" << ra << ", " << (simm >> 16);
					}
#line 61353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61361 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61368 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61373 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61381 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61388 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61406 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61413 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61431 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61438 "powerpc.tcc"
				>::initialize_function()
				{
#line 201 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61451 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61458 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61463 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61471 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61478 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 61490 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61499 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61504 "powerpc.tcc"
				> *DecodeOpAddis(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 61510 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61520 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61524 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61528 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61532 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61535 "powerpc.tcc"
				)
				{
#line 308 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, 0xFFFFFFFF, a, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61590 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61594 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61598 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61602 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61605 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61609 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61612 "powerpc.tcc"
				)
				{
#line 351 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61627 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61634 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61647 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61654 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 61661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61669 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61676 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61694 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61701 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61718 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61725 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61743 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61750 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 61768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61776 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61783 "powerpc.tcc"
				>::initialize_function()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 61788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61796 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61803 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 130 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61808 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 61825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61828 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61835 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 61845 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61854 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61859 "powerpc.tcc"
				> *DecodeOpAddme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 61865 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61875 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61879 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61883 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61887 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61890 "powerpc.tcc"
				)
				{
#line 356 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61945 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61949 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61953 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61957 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61960 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61964 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61967 "powerpc.tcc"
				)
				{
#line 399 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61982 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61989 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61994 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62002 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62009 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 62016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62024 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62031 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62049 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62056 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62073 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62080 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62098 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62105 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62128 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62135 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62161 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62168 "powerpc.tcc"
				>::initialize_function()
				{
#line 203 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 62173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62181 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62188 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 131 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62201 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62208 "powerpc.tcc"
				>::initialize_operands()
				{
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62222 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62231 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62236 "powerpc.tcc"
				> *DecodeOpAddze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 62242 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62252 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62256 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62260 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62264 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62267 "powerpc.tcc"
				)
				{
#line 405 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely((a == 0x80000000UL && b == 0xffffffffUL) || b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();
								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: LT=0 GT=0 EQ=0 SO=XER[SO]
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0);

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Read the input operands
							int32_t a = cpu->GetGPR(ra);
							int32_t b = cpu->GetGPR(rb);

							// Compute the result
							int32_t result = a / b;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62356 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62360 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62364 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62368 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62371 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62375 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62378 "powerpc.tcc"
				)
				{
#line 482 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62393 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62400 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62413 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62420 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62438 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62445 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62463 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62470 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62488 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62495 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62518 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62525 "powerpc.tcc"
				>::initialize_function()
				{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62538 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62545 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 132 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62558 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62565 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62578 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62587 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62592 "powerpc.tcc"
				> *DecodeOpDivw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 62598 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62608 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62612 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62616 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62620 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62623 "powerpc.tcc"
				)
				{
#line 487 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely(b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=0 CR0[GT]=0 CR0[EQ]=1
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_EQ_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = a / b ;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62710 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62714 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62718 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62722 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62725 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62729 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62732 "powerpc.tcc"
				)
				{
#line 562 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62747 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62754 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62767 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62774 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62784 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62792 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62799 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62809 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62817 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62824 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62842 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62849 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62872 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62879 "powerpc.tcc"
				>::initialize_function()
				{
#line 205 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62892 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62899 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 133 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62912 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62919 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62932 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62941 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62946 "powerpc.tcc"
				> *DecodeOpDivwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 62952 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62962 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62966 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 62970 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62974 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62977 "powerpc.tcc"
				)
				{
#line 568 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (int32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63018 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63022 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63026 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63030 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63033 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63037 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63040 "powerpc.tcc"
				)
				{
#line 597 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhw" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63055 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63062 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63075 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63082 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63100 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63107 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63117 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63125 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63132 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63150 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63157 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63180 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63187 "powerpc.tcc"
				>::initialize_function()
				{
#line 206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63200 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63207 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 134 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63220 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63227 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63240 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63249 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63254 "powerpc.tcc"
				> *DecodeOpMulhw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 63260 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63270 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63274 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63278 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63282 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63285 "powerpc.tcc"
				)
				{
#line 602 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint64_t result64 = (uint64_t) a * (uint64_t) b;
						uint32_t result = (uint32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63326 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63330 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63334 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63338 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63341 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63345 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63348 "powerpc.tcc"
				)
				{
#line 631 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhwu" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63363 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63370 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63383 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63390 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63408 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63415 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63433 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63440 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63450 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63458 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63465 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63488 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63495 "powerpc.tcc"
				>::initialize_function()
				{
#line 207 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63500 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63508 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63515 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 135 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63528 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63535 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63548 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63557 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63562 "powerpc.tcc"
				> *DecodeOpMulhwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 63568 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63578 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63582 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63586 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63590 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63593 "powerpc.tcc"
				)
				{
#line 636 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) simm;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 63608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63616 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63620 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63624 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63628 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63631 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63635 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63638 "powerpc.tcc"
				)
				{
#line 647 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulli r" << rd << ", r" << ra << ", " << simm;
					}
#line 63645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63653 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63660 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63673 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63680 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63698 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63705 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63723 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63730 "powerpc.tcc"
				>::initialize_function()
				{
#line 208 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 63735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63743 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63750 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 136 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 63755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63763 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63770 "powerpc.tcc"
				>::initialize_operands()
				{
#line 234 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 63778 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63787 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63792 "powerpc.tcc"
				> *DecodeOpMulli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 63798 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63808 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63812 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63816 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63820 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63823 "powerpc.tcc"
				)
				{
#line 652 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							if(oe && (0xFFFFFFFF00000000ULL & result64) != 0)
							{
								// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
								xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 63867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63875 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63879 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63883 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63887 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63890 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63894 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63897 "powerpc.tcc"
				)
				{
#line 692 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mullw r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63912 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63919 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63932 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63939 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63957 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63964 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63982 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63989 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64007 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64014 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64037 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64044 "powerpc.tcc"
				>::initialize_function()
				{
#line 209 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 64049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64057 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64064 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 137 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ if (oe) LAT(5); else LAT(4); }
#line 64069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64077 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64084 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64097 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64106 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64111 "powerpc.tcc"
				> *DecodeOpMullw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 64117 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64127 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64131 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64135 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64139 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64142 "powerpc.tcc"
				)
				{
#line 697 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						if(a == 0x80000000UL)
						{
							// Write back the result
							cpu->SetGPR(rd, 0x80000000UL);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=1 CR0[GT]=0 CR0[EQ]=0
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_LT_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = -a; // 2's complement of a: (~a) + 1;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 64218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64226 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64230 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64234 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64238 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64241 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64245 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64248 "powerpc.tcc"
				)
				{
#line 769 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "neg" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 64255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64263 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64270 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64283 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64290 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64308 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64315 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64325 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64333 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64340 "powerpc.tcc"
				>::initialize_function()
				{
#line 210 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64353 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64360 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 138 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64373 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64380 "powerpc.tcc"
				>::initialize_operands()
				{
#line 234 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 64388 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64397 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64402 "powerpc.tcc"
				> *DecodeOpNeg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 64408 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64418 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64422 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64426 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64430 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64433 "powerpc.tcc"
				)
				{
#line 774 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t sign; // sign
						uint8_t overflow; // overflow

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result;
						Add32(result, carry, overflow, sign, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 64479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64487 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64491 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64495 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64499 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64502 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64506 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64509 "powerpc.tcc"
				)
				{
#line 816 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subf" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64524 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64531 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64544 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64551 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64569 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64576 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64594 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64601 "powerpc.tcc"
				>::initialize_function()
				{
#line 211 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64614 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64621 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64634 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64641 "powerpc.tcc"
				>::initialize_operands()
				{
#line 465 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64654 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64663 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64668 "powerpc.tcc"
				> *DecodeOpSubf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 64674 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64684 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64688 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64692 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64696 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64699 "powerpc.tcc"
				)
				{
#line 821 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 64745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64753 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64757 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64761 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64765 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64768 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64772 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64775 "powerpc.tcc"
				)
				{
#line 863 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64790 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64797 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64810 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64817 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64835 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64842 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64860 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64867 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64893 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64900 "powerpc.tcc"
				>::initialize_function()
				{
#line 212 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64913 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64920 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 140 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64933 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64940 "powerpc.tcc"
				>::initialize_operands()
				{
#line 476 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64954 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64963 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64968 "powerpc.tcc"
				> *DecodeOpSubfc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 64974 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64984 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64988 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 64992 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64996 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64999 "powerpc.tcc"
				)
				{
#line 868 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65055 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65059 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65063 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65067 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65070 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65074 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65077 "powerpc.tcc"
				)
				{
#line 912 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfe" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 65084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65092 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65099 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65104 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65112 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65119 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65126 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65134 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65141 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65159 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65166 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65175 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65183 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65190 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65208 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65215 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65233 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65241 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65248 "powerpc.tcc"
				>::initialize_function()
				{
#line 213 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65261 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65268 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65281 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65288 "powerpc.tcc"
				>::initialize_operands()
				{
#line 488 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 65303 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65312 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65317 "powerpc.tcc"
				> *DecodeOpSubfe(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 65323 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65333 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65337 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65341 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65345 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65348 "powerpc.tcc"
				)
				{
#line 917 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow = 0; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = simm;
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, -a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = (carry || a == 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 65375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65383 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65387 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65391 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65395 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65398 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65402 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65405 "powerpc.tcc"
				)
				{
#line 940 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfic r" << rd << ", r" << ra << ", " << simm;
					}
#line 65412 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65420 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65427 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65440 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65447 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65465 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65472 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65490 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65497 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65514 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65521 "powerpc.tcc"
				>::initialize_function()
				{
#line 214 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 65526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65534 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65541 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 142 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65546 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65566 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65573 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65583 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65592 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65597 "powerpc.tcc"
				> *DecodeOpSubfic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 65603 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65613 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65617 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65621 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65625 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65628 "powerpc.tcc"
				)
				{
#line 945 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, 0xFFFFFFFF, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65675 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65683 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65687 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65691 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65695 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65698 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65702 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65705 "powerpc.tcc"
				)
				{
#line 988 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 65712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65720 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65727 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65740 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65747 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65762 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65769 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65787 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65794 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65811 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65818 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65828 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65836 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65843 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65869 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65876 "powerpc.tcc"
				>::initialize_function()
				{
#line 215 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65889 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65896 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 143 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65901 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65921 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65928 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65938 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65947 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65952 "powerpc.tcc"
				> *DecodeOpSubfme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 65958 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65968 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65972 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 65976 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65980 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65983 "powerpc.tcc"
				)
				{
#line 993 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 66030 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66038 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66042 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66046 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66050 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66053 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66057 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66060 "powerpc.tcc"
				)
				{
#line 1036 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 66067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66075 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66082 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66095 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66102 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 66109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66117 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66124 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66142 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66149 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66166 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66173 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66191 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66198 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 66216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66224 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66231 "powerpc.tcc"
				>::initialize_function()
				{
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 66236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66244 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66251 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 144 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66264 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66271 "powerpc.tcc"
				>::initialize_operands()
				{
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 66285 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66294 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66299 "powerpc.tcc"
				> *DecodeOpSubfze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 66305 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER COMPARE INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 66317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66320 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66324 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66328 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66332 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66335 "powerpc.tcc"
				)
				{
#line 1047 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66361 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66365 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66369 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66373 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66376 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66380 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66383 "powerpc.tcc"
				)
				{
#line 1061 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmp cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66398 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66405 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66418 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66425 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66443 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66450 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66468 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66475 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66492 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66499 "powerpc.tcc"
				>::initialize_function()
				{
#line 217 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66512 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66519 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66524 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66532 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66539 "powerpc.tcc"
				>::initialize_operands()
				{
#line 752 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66550 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66559 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66564 "powerpc.tcc"
				> *DecodeOpCmp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 66570 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66580 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66584 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66588 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66592 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66595 "powerpc.tcc"
				)
				{
#line 1066 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < simm) ? CONFIG::CR0_LT_MASK : (a > simm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66623 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66627 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66631 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66635 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66638 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66642 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66645 "powerpc.tcc"
				)
				{
#line 1082 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpi cr" << crfD << ", " << l << ", r" << ra << ", " << simm;
					}
#line 66652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66660 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66667 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66680 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66687 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66705 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66712 "powerpc.tcc"
				>::initialize_function()
				{
#line 218 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66725 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66732 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 146 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66745 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66752 "powerpc.tcc"
				>::initialize_operands()
				{
#line 384 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66762 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66771 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66776 "powerpc.tcc"
				> *DecodeOpCmpi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 66782 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66792 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66796 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66800 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66804 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66807 "powerpc.tcc"
				)
				{
#line 1087 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66828 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66836 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66840 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66844 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66848 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66851 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66855 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66858 "powerpc.tcc"
				)
				{
#line 1104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpl cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66873 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66880 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66893 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66900 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66918 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66925 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66943 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66950 "powerpc.tcc"
				>::initialize_function()
				{
#line 219 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66963 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66970 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66983 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66990 "powerpc.tcc"
				>::initialize_operands()
				{
#line 752 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 67001 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67010 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67015 "powerpc.tcc"
				> *DecodeOpCmpl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 67021 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67031 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67035 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67039 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67043 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67046 "powerpc.tcc"
				)
				{
#line 1109 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < uimm) ? CONFIG::CR0_LT_MASK : (a > uimm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67066 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67074 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67078 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67082 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67086 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67089 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67093 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67096 "powerpc.tcc"
				)
				{
#line 1125 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpli cr" << crfD << ", " << l << ", r" << ra << ", " << uimm;
					}
#line 67103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67111 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67118 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67131 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67138 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67156 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67163 "powerpc.tcc"
				>::initialize_function()
				{
#line 220 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67176 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67183 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 148 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67196 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67203 "powerpc.tcc"
				>::initialize_operands()
				{
#line 384 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 67213 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67222 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67227 "powerpc.tcc"
				> *DecodeOpCmpli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 67233 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 67245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67248 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67252 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67256 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67260 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67263 "powerpc.tcc"
				)
				{
#line 1136 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67303 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67307 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67311 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67315 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67318 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67322 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67325 "powerpc.tcc"
				)
				{
#line 1164 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "and" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67340 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67347 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67360 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67367 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67385 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67392 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67410 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67417 "powerpc.tcc"
				>::initialize_function()
				{
#line 221 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67430 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 149 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67450 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67470 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67479 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67484 "powerpc.tcc"
				> *DecodeOpAnd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 67490 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67500 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67504 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67508 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67512 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67515 "powerpc.tcc"
				)
				{
#line 1169 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67555 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67559 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67563 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67567 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67570 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67574 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67577 "powerpc.tcc"
				)
				{
#line 1197 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67592 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67599 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67612 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67619 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67637 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67644 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67662 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67669 "powerpc.tcc"
				>::initialize_function()
				{
#line 222 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67682 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67689 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67702 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67709 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67722 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67731 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67736 "powerpc.tcc"
				> *DecodeOpAndc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 67742 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67752 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67756 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67760 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67764 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67767 "powerpc.tcc"
				)
				{
#line 1202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67801 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67805 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67809 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67813 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67816 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67820 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67823 "powerpc.tcc"
				)
				{
#line 1224 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andi. r" << ra << ", r" << rs << ", " << uimm;
					}
#line 67830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67838 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67845 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67858 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67865 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67883 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67890 "powerpc.tcc"
				>::initialize_function()
				{
#line 223 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67903 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67910 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 151 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67923 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67930 "powerpc.tcc"
				>::initialize_operands()
				{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 67939 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67948 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67953 "powerpc.tcc"
				> *DecodeOpAndi_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 67959 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67969 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67973 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 67977 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67981 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67984 "powerpc.tcc"
				)
				{
#line 1229 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 68010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68018 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68022 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68026 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68030 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68033 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68037 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68040 "powerpc.tcc"
				)
				{
#line 1251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andis. r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 68047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68055 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68062 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68075 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68082 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68100 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68107 "powerpc.tcc"
				>::initialize_function()
				{
#line 224 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68120 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68127 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 152 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68132 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68140 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68147 "powerpc.tcc"
				>::initialize_operands()
				{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 68156 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68165 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68170 "powerpc.tcc"
				> *DecodeOpAndis_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 68176 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68186 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68190 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68194 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68198 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68201 "powerpc.tcc"
				)
				{
#line 1256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						// 	uint32_t result = 0;
						// 	uint32_t m = 1 << 31;
						// 	while(result < 32)
						// 	{
							// 		if(s & m) break;
							// 		m >>= 1;
							// 		result++;
							// 	}

						uint32_t result = CountLeadingZeros(s);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68248 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68252 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68256 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68260 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68263 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68267 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68270 "powerpc.tcc"
				)
				{
#line 1291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cntlzw" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68285 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68292 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68305 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68312 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68330 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68337 "powerpc.tcc"
				>::initialize_function()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68350 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68357 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 153 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68370 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68377 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68389 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68398 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68403 "powerpc.tcc"
				> *DecodeOpCntlzw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 68409 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68419 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68423 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68427 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68431 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68434 "powerpc.tcc"
				)
				{
#line 1296 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s ^ b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68474 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68478 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68482 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68486 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68489 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68493 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68496 "powerpc.tcc"
				)
				{
#line 1324 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "eqv" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 68503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68511 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68518 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68531 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68538 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68556 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68563 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68581 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68588 "powerpc.tcc"
				>::initialize_function()
				{
#line 226 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68593 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68601 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68608 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 154 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68621 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68628 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68641 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68650 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68655 "powerpc.tcc"
				> *DecodeOpEqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 68661 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68671 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68675 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68679 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68683 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68686 "powerpc.tcc"
				)
				{
#line 1329 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int8_t)(uint8_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68725 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68729 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68733 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68737 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68740 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68744 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68747 "powerpc.tcc"
				)
				{
#line 1356 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsb" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68762 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68769 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68782 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68789 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68807 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68814 "powerpc.tcc"
				>::initialize_function()
				{
#line 227 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68827 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68834 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 155 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68847 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68854 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68866 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68875 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68880 "powerpc.tcc"
				> *DecodeOpExtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 68886 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68896 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68900 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68904 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68908 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68911 "powerpc.tcc"
				)
				{
#line 1361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int16_t)(uint16_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68950 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68954 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68958 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68962 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68965 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68969 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68972 "powerpc.tcc"
				)
				{
#line 1388 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsh" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68987 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68994 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69007 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69014 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69032 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69039 "powerpc.tcc"
				>::initialize_function()
				{
#line 228 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69052 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69059 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 156 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69072 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69079 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 69091 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69100 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69105 "powerpc.tcc"
				> *DecodeOpExtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 69111 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69121 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69125 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69129 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69133 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69136 "powerpc.tcc"
				)
				{
#line 1393 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s & b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69176 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69180 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69184 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69188 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69191 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69195 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69198 "powerpc.tcc"
				)
				{
#line 1421 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "nand" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69213 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69220 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69233 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69240 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69258 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69265 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69283 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69290 "powerpc.tcc"
				>::initialize_function()
				{
#line 229 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69303 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69310 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 157 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69323 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69330 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69343 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69352 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69357 "powerpc.tcc"
				> *DecodeOpNand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNand<
#line 38 "ppc.isa"
					CONFIG
#line 69363 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69373 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69377 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69381 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69385 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69388 "powerpc.tcc"
				)
				{
#line 1426 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s | b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69428 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69432 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69436 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69440 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69443 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69447 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69450 "powerpc.tcc"
				)
				{
#line 1454 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "not" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "nor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69468 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69475 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69488 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69495 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69513 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69520 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69538 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69545 "powerpc.tcc"
				>::initialize_function()
				{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69558 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69565 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69578 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69585 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69598 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69607 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69612 "powerpc.tcc"
				> *DecodeOpNor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNor<
#line 38 "ppc.isa"
					CONFIG
#line 69618 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69628 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69632 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69636 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69640 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69643 "powerpc.tcc"
				)
				{
#line 1462 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69675 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69683 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69687 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69691 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69695 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69698 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69702 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69705 "powerpc.tcc"
				)
				{
#line 1490 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "mr" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "or" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69723 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69730 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69743 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69750 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69768 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69775 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69793 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69800 "powerpc.tcc"
				>::initialize_function()
				{
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69813 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69820 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 159 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69833 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69840 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69853 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69862 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69867 "powerpc.tcc"
				> *DecodeOpOr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOr<
#line 38 "ppc.isa"
					CONFIG
#line 69873 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69883 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69887 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69891 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69895 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69898 "powerpc.tcc"
				)
				{
#line 1498 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69938 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69942 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69946 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69950 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69953 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69957 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69960 "powerpc.tcc"
				)
				{
#line 1526 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "orc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69975 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69982 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69995 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70002 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70020 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70027 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70045 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70052 "powerpc.tcc"
				>::initialize_function()
				{
#line 232 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70065 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70072 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 160 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70085 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70092 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70105 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70114 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70119 "powerpc.tcc"
				> *DecodeOpOrc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 70125 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70135 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70139 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70143 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70147 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70150 "powerpc.tcc"
				)
				{
#line 1531 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70172 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70176 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70180 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70184 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70187 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70191 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70194 "powerpc.tcc"
				)
				{
#line 1541 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == 0 && ra == 0 && uimm == 0)
						os << "nop";
						else
						os << "ori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70212 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70219 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70232 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70239 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70257 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70264 "powerpc.tcc"
				>::initialize_function()
				{
#line 233 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70269 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70277 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70284 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 161 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70289 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70298 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70305 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70313 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70322 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70327 "powerpc.tcc"
				> *DecodeOpOri(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOri<
#line 38 "ppc.isa"
					CONFIG
#line 70333 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70343 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70347 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70351 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70355 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70358 "powerpc.tcc"
				)
				{
#line 1549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70380 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70384 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70388 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70392 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70395 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70399 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70402 "powerpc.tcc"
				)
				{
#line 1559 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "oris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 70409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70417 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70424 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70437 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70444 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70462 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70469 "powerpc.tcc"
				>::initialize_function()
				{
#line 234 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70482 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70489 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 162 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70494 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70503 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70510 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70518 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70527 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70532 "powerpc.tcc"
				> *DecodeOpOris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOris<
#line 38 "ppc.isa"
					CONFIG
#line 70538 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70548 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70552 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70556 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70560 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70563 "powerpc.tcc"
				)
				{
#line 1564 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s ^ b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 70595 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70603 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70607 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70611 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70615 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70618 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70622 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70625 "powerpc.tcc"
				)
				{
#line 1592 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 70632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70640 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70647 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70660 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70667 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70685 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70692 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70710 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70717 "powerpc.tcc"
				>::initialize_function()
				{
#line 235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70730 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70737 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 163 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70750 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70757 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70770 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70779 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70784 "powerpc.tcc"
				> *DecodeOpXor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXor<
#line 38 "ppc.isa"
					CONFIG
#line 70790 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70800 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70804 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70808 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70812 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70815 "powerpc.tcc"
				)
				{
#line 1597 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70837 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70841 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70845 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70849 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70852 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70856 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70859 "powerpc.tcc"
				)
				{
#line 1607 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70874 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70881 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70894 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70901 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70919 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70926 "powerpc.tcc"
				>::initialize_function()
				{
#line 236 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70939 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70946 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 164 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70951 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70960 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70967 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70975 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70984 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70989 "powerpc.tcc"
				> *DecodeOpXori(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXori<
#line 38 "ppc.isa"
					CONFIG
#line 70995 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71005 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71009 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71013 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71017 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71020 "powerpc.tcc"
				)
				{
#line 1612 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 71034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71042 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71046 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71050 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71054 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71057 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71061 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71064 "powerpc.tcc"
				)
				{
#line 1622 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xoris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 71071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71079 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71086 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71099 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71106 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71124 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71131 "powerpc.tcc"
				>::initialize_function()
				{
#line 237 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71144 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71151 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 165 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71156 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 71162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71165 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71172 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 71180 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71189 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71194 "powerpc.tcc"
				> *DecodeOpXoris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 71200 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71215 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71219 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71223 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71227 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71230 "powerpc.tcc"
				)
				{
#line 1633 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = (r & mask) | (a & ~mask);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71272 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71276 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71280 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71284 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71287 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71291 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71294 "powerpc.tcc"
				)
				{
#line 1663 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwimi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71309 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71316 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71329 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71336 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71354 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71361 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71371 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71379 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71386 "powerpc.tcc"
				>::initialize_function()
				{
#line 238 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71399 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71406 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 166 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71419 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71426 "powerpc.tcc"
				>::initialize_operands()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71439 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71448 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71453 "powerpc.tcc"
				> *DecodeOpRlwimi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 71459 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71469 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71473 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71477 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71481 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71484 "powerpc.tcc"
				)
				{
#line 1668 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71525 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71529 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71533 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71537 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71540 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71544 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71547 "powerpc.tcc"
				)
				{
#line 1697 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwinm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71562 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71569 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71582 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71589 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71607 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71614 "powerpc.tcc"
				>::initialize_function()
				{
#line 239 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71627 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71634 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 167 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71647 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71654 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71666 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71675 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71680 "powerpc.tcc"
				> *DecodeOpRlwinm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 71686 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71696 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71700 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71704 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71708 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71711 "powerpc.tcc"
				)
				{
#line 1702 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t r = RotateLeft(s, b);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71753 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71757 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71761 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71765 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71768 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71772 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71775 "powerpc.tcc"
				)
				{
#line 1732 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwnm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb << ", " << mb << ", " << me;
					}
#line 71782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71790 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71797 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71810 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71817 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71835 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71842 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71860 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71867 "powerpc.tcc"
				>::initialize_function()
				{
#line 240 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71880 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71887 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 168 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71900 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71907 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 71920 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71929 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71934 "powerpc.tcc"
				> *DecodeOpRlwnm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 71940 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER SHIFT INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71959 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 71963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71970 "powerpc.tcc"
				)
				{
#line 1743 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = (b & 0x20) ? 0 : s << (b & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72010 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72014 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72018 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72022 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72025 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72029 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72032 "powerpc.tcc"
				)
				{
#line 1771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "slw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72047 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72054 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72059 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72067 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72074 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72092 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72099 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72117 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72124 "powerpc.tcc"
				>::initialize_function()
				{
#line 241 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72137 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72144 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 169 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72157 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72164 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72177 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72186 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72191 "powerpc.tcc"
				> *DecodeOpSlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 72197 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72207 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72211 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72215 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72219 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72222 "powerpc.tcc"
				)
				{
#line 1776 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(b == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=1
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else if(b & 0x20)
						{
							if(s < 0)
							{
								result = 0xffffffff;
								// Generate XER[CA]
								xer = (s & 0x7fffffff) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
							}
							else
							{
								result = 0;
								// Generate XER[CA]: XER[CA]=0
								xer = xer & ~CONFIG::XER_CA_MASK;
							}
						}
						else
						{
							b = b & 0x1f;
							result = (int32_t) s >> b;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - b)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Write back the result
						cpu->SetGPR(ra, result);

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72292 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72296 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72300 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72304 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72307 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72311 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72314 "powerpc.tcc"
				)
				{
#line 1834 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "sraw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72329 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72336 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72349 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72356 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72374 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72381 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72399 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72406 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72423 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72430 "powerpc.tcc"
				>::initialize_function()
				{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72443 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72450 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 170 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72463 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72470 "powerpc.tcc"
				>::initialize_operands()
				{
#line 403 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72484 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72493 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72498 "powerpc.tcc"
				> *DecodeOpSraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 72504 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72514 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72518 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72522 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72526 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72529 "powerpc.tcc"
				)
				{
#line 1839 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(sh == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=0
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else
						{
							result = s >> sh;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - sh)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72582 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72586 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72590 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72594 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72597 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72601 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72604 "powerpc.tcc"
				)
				{
#line 1880 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srawi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh;
					}
#line 72611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72619 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72626 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72639 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72646 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72664 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72671 "powerpc.tcc"
				>::initialize_function()
				{
#line 243 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72684 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72691 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 171 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72704 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72711 "powerpc.tcc"
				>::initialize_operands()
				{
#line 330 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 72724 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72733 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72738 "powerpc.tcc"
				> *DecodeOpSrawi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 72744 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72754 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72758 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72762 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72766 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72769 "powerpc.tcc"
				)
				{
#line 1885 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						unsigned int sh = b & 0x3f;
						uint32_t result = (sh & 0x20) ? 0 : s >> (sh & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72810 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72814 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72818 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72822 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72825 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72829 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72832 "powerpc.tcc"
				)
				{
#line 1914 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72847 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72854 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72859 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72867 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72874 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72892 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72899 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72917 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72924 "powerpc.tcc"
				>::initialize_function()
				{
#line 244 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72937 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72944 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 172 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72957 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72964 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72977 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72986 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72991 "powerpc.tcc"
				> *DecodeOpSrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 72997 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************************************

				FLOATING-POINT ARITHMETIC INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 73042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73045 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73049 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73053 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73057 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73060 "powerpc.tcc"
				)
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73122 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73126 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73130 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73134 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73137 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73141 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73144 "powerpc.tcc"
				)
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73159 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73166 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73179 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73186 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73204 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73211 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73229 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73236 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73246 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73254 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73261 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73270 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73278 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73285 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73297 "powerpc.tcc"
				}
				/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 73303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73306 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73313 "powerpc.tcc"
				>::initialize_function()
				{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73326 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73333 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 86 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73346 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73353 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73368 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73377 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73382 "powerpc.tcc"
				> *DecodeOpFadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 73388 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73398 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73402 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73406 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73410 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73413 "powerpc.tcc"
				)
				{
#line 310 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73477 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73481 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73485 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73489 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73492 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73496 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73499 "powerpc.tcc"
				)
				{
#line 362 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73514 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73521 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73534 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73541 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73551 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73559 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73566 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73584 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73591 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73609 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73616 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73633 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73640 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73660 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73667 "powerpc.tcc"
				>::initialize_function()
				{
#line 254 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73680 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73687 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73692 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73700 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73707 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73722 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73731 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73736 "powerpc.tcc"
				> *DecodeOpFadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 73742 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73752 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73756 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73760 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73764 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73767 "powerpc.tcc"
				)
				{
#line 367 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73831 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73835 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73839 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73843 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73846 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73850 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73853 "powerpc.tcc"
				)
				{
#line 419 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdiv" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73868 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73875 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73888 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73895 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73913 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73920 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73938 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73945 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73963 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73970 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73987 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73994 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74014 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74021 "powerpc.tcc"
				>::initialize_function()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74034 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74041 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(31); }
#line 74046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74054 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74061 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74076 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74085 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74090 "powerpc.tcc"
				> *DecodeOpFdiv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 74096 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74106 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74110 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74114 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74118 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74121 "powerpc.tcc"
				)
				{
#line 424 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						uint32_t old_fpscr = fpscr;
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74178 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74186 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74190 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74194 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74198 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74201 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74205 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74208 "powerpc.tcc"
				)
				{
#line 477 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdivs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 74215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74223 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74230 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74248 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74255 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74273 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74280 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74290 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74298 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74305 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74322 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74329 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74349 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74356 "powerpc.tcc"
				>::initialize_function()
				{
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74369 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74376 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 89 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(17); }
#line 74381 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74386 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74389 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74396 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74411 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74420 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74425 "powerpc.tcc"
				> *DecodeOpFdivs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 74431 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74441 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74445 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74449 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74453 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74456 "powerpc.tcc"
				)
				{
#line 482 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74518 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74522 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74526 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74530 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74533 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74537 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74540 "powerpc.tcc"
				)
				{
#line 532 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmul" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74555 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74562 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74575 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74582 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74600 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74607 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74625 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74632 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74650 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74657 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74674 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74681 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74701 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74708 "powerpc.tcc"
				>::initialize_function()
				{
#line 257 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74721 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74728 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 96 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74741 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74748 "powerpc.tcc"
				>::initialize_operands()
				{
#line 536 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74763 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74772 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74777 "powerpc.tcc"
				> *DecodeOpFmul(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 74783 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74793 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74797 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74801 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74805 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74808 "powerpc.tcc"
				)
				{
#line 537 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74872 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74876 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74880 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74884 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74887 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74891 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74894 "powerpc.tcc"
				)
				{
#line 589 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmuls" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74901 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74909 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74916 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74929 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74936 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74946 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74954 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74961 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74971 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74979 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74986 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75004 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75011 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75028 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75035 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75055 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75062 "powerpc.tcc"
				>::initialize_function()
				{
#line 258 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75075 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75082 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 97 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 75087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75095 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75102 "powerpc.tcc"
				>::initialize_operands()
				{
#line 536 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75117 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75126 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75131 "powerpc.tcc"
				> *DecodeOpFmuls(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 75137 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75147 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75151 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75155 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75159 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75162 "powerpc.tcc"
				)
				{
#line 594 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								SoftFloat result(b.queryValue() | 0x400000UL);// QNaN (b with high order bit of mantissa set)
								cpu->SetFPR(fd, SoftDouble(result, flags));
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Write back result
							cpu->SetFPR(fd, SoftDouble(b, flags)); // QNaN (b)
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isInfty()))
						{
							if(b.isNegative())
							{
								// b = -infinity
								cpu->SetFPR(fd, SoftDouble(0x8000000000000000ULL)); // -0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
							else
							{
								// b = +infinity
								cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
						}
						else
						{
							SoftFloat result(0x3f800000ULL); // 1.0

							// Compute the result
							result.divAssign(b, flags);

							// Generate OX, UX, ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_OX<CONFIG>(fpscr, flags);
							GenFPSCR_UX<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);

							// Write back the result
							cpu->SetFPR(fd, SoftDouble(result, flags));
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75283 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75291 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75295 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75299 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75303 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75306 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75310 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75313 "powerpc.tcc"
				)
				{
#line 711 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fres" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75328 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75335 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75348 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75355 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75373 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75380 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75398 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75405 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75422 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75429 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75449 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75456 "powerpc.tcc"
				>::initialize_function()
				{
#line 259 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75469 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75476 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 90 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(10); }
#line 75481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75489 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75496 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75510 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75519 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75524 "powerpc.tcc"
				> *DecodeOpFres(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFres<
#line 38 "ppc.isa"
					CONFIG
#line 75530 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75540 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75544 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75548 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75552 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75555 "powerpc.tcc"
				)
				{
#line 716 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						const SoftDouble& b = cpu->GetFPR(fb);

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
								// Write back result
								cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							// Write back result
							cpu->SetFPR(fd, b); // QNaN (b)
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isNegative()))
						{
							// -infinity <= b < 0
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSQRT
							fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
						}
						else if(unlikely(b.isInfty()))
						{
							// b = +infinity
							cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							// 0 < b < infinity

							// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
							// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
							SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

							// Newton-Raphson method
							SoftDouble half(0x3fe0000000000000ULL); // 0.5
							SoftDouble three(0x4008000000000000ULL); // 3.0

							unsigned int i;
							for(i = 0; i < 5; i++)
							{
								// Newton-Raphson iteration
								// w = b * u * u
								SoftDouble w(b);
								w.multAssign(u, flags);
								w.multAssign(u, flags);
								// v = 3.0 - w
								SoftDouble v(three);
								v.minusAssign(w, flags);
								// u = 0.5 * u * v
								u.multAssign(half, flags);
								u.multAssign(v, flags);
							}

							// Write back result
							cpu->SetFPR(fd, u);

							// Generate ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_ZX<CONFIG>(fpscr, flags);
							GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75706 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75710 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75714 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75718 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75721 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75725 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75728 "powerpc.tcc"
				)
				{
#line 855 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsqrte" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75743 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75750 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75763 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75770 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75788 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75795 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75813 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75820 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75837 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75844 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75864 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75871 "powerpc.tcc"
				>::initialize_function()
				{
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75884 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75891 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 109 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75904 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75911 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75925 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75934 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75939 "powerpc.tcc"
				> *DecodeOpFrsqrte(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 75945 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75959 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 75963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75970 "powerpc.tcc"
				)
				{
#line 860 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76032 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76036 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76040 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76044 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76047 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76051 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76054 "powerpc.tcc"
				)
				{
#line 910 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76069 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76076 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76089 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76096 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76106 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76114 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76121 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76131 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76139 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76146 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76164 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76171 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76188 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76195 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76215 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76222 "powerpc.tcc"
				>::initialize_function()
				{
#line 261 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76235 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76242 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 110 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76255 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76262 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76277 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76286 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76291 "powerpc.tcc"
				> *DecodeOpFsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 76297 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76307 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76311 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76315 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76319 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76322 "powerpc.tcc"
				)
				{
#line 915 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));

					}
#line 76379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76387 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76391 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76395 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76399 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76402 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76406 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76409 "powerpc.tcc"
				)
				{
#line 968 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76424 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76431 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76444 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76451 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76469 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76476 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76494 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76501 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76519 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76526 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76543 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76550 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76570 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76577 "powerpc.tcc"
				>::initialize_function()
				{
#line 262 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76590 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76597 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 111 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76610 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76617 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76632 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76641 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76646 "powerpc.tcc"
				> *DecodeOpFsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 76652 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76662 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76666 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76670 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76674 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76677 "powerpc.tcc"
				)
				{
#line 973 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute and write the result
						cpu->SetFPR(fd, ((!a.isZero() && a.isNegative()) || a.isNaN()) ? b : c);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76709 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76713 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76717 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76721 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76724 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76728 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76731 "powerpc.tcc"
				)
				{
#line 993 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsel" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 76738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76746 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76753 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76766 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76773 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76783 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76791 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76798 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76808 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76816 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76823 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76833 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76841 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76848 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76858 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76866 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76873 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76882 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76890 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76897 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76917 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76924 "powerpc.tcc"
				>::initialize_function()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76937 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76944 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 112 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76957 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76964 "powerpc.tcc"
				>::initialize_operands()
				{
#line 575 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 76978 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76987 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76992 "powerpc.tcc"
				> *DecodeOpFsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 76998 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77008 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77012 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77016 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77020 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77023 "powerpc.tcc"
				)
				{
#line 998 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77039 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77043 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77047 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77051 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77054 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77058 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77061 "powerpc.tcc"
				)
				{
#line 1002 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrt" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77076 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77083 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77088 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77096 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77103 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77113 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77121 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77128 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77146 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77153 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77170 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77177 "powerpc.tcc"
				>::initialize_function()
				{
#line 264 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77190 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77197 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 113 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77210 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77217 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77231 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77240 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77245 "powerpc.tcc"
				> *DecodeOpFsqrt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 77251 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77261 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77265 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77269 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77273 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77276 "powerpc.tcc"
				)
				{
#line 1007 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77292 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77296 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77300 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77304 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77307 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77311 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77314 "powerpc.tcc"
				)
				{
#line 1011 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrts" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77329 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77336 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77349 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77356 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77374 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77381 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77399 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77406 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77423 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77430 "powerpc.tcc"
				>::initialize_function()
				{
#line 265 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77443 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77450 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 114 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77463 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77470 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77484 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77493 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77498 "powerpc.tcc"
				> *DecodeOpFsqrts(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 77504 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************************

				FLOATING POINT MULTIPLY-ADD INSTRUCTIONS

				******************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 77516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77519 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77523 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77527 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77531 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77534 "powerpc.tcc"
				)
				{
#line 1022 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77598 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77602 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77606 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77610 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77613 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77617 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77620 "powerpc.tcc"
				)
				{
#line 1074 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 77627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77635 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77642 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77655 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77662 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77680 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77687 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77705 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77712 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77730 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77737 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77755 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77762 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77779 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77786 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 77798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77806 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77813 "powerpc.tcc"
				>::initialize_function()
				{
#line 266 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77826 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77833 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 98 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 77838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77846 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77853 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77869 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77878 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77883 "powerpc.tcc"
				> *DecodeOpFmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 77889 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77899 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77903 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77907 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77911 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77914 "powerpc.tcc"
				)
				{
#line 1079 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77981 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77985 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77989 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77993 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77996 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78000 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78003 "powerpc.tcc"
				)
				{
#line 1134 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78018 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78025 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78030 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78038 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78045 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78063 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78070 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78088 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78095 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78113 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78120 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78130 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78138 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78145 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78162 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78169 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78181 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78189 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78196 "powerpc.tcc"
				>::initialize_function()
				{
#line 267 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78209 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78216 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 99 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78229 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78236 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78266 "powerpc.tcc"
				> *DecodeOpFmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 78272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78282 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78286 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78290 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78294 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78297 "powerpc.tcc"
				)
				{
#line 1139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78361 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78365 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78369 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78373 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78376 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78380 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78383 "powerpc.tcc"
				)
				{
#line 1191 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78398 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78405 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78418 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78425 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78443 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78450 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78468 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78475 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78485 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78493 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78500 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78518 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78525 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78542 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78549 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78569 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78576 "powerpc.tcc"
				>::initialize_function()
				{
#line 268 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78589 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78596 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 78601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78609 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78616 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78632 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78641 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78646 "powerpc.tcc"
				> *DecodeOpFmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 78652 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78662 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78666 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78670 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78674 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78677 "powerpc.tcc"
				)
				{
#line 1196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78744 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78748 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78752 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78756 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78759 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78763 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78766 "powerpc.tcc"
				)
				{
#line 1251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78781 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78788 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78801 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78808 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78826 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78833 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78851 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78858 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78876 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78883 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78901 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78908 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78925 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78932 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78944 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78952 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78959 "powerpc.tcc"
				>::initialize_function()
				{
#line 269 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78964 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78972 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78979 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 101 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78984 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78992 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78999 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79015 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79024 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79029 "powerpc.tcc"
				> *DecodeOpFmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 79035 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79045 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79049 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79053 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79057 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79060 "powerpc.tcc"
				)
				{
#line 1256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79127 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79131 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79135 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79139 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79142 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79146 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79149 "powerpc.tcc"
				)
				{
#line 1311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79164 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79171 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79184 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79191 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79209 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79216 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79234 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79241 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79259 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79266 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79276 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79284 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79291 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79308 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79315 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79335 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79342 "powerpc.tcc"
				>::initialize_function()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79355 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79362 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 79367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79375 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79382 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79398 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79407 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79412 "powerpc.tcc"
				> *DecodeOpFnmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 79418 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79428 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79432 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79436 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79440 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79443 "powerpc.tcc"
				)
				{
#line 1316 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79513 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79517 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79521 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79525 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79528 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79532 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79535 "powerpc.tcc"
				)
				{
#line 1374 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79550 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79557 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79570 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79577 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79595 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79602 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79620 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79627 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79645 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79652 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79670 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79677 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79694 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79701 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79721 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79728 "powerpc.tcc"
				>::initialize_function()
				{
#line 271 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79741 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79748 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 105 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79761 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79768 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79784 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79793 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79798 "powerpc.tcc"
				> *DecodeOpFnmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 79804 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79814 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79818 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79822 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79826 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79829 "powerpc.tcc"
				)
				{
#line 1379 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79896 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79900 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79904 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79908 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79911 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79915 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79918 "powerpc.tcc"
				)
				{
#line 1434 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79933 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79940 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79953 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79960 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79978 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79985 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80003 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80010 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80028 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80035 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80053 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80060 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80077 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80084 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80104 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80111 "powerpc.tcc"
				>::initialize_function()
				{
#line 272 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80124 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80131 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 106 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 80136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80144 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80151 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80167 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80176 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80181 "powerpc.tcc"
				> *DecodeOpFnmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 80187 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80197 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80201 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80205 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80209 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80212 "powerpc.tcc"
				)
				{
#line 1439 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 80273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80281 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80285 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80289 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80293 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80296 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80300 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80303 "powerpc.tcc"
				)
				{
#line 1496 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 80310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80318 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80325 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80338 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80345 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80363 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80370 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80388 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80395 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80413 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80420 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80438 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80445 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80462 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80469 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80489 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80496 "powerpc.tcc"
				>::initialize_function()
				{
#line 273 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80509 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80516 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 107 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80529 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80536 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80552 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80561 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80566 "powerpc.tcc"
				> *DecodeOpFnmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 80572 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT COMPARE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 80584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80587 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80591 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80595 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80599 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80602 "powerpc.tcc"
				)
				{
#line 1507 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							std::cerr << "Internal error" << std::endl;
							abort();
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN and VXVC
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
							}
						}
						if(unlikely(a.isQNaN() || b.isQNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80678 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80682 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80686 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80690 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80693 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80697 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80700 "powerpc.tcc"
				)
				{
#line 1571 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpo cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 80707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80715 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80722 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80735 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80742 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80752 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80760 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80767 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80785 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80792 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80809 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80816 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80833 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80840 "powerpc.tcc"
				>::initialize_function()
				{
#line 274 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80853 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80860 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 91 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80873 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80880 "powerpc.tcc"
				>::initialize_operands()
				{
#line 761 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 80893 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80902 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80907 "powerpc.tcc"
				> *DecodeOpFcmpo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 80913 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80923 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80927 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 80931 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80935 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80938 "powerpc.tcc"
				)
				{
#line 1576 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							std::cerr << "Internal error" << std::endl;
							abort();
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81006 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81010 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81014 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81018 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81021 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81025 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81028 "powerpc.tcc"
				)
				{
#line 1632 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpu cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 81035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81043 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81050 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81063 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81070 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81088 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81095 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81113 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81120 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81137 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81144 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81161 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81168 "powerpc.tcc"
				>::initialize_function()
				{
#line 275 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81181 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81188 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81201 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81208 "powerpc.tcc"
				>::initialize_operands()
				{
#line 761 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 81221 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81230 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81235 "powerpc.tcc"
				> *DecodeOpFcmpu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 81241 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT ROUNDING-CONVERTING INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 81253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81256 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81260 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81264 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81268 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81271 "powerpc.tcc"
				)
				{
#line 1643 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81348 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81352 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81356 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81360 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81363 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81367 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81370 "powerpc.tcc"
				)
				{
#line 1708 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiw" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81385 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81392 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81405 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81412 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81430 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81437 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81455 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81462 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81479 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81486 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81506 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81513 "powerpc.tcc"
				>::initialize_function()
				{
#line 276 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81518 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81526 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81533 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 93 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81546 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81553 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81567 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81576 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81581 "powerpc.tcc"
				> *DecodeOpFctiw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 81587 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81597 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81601 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81605 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81609 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81612 "powerpc.tcc"
				)
				{
#line 1714 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.setRoundingMode(RN_ZERO);
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81690 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81694 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81698 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81702 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81705 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81709 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81712 "powerpc.tcc"
				)
				{
#line 1780 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiwz" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81727 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81734 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81747 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81754 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81764 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81772 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81779 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81797 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81804 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81813 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81821 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81828 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81840 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81848 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81855 "powerpc.tcc"
				>::initialize_function()
				{
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81868 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81875 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 94 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81888 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81895 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81909 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81918 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81923 "powerpc.tcc"
				> *DecodeOpFctiwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 81929 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81939 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81943 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 81947 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81951 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81954 "powerpc.tcc"
				)
				{
#line 1785 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						flags.clearKeepSignalingConversion();
						flags.setUpApproximateInfty();
						SoftFloat result(b, flags);
						flags.clearUpApproximateInfty();
						flags.setKeepSignalingConversion();

						// Generate OX, UX, VXSNAN, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82018 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82022 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82026 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82030 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82033 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82037 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82040 "powerpc.tcc"
				)
				{
#line 1837 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsp" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82055 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82062 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82075 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82082 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82100 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82107 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82117 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82125 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82132 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82149 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82156 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82176 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82183 "powerpc.tcc"
				>::initialize_function()
				{
#line 278 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82196 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82203 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 108 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82216 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82223 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82237 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82246 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82251 "powerpc.tcc"
				> *DecodeOpFrsp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 82257 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT MOVE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 82269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82272 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82276 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82280 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82284 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82287 "powerpc.tcc"
				)
				{
#line 1848 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isNegative())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82325 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82329 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82333 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82337 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82340 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82344 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82347 "powerpc.tcc"
				)
				{
#line 1874 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82362 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82369 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82374 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82382 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82389 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82399 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82407 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82414 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82424 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82432 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82439 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82456 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82463 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82483 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82490 "powerpc.tcc"
				>::initialize_function()
				{
#line 279 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82495 "powerpc.tcc"
				}
				/** Floating **/
				template <
#line 38 "ppc.isa"
				class
#line 82501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82504 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82511 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82524 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82531 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82543 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82552 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82557 "powerpc.tcc"
				> *DecodeOpFabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 82563 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82573 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82577 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82581 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82585 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82588 "powerpc.tcc"
				)
				{
#line 1879 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						cpu->SetFPR(fd, cpu->GetFPR(fb));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82615 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82619 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82623 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82627 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82630 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82634 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82637 "powerpc.tcc"
				)
				{
#line 1894 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmr" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82652 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82659 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82664 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82672 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82679 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82697 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82704 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82714 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82722 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82729 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82746 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82753 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82765 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82773 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82780 "powerpc.tcc"
				>::initialize_function()
				{
#line 280 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82793 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82800 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 95 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82813 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82820 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82832 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82841 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82846 "powerpc.tcc"
				> *DecodeOpFmr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 82852 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82862 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82866 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82870 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82874 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82877 "powerpc.tcc"
				)
				{
#line 1899 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isPositive())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82907 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82915 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82919 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82923 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82927 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82930 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82934 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82937 "powerpc.tcc"
				)
				{
#line 1925 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82944 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82952 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82959 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82964 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82972 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82979 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82989 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82994 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82997 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83004 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83022 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83029 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83038 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83046 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83053 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83073 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83080 "powerpc.tcc"
				>::initialize_function()
				{
#line 281 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83093 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83100 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 102 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83113 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83120 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83132 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83141 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83146 "powerpc.tcc"
				> *DecodeOpFnabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 83152 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83162 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83166 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83170 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83174 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83177 "powerpc.tcc"
				)
				{
#line 1930 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fb);

						// Compute the result
						result.opposite();

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83210 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83214 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83218 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83222 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83225 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83229 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83232 "powerpc.tcc"
				)
				{
#line 1951 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fneg" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 83239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83247 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83254 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83267 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83274 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83292 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83299 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83309 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83317 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83324 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83333 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83341 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83348 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83360 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83368 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83375 "powerpc.tcc"
				>::initialize_function()
				{
#line 282 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83388 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83395 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 103 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83408 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83415 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83427 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83436 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83441 "powerpc.tcc"
				> *DecodeOpFneg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 83447 "powerpc.tcc"
					>(code, addr);
				}

				/*****************************************************************

				FLOATING-POINT STATUS & CONTROL REGISTER INSTRUCTIONS

				*****************************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 83459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83462 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83466 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83470 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83474 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83477 "powerpc.tcc"
				)
				{
#line 1962 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();

						// Extract FPSCR source 4-bit field
						uint32_t c = (fpscr >> (4 * (7 - crfS))) & 0xf;
						// Copy it into CR 4-bit destination field
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << (4 * (7 - crfS))));
						if(unlikely(crfS == 0))
						cpu->SetFPSCR(fpscr & 0x9fffffffUL); // Don't clear FEX and VX bits
						else
						cpu->SetFPSCR(fpscr & ~(0xffUL << (4 * (7 - crfS)))); // clear bit field
					}
#line 83501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83509 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83513 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83517 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83521 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83524 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83528 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83531 "powerpc.tcc"
				)
				{
#line 1982 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mcrfs cr" << crfD << ", cr" << crfS;
					}
#line 83538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83546 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83553 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83566 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83573 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83588 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83595 "powerpc.tcc"
				>::initialize_function()
				{
#line 283 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83608 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83615 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83620 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83628 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83635 "powerpc.tcc"
				>::initialize_operands()
				{
#line 808 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(FPSCRF_T, crfS);
						OUTPUT(CR_T, crfD);
						//  INPUT(FPSCR_T, crfS);
						INPUT(FPSCR_T, 0);
					}
#line 83646 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83655 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83660 "powerpc.tcc"
				> *DecodeOpMcrfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 83666 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83676 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83680 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83684 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83688 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83691 "powerpc.tcc"
				)
				{
#line 1987 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Move FPSCR into destination FPR
						uint32_t fpscr = cpu->GetFPSCR();
						uint64_t _f;
						_f = (uint64_t) fpscr | 0xfff8000000000000ULL;
						cpu->SetFPR(fd, SoftDouble(_f));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83720 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83724 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83728 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83732 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83735 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83739 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83742 "powerpc.tcc"
				)
				{
#line 2004 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mffs" << (rc ? "." : "") << " f" << fd;
					}
#line 83749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83757 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83764 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83777 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83784 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83799 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83806 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83824 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83831 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83840 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83848 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83855 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83875 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83882 "powerpc.tcc"
				>::initialize_function()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83895 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83902 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 116 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83907 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83915 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83922 "powerpc.tcc"
				>::initialize_operands()
				{
#line 665 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T,0);
						OUTPUT(FPR_T, fd);
						if (rc)
						{
							OUTPUT(CR_T,1);
						}
					}
#line 83934 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83943 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83948 "powerpc.tcc"
				> *DecodeOpMffs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 83954 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83964 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83968 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 83972 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83976 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83979 "powerpc.tcc"
				)
				{
#line 2009 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr & (~(1 << (31 - crbD)));
						}

						// Generate VX, FEX
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						cpu->SetFPSCR(fpscr);


						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84016 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84020 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84024 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84028 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84031 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84035 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84038 "powerpc.tcc"
				)
				{
#line 2034 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb0" << (rc ? "." : "") << " crb" << crbD;
					}
#line 84045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84053 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84060 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84073 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84080 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84095 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84102 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84122 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84129 "powerpc.tcc"
				>::initialize_function()
				{
#line 285 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84142 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84149 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84162 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84169 "powerpc.tcc"
				>::initialize_operands()
				{
#line 854 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84182 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84191 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84196 "powerpc.tcc"
				> *DecodeOpMtfsb0(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 84202 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84212 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84216 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84220 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84224 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84227 "powerpc.tcc"
				)
				{
#line 2039 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr | (1 << (31 - crbD));
							cpu->SetFPSCR(fpscr);
						}
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84257 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84261 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84265 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84269 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84272 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84276 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84279 "powerpc.tcc"
				)
				{
#line 2057 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb1" << (rc ? "." : "") << " cr" << crbD;
					}
#line 84286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84294 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84301 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84314 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84321 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84336 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84343 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84363 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84370 "powerpc.tcc"
				>::initialize_function()
				{
#line 286 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84383 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84390 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 118 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84403 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84410 "powerpc.tcc"
				>::initialize_operands()
				{
#line 854 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84423 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84432 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84437 "powerpc.tcc"
				> *DecodeOpMtfsb1(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 84443 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84453 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84457 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84461 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84465 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84468 "powerpc.tcc"
				)
				{
#line 2062 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t _m, fpscr, _fm, _rb,_c;
						int _i;
						_rb = cpu->GetFPR(fb).queryValue();
						fpscr = cpu->GetFPSCR();
						_fm = fm;

						if(_fm & 0x80)
						{
							_m = 0x60000000;
						}
						else
						{
							_m=0x0;
						}
						_c=0x1;
						for(_i=0;_i< 8;_i++)
						{
							if(_c & _fm)
							{
								_m= _m | (0xf<<(_i*4));
							}
							_c=_c<<1;
						}
						fpscr = _rb & _m;
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84516 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84520 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84524 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84528 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84531 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84535 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84538 "powerpc.tcc"
				)
				{
#line 2098 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsf" << (rc ? "." : "") << " " << fm << ", f" << fb;
					}
#line 84545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84553 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84560 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84573 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84580 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84595 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84602 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 84612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84620 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84627 "powerpc.tcc"
				>::initialize_function()
				{
#line 287 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84640 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84647 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 119 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84660 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84667 "powerpc.tcc"
				>::initialize_operands()
				{
#line 772 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						OUTPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
					}
#line 84680 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84689 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84694 "powerpc.tcc"
				> *DecodeOpMtfsf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 84700 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84710 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84714 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84718 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84722 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84725 "powerpc.tcc"
				)
				{
#line 2103 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t mask = crfD ? 0xf : 0x9;
						uint32_t fpscr = cpu->GetFPSCR();
						fpscr = (fpscr & (~(0xf << (4 * (7 - crfD))))) | ((imm & mask) << (4 * (7 - crfD)));
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84744 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84752 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84756 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84760 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84764 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84767 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84771 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84774 "powerpc.tcc"
				)
				{
#line 2118 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsfi" << (rc ? "." : "") << " cr" << crfD << ", " << imm;
					}
#line 84781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84789 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84796 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84809 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84816 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84831 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84838 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84858 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84865 "powerpc.tcc"
				>::initialize_function()
				{
#line 288 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84878 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84885 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84898 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84905 "powerpc.tcc"
				>::initialize_operands()
				{
#line 796 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						//  OUTPUT(CR_T, crfD);
						OUTPUT(FPSCR_T, 0);
					}
#line 84919 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84928 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84933 "powerpc.tcc"
				> *DecodeOpMtfsfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 84939 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 84979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84982 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84986 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 84990 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84994 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84997 "powerpc.tcc"
				)
				{
#line 59 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? li : cpu->GetCIA() + li;
						cpu->SetNIA(target_addr);
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85014 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85018 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85022 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85026 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85029 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85033 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85036 "powerpc.tcc"
				)
				{
#line 64 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = (aa ? li : Operation<CONFIG>::GetAddr() + li);
						os << "b" << (lk ? "l" : "") << (aa ? "a" : "") << " ";
						os << "0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85057 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85064 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85077 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85084 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85096 "powerpc.tcc"
				}
				/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
				template <
#line 38 "ppc.isa"
				class
#line 85102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85105 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85112 "powerpc.tcc"
				>::initialize_function()
				{
#line 140 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranch;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 85120 "powerpc.tcc"
				}
				/** Branch **/
				template <
#line 38 "ppc.isa"
				class
#line 85126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85129 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85136 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85141 "powerpc.tcc"
				}
				/* Dependancies for Branch Instruction */
				template <
#line 38 "ppc.isa"
				class
#line 85147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85150 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85157 "powerpc.tcc"
				>::initialize_operands()
				{
#line 152 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85175 "powerpc.tcc"
				>
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85179 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85183 "powerpc.tcc"
				>::get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85187 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85190 "powerpc.tcc"
				,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85194 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85197 "powerpc.tcc"
				)
				{
#line 44 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? li : cia + li);
					}
#line 85204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85212 "powerpc.tcc"
				>
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85216 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85220 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85224 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85227 "powerpc.tcc"
				)
				{
#line 72 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Unconditional branch is statically predicted taken
						return true;
					}
#line 85235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85243 "powerpc.tcc"
				>
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85247 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85251 "powerpc.tcc"
				>::branch_linked()
				{
#line 104 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85258 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85266 "powerpc.tcc"
				>
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85270 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85274 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 124 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return false;
					}
#line 85281 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85290 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85295 "powerpc.tcc"
				> *DecodeOpB(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpB<
#line 38 "ppc.isa"
					CONFIG
#line 85301 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85311 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85315 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85319 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85323 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85326 "powerpc.tcc"
				)
				{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						uint32_t ctr_ok, cond_ok, ok;

						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}

						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						ok = ctr_ok && cond_ok;

						if(ok) {
							typename CONFIG::address_t target_addr = aa ? bd : cpu->GetCIA() + bd;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85380 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85384 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85388 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85392 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85395 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85399 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85402 "powerpc.tcc"
				)
				{
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? bd : Operation<CONFIG>::GetAddr() + bd;
						switch(bo)
						{
							case 0: os << "bdnzf"; break;
							case 2: os << "bdzf"; break;
							case 4: os << "bf"; break;
							case 8: os << "bdnzt"; break;
							case 10: os << "bdzt"; break;
							case 12: os << "bt"; break;
							case 16: os << "bdnz"; break;
							case 18: os << "bdz"; break;
							default: os << "bc";
						}
						if(lk) os << "l";
						if(aa) os << "a";
						os << " ";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: case 16: case 18: os << bi; break;
							default: os << bo << ", " << bi;
						}
						os << ", 0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85442 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85449 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85462 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85469 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 337 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85489 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85496 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 346 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85516 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85523 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85543 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85550 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 409 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85570 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85577 "powerpc.tcc"
				>::initialize_function()
				{
#line 144 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnConditionalBranch;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 85585 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85593 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85600 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 69 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85613 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85620 "powerpc.tcc"
				>::initialize_operands()
				{
#line 160 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if( (bo & 16) == 0 )
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85647 "powerpc.tcc"
				>
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85651 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85655 "powerpc.tcc"
				>::get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85659 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85662 "powerpc.tcc"
				,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85666 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85669 "powerpc.tcc"
				)
				{
#line 48 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? bd : cia + bd);
					}
#line 85676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85684 "powerpc.tcc"
				>
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85688 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85692 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85696 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85699 "powerpc.tcc"
				)
				{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// bd represent the displacement
						// bo represent the behavior of the branch
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04) || (bd < 0));
					}
#line 85709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85717 "powerpc.tcc"
				>
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85721 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85725 "powerpc.tcc"
				>::branch_linked()
				{
#line 108 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85740 "powerpc.tcc"
				>
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85744 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85748 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 128 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 85755 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85764 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85769 "powerpc.tcc"
				> *DecodeOpBc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBc<
#line 38 "ppc.isa"
					CONFIG
#line 85775 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85785 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85789 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85793 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85797 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85800 "powerpc.tcc"
				)
				{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						if(bo & 8) throw IllegalInstructionException<CONFIG>();
						int cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if(cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85835 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85839 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85843 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85847 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85850 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85854 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85857 "powerpc.tcc"
				)
				{
#line 170 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 4: os << "bfctr"; break;
							case 12: os << "btctr"; break;
						case 20:
							if(bi == 0)
							{
								os << "bctr";
								break;
							}
							// no break if bi != 0
						default:
							os << "bcctr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 4: case 12: os << " " << bi; break;
							case 20: if(bi == 0) break;
							// no break if bi != 0
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85898 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85905 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85918 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85925 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 331 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 85934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85942 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85949 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 346 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85969 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85976 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85988 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85996 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86003 "powerpc.tcc"
				>::initialize_function()
				{
#line 148 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchCountReg;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 86011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86019 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86026 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 70 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86039 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86046 "powerpc.tcc"
				>::initialize_operands()
				{
#line 177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CTR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86069 "powerpc.tcc"
				>
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86073 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86077 "powerpc.tcc"
				>::get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86081 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86084 "powerpc.tcc"
				,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86088 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86091 "powerpc.tcc"
				)
				{
#line 52 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetCTR() & 0xfffffffc);
					}
#line 86098 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86106 "powerpc.tcc"
				>
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86110 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86114 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86118 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86121 "powerpc.tcc"
				)
				{
#line 84 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86130 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86138 "powerpc.tcc"
				>
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86142 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86146 "powerpc.tcc"
				>::branch_linked()
				{
#line 112 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86161 "powerpc.tcc"
				>
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86165 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86169 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 132 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86176 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86185 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86190 "powerpc.tcc"
				> *DecodeOpBcctr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 86196 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86206 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86210 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86214 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86218 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86221 "powerpc.tcc"
				)
				{
#line 201 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						int ctr_ok, cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						if(ctr_ok && cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 86263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86271 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86275 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86279 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86283 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86286 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86290 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86293 "powerpc.tcc"
				)
				{
#line 239 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 0: os << "bdnzflr"; break;
							case 2: os << "bdzflr"; break;
							case 4: os << "bflr"; break;
							case 8: os << "bdnztlr"; break;
							case 10: os << "bdztlr"; break;
							case 12: os << "btlr"; break;
							case 16: os << "bdnzlr"; break;
							case 18: os << "bdzlr"; break;
							case 20: os << "blr"; break;
							default: os << "bclr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: os << " " << bi; break;
							case 16: case 18: case 20: break;
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 86324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86332 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86339 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 86344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86352 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86359 "powerpc.tcc"
				>::initialize_read_lr()
				{
#line 325 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86376 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86383 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 337 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86403 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86410 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 346 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86430 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86437 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86449 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86457 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86464 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 409 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86476 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86484 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86491 "powerpc.tcc"
				>::initialize_function()
				{
#line 152 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchLinkReg;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 86499 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86507 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86514 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 71 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86527 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86534 "powerpc.tcc"
				>::initialize_operands()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(LR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86562 "powerpc.tcc"
				>
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86566 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86570 "powerpc.tcc"
				>::get_target_address(
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86574 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86577 "powerpc.tcc"
				,
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86581 "powerpc.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86584 "powerpc.tcc"
				)
				{
#line 56 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetLR() & 0xfffffffc);
					}
#line 86591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86599 "powerpc.tcc"
				>
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86603 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86607 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86611 "powerpc.tcc"
#line 68 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86614 "powerpc.tcc"
				)
				{
#line 91 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86631 "powerpc.tcc"
				>
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86635 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86639 "powerpc.tcc"
				>::branch_linked()
				{
#line 116 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86654 "powerpc.tcc"
				>
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86658 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86662 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 136 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86669 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86678 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86683 "powerpc.tcc"
				> *DecodeOpBclr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 86689 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 86729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86732 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86736 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86740 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86744 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86747 "powerpc.tcc"
				)
				{
#line 36 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & _b)<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 86760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86768 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86772 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86776 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86780 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86783 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86787 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86790 "powerpc.tcc"
				)
				{
#line 45 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 86797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86805 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86812 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 86817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86825 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86832 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 86839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86847 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86854 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86863 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86871 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86878 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86895 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86902 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86911 "powerpc.tcc"
				}
				/** Condition Register **/
				template <
#line 38 "ppc.isa"
				class
#line 86917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86920 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86927 "powerpc.tcc"
				>::initialize_function()
				{
#line 181 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 86932 "powerpc.tcc"
				}
				/** Condition **/
				template <
#line 38 "ppc.isa"
				class
#line 86938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86941 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86948 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 74 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86953 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86961 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86968 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 86999 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87008 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87013 "powerpc.tcc"
				> *DecodeOpCrand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 87019 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87029 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87033 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87037 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87041 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87044 "powerpc.tcc"
				)
				{
#line 50 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87065 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87069 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87073 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87077 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87080 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87084 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87087 "powerpc.tcc"
				)
				{
#line 59 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crandc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87102 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87109 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87122 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87129 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87144 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87151 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87168 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87175 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87192 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87199 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87216 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87223 "powerpc.tcc"
				>::initialize_function()
				{
#line 182 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87236 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87243 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87256 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87263 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87308 "powerpc.tcc"
				> *DecodeOpCrandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 87314 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87324 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87328 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87332 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87336 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87339 "powerpc.tcc"
				)
				{
#line 64 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a ^ _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87360 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87364 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87368 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87372 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87375 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87379 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87382 "powerpc.tcc"
				)
				{
#line 73 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "creqv cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87397 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87404 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87417 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87424 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87431 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87439 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87446 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87463 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87470 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87487 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87494 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87511 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87518 "powerpc.tcc"
				>::initialize_function()
				{
#line 183 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87531 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87538 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 76 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87543 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87551 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87558 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87589 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87598 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87603 "powerpc.tcc"
				> *DecodeOpCreqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 87609 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87619 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87623 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87627 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87631 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87634 "powerpc.tcc"
				)
				{
#line 78 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a & _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87655 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87659 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87663 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87667 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87670 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87674 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87677 "powerpc.tcc"
				)
				{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87692 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87699 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87704 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87712 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87719 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87734 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87741 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87758 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87765 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87782 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87789 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87806 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87813 "powerpc.tcc"
				>::initialize_function()
				{
#line 184 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87826 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87833 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87846 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87853 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87884 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87893 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87898 "powerpc.tcc"
				> *DecodeOpCrnand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 87904 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87914 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87918 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87922 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87926 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87929 "powerpc.tcc"
				)
				{
#line 92 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a | _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87950 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87954 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87958 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87962 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87965 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87969 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87972 "powerpc.tcc"
				)
				{
#line 101 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87987 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87994 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88007 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88014 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88029 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88036 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88053 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88060 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88077 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88084 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88101 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88108 "powerpc.tcc"
				>::initialize_function()
				{
#line 185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88113 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88121 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88128 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 78 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88133 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88141 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88148 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88179 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88188 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88193 "powerpc.tcc"
				> *DecodeOpCrnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 88199 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88209 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88213 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88217 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88221 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88224 "powerpc.tcc"
				)
				{
#line 106 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | _b) << (31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88245 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88249 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88253 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88257 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88260 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88264 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88267 "powerpc.tcc"
				)
				{
#line 115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "cror cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88282 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88289 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88302 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88309 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88316 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88324 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88331 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88348 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88355 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88372 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88379 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88388 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88396 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88403 "powerpc.tcc"
				>::initialize_function()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88416 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88423 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 79 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88436 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88443 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88474 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88483 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88488 "powerpc.tcc"
				> *DecodeOpCror(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCror<
#line 38 "ppc.isa"
					CONFIG
#line 88494 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88504 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88508 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88512 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88516 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88519 "powerpc.tcc"
				)
				{
#line 120 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88540 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88544 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88548 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88552 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88555 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88559 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88562 "powerpc.tcc"
				)
				{
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crorc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88569 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88577 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88584 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88597 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88604 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88619 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88626 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88635 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88643 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88650 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88667 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88674 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88691 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88698 "powerpc.tcc"
				>::initialize_function()
				{
#line 187 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88711 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88718 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88731 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88738 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88769 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88778 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88783 "powerpc.tcc"
				> *DecodeOpCrorc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 88789 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88799 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88803 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88807 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88811 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88814 "powerpc.tcc"
				)
				{
#line 134 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _e ;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a ^ _b)<<(31-crbD);
						_e = ~(1<<(31-crbD));
						cpu->SetCR((_c & _e) | _d );
					}
#line 88827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88835 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88839 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88843 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88847 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88850 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88854 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88857 "powerpc.tcc"
				)
				{
#line 143 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crxor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88872 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88879 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88892 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88899 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88914 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88921 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88938 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88945 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88962 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88969 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88986 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88993 "powerpc.tcc"
				>::initialize_function()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89006 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89013 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 81 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89018 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89026 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89033 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 89064 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89073 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89078 "powerpc.tcc"
				> *DecodeOpCrxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 89084 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89094 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89098 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89102 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89106 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89109 "powerpc.tcc"
				)
				{
#line 148 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						cpu->SetCR((cpu->GetCR() & (~(0xf << (4 * (7 - crfD))))) | (((cpu->GetCR() >> (4 * (7 - crfS))) & 0xf) << (4 * (7 - crfD))));
					}
#line 89116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89124 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89128 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89132 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89136 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89139 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89143 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89146 "powerpc.tcc"
				)
				{
#line 151 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "mcrf cr" << crfD << ", cr" << crfS;
					}
#line 89153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89161 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89168 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 89173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89181 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89188 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 367 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89197 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89205 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89212 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89229 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89236 "powerpc.tcc"
				>::initialize_function()
				{
#line 189 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 89241 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89249 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89256 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 82 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89269 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89276 "powerpc.tcc"
				>::initialize_operands()
				{
#line 817 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(CRF_T, crfS);
						OUTPUT(CR_T, crfD);
						INPUT(CR_T, crfS);
					}
#line 89286 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89295 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89300 "powerpc.tcc"
				> *DecodeOpMcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 89306 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************

				INTEGER LOAD INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 89351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89354 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89358 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89362 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89366 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89369 "powerpc.tcc"
				)
				{
#line 41 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 89379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89387 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89391 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89395 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89399 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89402 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89406 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89409 "powerpc.tcc"
				)
				{
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89429 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89436 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89449 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89456 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89474 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89481 "powerpc.tcc"
				>::initialize_function()
				{
#line 301 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89486 "powerpc.tcc"
				}
				/** Load Store **/
				template <
#line 38 "ppc.isa"
				class
#line 89492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89495 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89502 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 175 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89507 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89515 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89522 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 89534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89542 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89546 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89550 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89554 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89557 "powerpc.tcc"
				)
				{
#line 71 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89570 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89574 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89578 "powerpc.tcc"
				>::memory_access_size()
				{
#line 152 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89583 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89592 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89597 "powerpc.tcc"
				> *DecodeOpLbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 89603 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89613 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89617 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89621 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89625 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89628 "powerpc.tcc"
				)
				{
#line 57 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89649 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89653 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89657 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89661 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89664 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89668 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89671 "powerpc.tcc"
				)
				{
#line 66 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89691 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89698 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89711 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89718 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89728 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89736 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89743 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89761 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89768 "powerpc.tcc"
				>::initialize_function()
				{
#line 302 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89781 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89788 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 176 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89801 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89808 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 89817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89825 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89829 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89833 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89837 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89840 "powerpc.tcc"
				)
				{
#line 82 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89853 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89857 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89861 "powerpc.tcc"
				>::memory_access_size()
				{
#line 153 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89866 "powerpc.tcc"
				}
				// Integer LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 89872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89875 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 89879 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89883 "powerpc.tcc"
				>::is_splitted()
				{
#line 269 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 89890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89898 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 89902 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89906 "powerpc.tcc"
				>::split_into()
				{
#line 272 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 34 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 89927 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89936 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89941 "powerpc.tcc"
				> *DecodeOpLbzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 89947 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89957 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89961 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89965 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89969 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89972 "powerpc.tcc"
				)
				{
#line 76 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89993 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89997 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90001 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90005 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90008 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90012 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90015 "powerpc.tcc"
				)
				{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90035 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90042 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90055 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90062 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90080 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90087 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90097 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90105 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90112 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90122 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90130 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90137 "powerpc.tcc"
				>::initialize_function()
				{
#line 303 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90150 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90157 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90170 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90177 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90194 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90198 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90202 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90206 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90209 "powerpc.tcc"
				)
				{
#line 83 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90222 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90226 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90230 "powerpc.tcc"
				>::memory_access_size()
				{
#line 154 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90243 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90247 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90251 "powerpc.tcc"
				>::is_splitted()
				{
#line 290 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 90258 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90266 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 90270 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90274 "powerpc.tcc"
				>::split_into()
				{
#line 293 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (87 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 90297 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90306 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90311 "powerpc.tcc"
				> *DecodeOpLbzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 90317 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90327 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90331 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90335 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90339 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90342 "powerpc.tcc"
				)
				{
#line 95 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 90352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90360 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90364 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90368 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90372 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90375 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90379 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90382 "powerpc.tcc"
				)
				{
#line 101 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90394 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90402 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90409 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90422 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90429 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90447 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90454 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90464 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90472 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90479 "powerpc.tcc"
				>::initialize_function()
				{
#line 304 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90492 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90499 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 178 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90504 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 90511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90514 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90521 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90538 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90542 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90546 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90550 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90553 "powerpc.tcc"
				)
				{
#line 72 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90566 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90570 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90574 "powerpc.tcc"
				>::memory_access_size()
				{
#line 155 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90579 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90588 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90593 "powerpc.tcc"
				> *DecodeOpLbzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 90599 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90609 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90613 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90617 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90621 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90624 "powerpc.tcc"
				)
				{
#line 111 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 90634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90642 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90646 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90650 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90654 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90657 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90661 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90664 "powerpc.tcc"
				)
				{
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lha r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90684 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90691 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90704 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90711 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90729 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90736 "powerpc.tcc"
				>::initialize_function()
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90741 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90749 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90756 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 179 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90769 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90776 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 90788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90796 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90800 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90804 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90808 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90811 "powerpc.tcc"
				)
				{
#line 73 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90824 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90828 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90832 "powerpc.tcc"
				>::memory_access_size()
				{
#line 156 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 90837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90845 "powerpc.tcc"
				>
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90849 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90853 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 788 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 90858 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90867 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90872 "powerpc.tcc"
				> *DecodeOpLha(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLha<
#line 38 "ppc.isa"
					CONFIG
#line 90878 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90888 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90892 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90896 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90900 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90903 "powerpc.tcc"
				)
				{
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 90916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90924 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90928 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90932 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90936 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90939 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90943 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90946 "powerpc.tcc"
				)
				{
#line 136 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhau r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90966 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90973 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90986 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90993 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91011 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91018 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91036 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91043 "powerpc.tcc"
				>::initialize_function()
				{
#line 306 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91056 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91063 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 180 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91076 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91083 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 91092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91100 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91104 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91108 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91112 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91115 "powerpc.tcc"
				)
				{
#line 84 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91128 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91132 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91136 "powerpc.tcc"
				>::memory_access_size()
				{
#line 157 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91149 "powerpc.tcc"
				>
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91153 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91157 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 789 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91162 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91171 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91176 "powerpc.tcc"
				> *DecodeOpLhau(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 91182 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91192 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91196 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91200 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91204 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91207 "powerpc.tcc"
				)
				{
#line 146 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 91220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91228 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91232 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91236 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91240 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91243 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91247 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91250 "powerpc.tcc"
				)
				{
#line 155 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhaux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91270 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91277 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91290 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91297 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91315 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91322 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91340 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91347 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91365 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91372 "powerpc.tcc"
				>::initialize_function()
				{
#line 307 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91385 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91392 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 181 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91405 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91412 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91429 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91433 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91437 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91441 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91444 "powerpc.tcc"
				)
				{
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91449 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91457 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91461 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91465 "powerpc.tcc"
				>::memory_access_size()
				{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91478 "powerpc.tcc"
				>
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91482 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91486 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 790 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91491 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91500 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91505 "powerpc.tcc"
				> *DecodeOpLhaux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 91511 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91521 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91525 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91529 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91533 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91536 "powerpc.tcc"
				)
				{
#line 165 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 91546 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91554 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91558 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91562 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91566 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91569 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91573 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91576 "powerpc.tcc"
				)
				{
#line 171 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhax r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91596 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91603 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91616 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91623 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91641 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91648 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91666 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91673 "powerpc.tcc"
				>::initialize_function()
				{
#line 308 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91678 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91686 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91693 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 182 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91698 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 91705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91708 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91715 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91732 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91736 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91740 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91744 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91747 "powerpc.tcc"
				)
				{
#line 74 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91752 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91760 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91764 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91768 "powerpc.tcc"
				>::memory_access_size()
				{
#line 159 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91781 "powerpc.tcc"
				>
#line 784 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91785 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91789 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 791 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91794 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91803 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91808 "powerpc.tcc"
				> *DecodeOpLhax(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 91814 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91824 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91828 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91832 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91836 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91839 "powerpc.tcc"
				)
				{
#line 181 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 91849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91857 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91861 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91865 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91869 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91872 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91876 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91879 "powerpc.tcc"
				)
				{
#line 187 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91899 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91906 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91919 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91926 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91944 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91951 "powerpc.tcc"
				>::initialize_function()
				{
#line 309 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91964 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91971 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 183 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91984 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91991 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 92003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92011 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92015 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92019 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92023 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92026 "powerpc.tcc"
				)
				{
#line 76 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92039 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92043 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92047 "powerpc.tcc"
				>::memory_access_size()
				{
#line 160 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92052 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92061 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92066 "powerpc.tcc"
				> *DecodeOpLhz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 92072 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92082 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92086 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92090 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92094 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92097 "powerpc.tcc"
				)
				{
#line 197 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92118 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92122 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92126 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92130 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92133 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92137 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92140 "powerpc.tcc"
				)
				{
#line 206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92152 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92160 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92167 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92180 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92187 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92197 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92205 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92212 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92230 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92237 "powerpc.tcc"
				>::initialize_function()
				{
#line 310 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92250 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92257 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 184 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92270 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92277 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 92286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92294 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92298 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92302 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92306 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92309 "powerpc.tcc"
				)
				{
#line 86 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92322 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92326 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92330 "powerpc.tcc"
				>::memory_access_size()
				{
#line 161 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92335 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92343 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92347 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92351 "powerpc.tcc"
				>::is_splitted()
				{
#line 313 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92366 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92370 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92374 "powerpc.tcc"
				>::split_into()
				{
#line 316 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 40 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92395 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92404 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92409 "powerpc.tcc"
				> *DecodeOpLhzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 92415 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92425 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92429 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92433 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92437 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92440 "powerpc.tcc"
				)
				{
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92461 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92465 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92469 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92473 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92476 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92480 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92483 "powerpc.tcc"
				)
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92503 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92510 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92523 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92530 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92540 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92548 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92555 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92573 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92580 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92598 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92605 "powerpc.tcc"
				>::initialize_function()
				{
#line 311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92618 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92625 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92638 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92645 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92662 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92666 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92670 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92674 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92677 "powerpc.tcc"
				)
				{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92690 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92694 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92698 "powerpc.tcc"
				>::memory_access_size()
				{
#line 162 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92711 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92715 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92719 "powerpc.tcc"
				>::is_splitted()
				{
#line 334 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92734 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92738 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92742 "powerpc.tcc"
				>::split_into()
				{
#line 337 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (279 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92765 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92774 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92779 "powerpc.tcc"
				> *DecodeOpLhzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 92785 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92795 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92799 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92803 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92807 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92810 "powerpc.tcc"
				)
				{
#line 235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 92820 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92828 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92832 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92836 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92840 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92843 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92847 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92850 "powerpc.tcc"
				)
				{
#line 241 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92870 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92877 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92882 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92890 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92897 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92907 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92915 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92922 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92940 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92947 "powerpc.tcc"
				>::initialize_function()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92960 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92967 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92972 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 92979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92982 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92989 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93006 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93010 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93014 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93018 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93021 "powerpc.tcc"
				)
				{
#line 77 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93034 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93038 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93042 "powerpc.tcc"
				>::memory_access_size()
				{
#line 163 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 93047 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93056 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93061 "powerpc.tcc"
				> *DecodeOpLhzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 93067 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93077 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93081 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93085 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93089 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93092 "powerpc.tcc"
				)
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 93102 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93110 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93114 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93118 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93122 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93125 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93129 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93132 "powerpc.tcc"
				)
				{
#line 257 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93144 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93152 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93159 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93172 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93179 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93197 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93204 "powerpc.tcc"
				>::initialize_function()
				{
#line 313 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93217 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93224 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 187 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93237 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93244 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 93256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93264 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93268 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93272 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93276 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93279 "powerpc.tcc"
				)
				{
#line 80 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93292 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93296 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93300 "powerpc.tcc"
				>::memory_access_size()
				{
#line 164 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93305 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93314 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93319 "powerpc.tcc"
				> *DecodeOpLwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 93325 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93335 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93339 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93343 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93347 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93350 "powerpc.tcc"
				)
				{
#line 267 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93363 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93371 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93375 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93379 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93383 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93386 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93390 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93393 "powerpc.tcc"
				)
				{
#line 276 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93413 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93420 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93433 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93440 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93450 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93458 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93465 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93483 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93490 "powerpc.tcc"
				>::initialize_function()
				{
#line 314 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93503 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93510 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93523 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93530 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 93539 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93547 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93551 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93555 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93559 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93562 "powerpc.tcc"
				)
				{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93575 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93579 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93583 "powerpc.tcc"
				>::memory_access_size()
				{
#line 165 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93596 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93600 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93604 "powerpc.tcc"
				>::is_splitted()
				{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93619 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93623 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93627 "powerpc.tcc"
				>::split_into()
				{
#line 360 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwz_ctype=0;
						lwz_ctype = 32 << 26;
						lwz_ctype = lwz_ctype | (rd << 21);
						lwz_ctype = lwz_ctype | (ra << 16);
						lwz_ctype = lwz_ctype | (d & 0xffff);
						l.push_back( new OpLwz<CONFIG>(lwz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 93649 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93658 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93663 "powerpc.tcc"
				> *DecodeOpLwzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 93669 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93679 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93683 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93687 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93691 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93694 "powerpc.tcc"
				)
				{
#line 286 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93715 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93719 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93723 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93727 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93730 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93734 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93737 "powerpc.tcc"
				)
				{
#line 295 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93757 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93764 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93777 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93784 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93794 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93802 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93809 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93827 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93834 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93852 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93859 "powerpc.tcc"
				>::initialize_function()
				{
#line 315 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93872 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93879 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 189 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93892 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93899 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 93908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93916 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93920 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93924 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93928 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93931 "powerpc.tcc"
				)
				{
#line 89 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93944 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93948 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93952 "powerpc.tcc"
				>::memory_access_size()
				{
#line 166 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93957 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93965 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93969 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93973 "powerpc.tcc"
				>::is_splitted()
				{
#line 379 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93980 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93988 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93992 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93996 "powerpc.tcc"
				>::split_into()
				{
#line 382 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwzx_ctype=0;
						lwzx_ctype = 31 << 26;
						lwzx_ctype = lwzx_ctype | (rd << 21);
						lwzx_ctype = lwzx_ctype | (ra << 16);
						lwzx_ctype = lwzx_ctype | (rb << 11);
						lwzx_ctype = lwzx_ctype | (23 << 1);
						l.push_back( new OpLwzx<CONFIG>(lwzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 94019 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94028 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94033 "powerpc.tcc"
				> *DecodeOpLwzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 94039 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94049 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94053 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94057 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94061 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94064 "powerpc.tcc"
				)
				{
#line 305 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 94074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94082 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94086 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94090 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94094 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94097 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94101 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94104 "powerpc.tcc"
				)
				{
#line 311 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94124 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94131 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94144 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94151 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94161 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94169 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94176 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94194 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94201 "powerpc.tcc"
				>::initialize_function()
				{
#line 316 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 94206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94214 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94221 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94226 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 94233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94236 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94243 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 94252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94260 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94264 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94268 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94272 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94275 "powerpc.tcc"
				)
				{
#line 81 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 94280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94288 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94292 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94296 "powerpc.tcc"
				>::memory_access_size()
				{
#line 167 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 94301 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94310 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94315 "powerpc.tcc"
				> *DecodeOpLwzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 94321 "powerpc.tcc"
					>(code, addr);
				}

				/****************************

				INTEGER STORE INSTRUCTIONS

				****************************/
				template <
#line 38 "ppc.isa"
				class
#line 94333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94336 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94340 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94344 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94348 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94351 "powerpc.tcc"
				)
				{
#line 326 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 94361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94369 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94373 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94377 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94381 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94384 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94388 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94391 "powerpc.tcc"
				)
				{
#line 332 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stb r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94411 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94418 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94431 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94438 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94453 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94460 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94478 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94485 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94503 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94510 "powerpc.tcc"
				>::initialize_function()
				{
#line 317 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94523 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94530 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 191 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94543 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94550 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 94558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94566 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94570 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94574 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94578 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94581 "powerpc.tcc"
				)
				{
#line 106 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94594 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94598 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94602 "powerpc.tcc"
				>::memory_access_size()
				{
#line 168 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94607 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94616 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94621 "powerpc.tcc"
				> *DecodeOpStb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStb<
#line 38 "ppc.isa"
					CONFIG
#line 94627 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94637 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94641 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94645 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94649 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94652 "powerpc.tcc"
				)
				{
#line 342 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 94665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94673 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94677 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94681 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94685 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94688 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94692 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94695 "powerpc.tcc"
				)
				{
#line 351 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94715 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94722 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94735 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94742 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94757 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94764 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94782 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94789 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94807 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94814 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94832 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94839 "powerpc.tcc"
				>::initialize_function()
				{
#line 318 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94852 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94859 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94872 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94879 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 94888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94896 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94900 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94904 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94908 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94911 "powerpc.tcc"
				)
				{
#line 107 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94924 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94928 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94932 "powerpc.tcc"
				>::memory_access_size()
				{
#line 169 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94937 "powerpc.tcc"
				}
				// Integer STORES with update
				template <
#line 38 "ppc.isa"
				class
#line 94943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94946 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 94950 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94954 "powerpc.tcc"
				>::is_splitted()
				{
#line 403 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 94961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94969 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 94973 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94977 "powerpc.tcc"
				>::split_into()
				{
#line 406 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 38 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 95000 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95009 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95014 "powerpc.tcc"
				> *DecodeOpStbu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 95020 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95030 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95034 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95038 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95042 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95045 "powerpc.tcc"
				)
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 95058 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95066 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95070 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95074 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95078 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95081 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95085 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95088 "powerpc.tcc"
				)
				{
#line 370 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95108 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95115 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95128 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95135 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95150 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95157 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95175 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95182 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95200 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95207 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95217 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95225 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95232 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95250 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95257 "powerpc.tcc"
				>::initialize_function()
				{
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95270 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95277 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 193 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95290 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95297 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95314 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95318 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95322 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95326 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95329 "powerpc.tcc"
				)
				{
#line 108 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95342 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95346 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95350 "powerpc.tcc"
				>::memory_access_size()
				{
#line 170 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95363 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 95367 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95371 "powerpc.tcc"
				>::is_splitted()
				{
#line 426 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 95378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95386 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 95390 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95394 "powerpc.tcc"
				>::split_into()
				{
#line 429 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stbx_ctype=0;
						stbx_ctype = 31 << 26;
						stbx_ctype = stbx_ctype | (rs << 21);
						stbx_ctype = stbx_ctype | (ra << 16);
						stbx_ctype = stbx_ctype | (rb << 11);
						stbx_ctype = stbx_ctype | (215 << 1);
						l.push_back( new OpStb<CONFIG>(stbx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 95419 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95428 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95433 "powerpc.tcc"
				> *DecodeOpStbux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 95439 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95449 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95453 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95457 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95461 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95464 "powerpc.tcc"
				)
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 95474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95482 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95486 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95490 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95494 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95497 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95501 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95504 "powerpc.tcc"
				)
				{
#line 386 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95524 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95531 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95544 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95551 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95566 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95573 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95583 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95591 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95598 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95616 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95623 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95641 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95648 "powerpc.tcc"
				>::initialize_function()
				{
#line 320 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95653 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95661 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95668 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95673 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95681 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95688 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95705 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95709 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95713 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95717 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95720 "powerpc.tcc"
				)
				{
#line 109 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95733 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95737 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95741 "powerpc.tcc"
				>::memory_access_size()
				{
#line 171 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95746 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95755 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95760 "powerpc.tcc"
				> *DecodeOpStbx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 95766 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95776 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95780 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95784 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95788 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95791 "powerpc.tcc"
				)
				{
#line 396 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 95801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95809 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95813 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95817 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95821 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95824 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95828 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95831 "powerpc.tcc"
				)
				{
#line 402 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sth r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95851 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95858 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95863 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95871 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95878 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95893 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95900 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95918 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95925 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95943 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95950 "powerpc.tcc"
				>::initialize_function()
				{
#line 321 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95963 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95970 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 195 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95983 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95990 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 95998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96006 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96010 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96014 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96018 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96021 "powerpc.tcc"
				)
				{
#line 110 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96034 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96038 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96042 "powerpc.tcc"
				>::memory_access_size()
				{
#line 172 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96047 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96056 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96061 "powerpc.tcc"
				> *DecodeOpSth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSth<
#line 38 "ppc.isa"
					CONFIG
#line 96067 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96077 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96081 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96085 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96089 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96092 "powerpc.tcc"
				)
				{
#line 412 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96113 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96117 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96121 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96125 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96128 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96132 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96135 "powerpc.tcc"
				)
				{
#line 421 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96155 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96162 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96175 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96182 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 96189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96197 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96204 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96222 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96229 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96247 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96254 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96272 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96279 "powerpc.tcc"
				>::initialize_function()
				{
#line 322 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96292 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96299 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96312 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96319 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 96328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96336 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96340 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96344 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96348 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96351 "powerpc.tcc"
				)
				{
#line 111 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96364 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96368 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96372 "powerpc.tcc"
				>::memory_access_size()
				{
#line 173 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96385 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96389 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96393 "powerpc.tcc"
				>::is_splitted()
				{
#line 451 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96408 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96412 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96416 "powerpc.tcc"
				>::split_into()
				{
#line 454 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 44 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96439 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96448 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96453 "powerpc.tcc"
				> *DecodeOpSthu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 96459 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96469 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96473 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96477 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96481 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96484 "powerpc.tcc"
				)
				{
#line 431 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96497 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96505 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96509 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96513 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96517 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96520 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96524 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96527 "powerpc.tcc"
				)
				{
#line 440 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96539 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96547 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96554 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96567 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96574 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96592 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96599 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96609 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96617 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96624 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96642 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96649 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96667 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96674 "powerpc.tcc"
				>::initialize_function()
				{
#line 323 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96687 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96694 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 197 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96707 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96714 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 96723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96731 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96735 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96739 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96743 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96746 "powerpc.tcc"
				)
				{
#line 112 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96759 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96763 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96767 "powerpc.tcc"
				>::memory_access_size()
				{
#line 174 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96780 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96784 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96788 "powerpc.tcc"
				>::is_splitted()
				{
#line 474 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96803 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96807 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96811 "powerpc.tcc"
				>::split_into()
				{
#line 477 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType sthx_ctype=0;
						sthx_ctype = 31 << 26;
						sthx_ctype = sthx_ctype | (rs << 21);
						sthx_ctype = sthx_ctype | (ra << 16);
						sthx_ctype = sthx_ctype | (rb << 11);
						sthx_ctype = sthx_ctype | (407 << 1);
						l.push_back( new OpStb<CONFIG>(sthx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96836 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96845 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96850 "powerpc.tcc"
				> *DecodeOpSthux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 96856 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96866 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96870 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96874 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96878 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96881 "powerpc.tcc"
				)
				{
#line 450 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 96891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96899 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96903 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96907 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96911 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96914 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96918 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96921 "powerpc.tcc"
				)
				{
#line 456 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96941 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96948 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96953 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96961 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96968 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96986 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96993 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97011 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97018 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97036 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97043 "powerpc.tcc"
				>::initialize_function()
				{
#line 324 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97056 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97063 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97076 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97083 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 97092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97100 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97104 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97108 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97112 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97115 "powerpc.tcc"
				)
				{
#line 113 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97128 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97132 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97136 "powerpc.tcc"
				>::memory_access_size()
				{
#line 175 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 97141 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97150 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97155 "powerpc.tcc"
				> *DecodeOpSthx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 97161 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97171 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97175 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97179 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97183 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97186 "powerpc.tcc"
				)
				{
#line 466 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 97196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97204 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97208 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97212 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97216 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97219 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97223 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97226 "powerpc.tcc"
				)
				{
#line 472 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97246 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97253 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97258 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97266 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97273 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97288 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97295 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97313 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97320 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97338 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97345 "powerpc.tcc"
				>::initialize_function()
				{
#line 325 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97358 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97365 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 199 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97378 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97385 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 97393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97401 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97405 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97409 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97413 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97416 "powerpc.tcc"
				)
				{
#line 114 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97429 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97433 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97437 "powerpc.tcc"
				>::memory_access_size()
				{
#line 176 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97442 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97451 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97456 "powerpc.tcc"
				> *DecodeOpStw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStw<
#line 38 "ppc.isa"
					CONFIG
#line 97462 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97472 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97476 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97480 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97484 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97487 "powerpc.tcc"
				)
				{
#line 482 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97500 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97508 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97512 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97516 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97520 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97523 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97527 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97530 "powerpc.tcc"
				)
				{
#line 491 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97550 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97557 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97570 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97577 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97592 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97599 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97609 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97617 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97624 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97642 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97649 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97667 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97674 "powerpc.tcc"
				>::initialize_function()
				{
#line 326 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97687 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97694 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97707 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97714 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 97723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97731 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97735 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97739 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97743 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97746 "powerpc.tcc"
				)
				{
#line 115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97759 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97763 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97767 "powerpc.tcc"
				>::memory_access_size()
				{
#line 177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97780 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 97784 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97788 "powerpc.tcc"
				>::is_splitted()
				{
#line 500 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 97795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97803 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 97807 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97811 "powerpc.tcc"
				>::split_into()
				{
#line 503 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stw_ctype=0;
						stw_ctype = 36 << 26;
						stw_ctype = stw_ctype | (rs << 21);
						stw_ctype = stw_ctype | (ra << 16);
						stw_ctype = stw_ctype | (d & 0xffff);
						l.push_back( new OpStw<CONFIG>(stw_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 97834 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97843 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97848 "powerpc.tcc"
				> *DecodeOpStwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 97854 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97864 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97868 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97872 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97876 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97879 "powerpc.tcc"
				)
				{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97900 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97904 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97908 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97912 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97915 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97919 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97922 "powerpc.tcc"
				)
				{
#line 510 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97942 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97949 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97962 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97969 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97984 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97991 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98009 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98016 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98034 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98041 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98059 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98066 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98084 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98091 "powerpc.tcc"
				>::initialize_function()
				{
#line 327 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98104 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98111 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 201 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98124 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98131 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98148 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98152 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98156 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98160 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98163 "powerpc.tcc"
				)
				{
#line 116 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98176 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98180 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98184 "powerpc.tcc"
				>::memory_access_size()
				{
#line 178 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98197 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 98201 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98205 "powerpc.tcc"
				>::is_splitted()
				{
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 98212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98220 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 98224 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98228 "powerpc.tcc"
				>::split_into()
				{
#line 526 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stwx_ctype=0;
						stwx_ctype = 31 << 26;
						stwx_ctype = stwx_ctype | (rs << 21);
						stwx_ctype = stwx_ctype | (ra << 16);
						stwx_ctype = stwx_ctype | (rb << 11);
						stwx_ctype = stwx_ctype | (151 << 1);
						l.push_back( new OpStwx<CONFIG>(stwx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 98252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98266 "powerpc.tcc"
				> *DecodeOpStwux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 98272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98282 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98286 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98290 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98294 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98297 "powerpc.tcc"
				)
				{
#line 520 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 98307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98315 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98319 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98323 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98327 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98330 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98334 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98337 "powerpc.tcc"
				)
				{
#line 526 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98349 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98357 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98364 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98377 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98384 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 98391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98399 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98406 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98424 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98431 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98449 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98456 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98474 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98481 "powerpc.tcc"
				>::initialize_function()
				{
#line 328 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98494 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98501 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98514 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98521 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98538 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98542 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98546 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98550 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98553 "powerpc.tcc"
				)
				{
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98566 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98570 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98574 "powerpc.tcc"
				>::memory_access_size()
				{
#line 179 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98579 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98588 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98593 "powerpc.tcc"
				> *DecodeOpStwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 98599 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				INTEGER LOAD STORE w BYTE REVERSE INSTRUCTIONS

				***************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 98611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98614 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98618 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98622 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98626 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98629 "powerpc.tcc"
				)
				{
#line 542 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16LoadByteReverse(rd, ea); // 16-bit load/byte reverse/no signe extend
					}
#line 98639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98647 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98651 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98655 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98659 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98662 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98666 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98669 "powerpc.tcc"
				)
				{
#line 548 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98689 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98696 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98709 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98716 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98734 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98741 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98759 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98766 "powerpc.tcc"
				>::initialize_function()
				{
#line 329 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 98771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98779 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98786 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 203 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98791 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 98798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98801 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98808 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98825 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98829 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98833 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98837 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98840 "powerpc.tcc"
				)
				{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 98845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98853 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98857 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98861 "powerpc.tcc"
				>::memory_access_size()
				{
#line 180 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 98866 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98875 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98880 "powerpc.tcc"
				> *DecodeOpLhbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 98886 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98896 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98900 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98904 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98908 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98911 "powerpc.tcc"
				)
				{
#line 558 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32LoadByteReverse(rd, ea); // 32-bit load/byte reverse/no signe extend
					}
#line 98921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98929 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98933 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98937 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98941 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98944 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98948 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98951 "powerpc.tcc"
				)
				{
#line 564 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98971 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98978 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98991 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98998 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99016 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99023 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99041 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99048 "powerpc.tcc"
				>::initialize_function()
				{
#line 330 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 99053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99061 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99068 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99073 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 99080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99083 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99090 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99099 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99107 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99111 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99115 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99119 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99122 "powerpc.tcc"
				)
				{
#line 79 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 99127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99135 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99139 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99143 "powerpc.tcc"
				>::memory_access_size()
				{
#line 181 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99148 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99157 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99162 "powerpc.tcc"
				> *DecodeOpLwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99168 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99178 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99182 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99186 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99190 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99193 "powerpc.tcc"
				)
				{
#line 574 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16StoreByteReverse(rs, ea); // 16-bit load/byte reverse
					}
#line 99203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99211 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99215 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99219 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99223 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99226 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99230 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99233 "powerpc.tcc"
				)
				{
#line 580 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99253 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99260 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99273 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99280 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99295 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99302 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99312 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99320 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99327 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99345 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99352 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99370 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99377 "powerpc.tcc"
				>::initialize_function()
				{
#line 331 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99390 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99397 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 205 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99410 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99417 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99434 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99438 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99442 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99446 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99449 "powerpc.tcc"
				)
				{
#line 118 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99462 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99466 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99470 "powerpc.tcc"
				>::memory_access_size()
				{
#line 182 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 99475 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99484 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99489 "powerpc.tcc"
				> *DecodeOpSthbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99495 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99505 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99509 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99513 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99517 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99520 "powerpc.tcc"
				)
				{
#line 590 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32StoreByteReverse(rs, ea); // 32-bit load/byte reverse
					}
#line 99530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99538 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99542 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99546 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99550 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99553 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99557 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99560 "powerpc.tcc"
				)
				{
#line 596 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99580 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99587 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99600 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99607 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99622 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99629 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99647 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99654 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99664 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99672 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99679 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99697 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99704 "powerpc.tcc"
				>::initialize_function()
				{
#line 332 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99717 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99724 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99737 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99744 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99761 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99765 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99769 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99773 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99776 "powerpc.tcc"
				)
				{
#line 119 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99789 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99793 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99797 "powerpc.tcc"
				>::memory_access_size()
				{
#line 183 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99802 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99811 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99816 "powerpc.tcc"
				> *DecodeOpStwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99822 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE STRING INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 99834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99837 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99841 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99845 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99849 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99852 "powerpc.tcc"
				)
				{
#line 612 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = nb ? nb : 32;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 99876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99884 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99888 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99892 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99896 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99899 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99903 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99906 "powerpc.tcc"
				)
				{
#line 632 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswi r" << rd << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99926 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99933 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99938 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99946 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99953 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99971 "powerpc.tcc"
				>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 99975 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99979 "powerpc.tcc"
				>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 99983 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 99986 "powerpc.tcc"
				,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 99990 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 99993 "powerpc.tcc"
				)
				{
#line 509 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;
					}
#line 100014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100022 "powerpc.tcc"
				>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100026 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100030 "powerpc.tcc"
				>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100034 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100037 "powerpc.tcc"
				,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100041 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100044 "powerpc.tcc"
				)
				{
#line 596 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100070 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100077 "powerpc.tcc"
				>::initialize_function()
				{
#line 334 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadStringImm; }
#line 100082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100090 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100097 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 207 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100102 "powerpc.tcc"
				}
				// --- Load & Store string ----------------------------------------------------
				/*

				lswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				lswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				*/
				template <
#line 38 "ppc.isa"
				class
#line 100155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100158 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100165 "powerpc.tcc"
				>::initialize_operands()
				{
#line 924 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra); // target address
						INPUT(GPR_T, rd);
						INPUT(IMM_T, nb);
					}
#line 100174 "powerpc.tcc"
				}
				//Load string
				template <
#line 38 "ppc.isa"
				class
#line 100180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100183 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100187 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100191 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100195 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100198 "powerpc.tcc"
				)
				{
#line 93 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100211 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100215 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100219 "powerpc.tcc"
				>::memory_access_size()
				{
#line 184 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100232 "powerpc.tcc"
				>
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100236 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100240 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100244 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100247 "powerpc.tcc"
				)
				{
#line 238 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 100252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100266 "powerpc.tcc"
				> *DecodeOpLswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 100272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100282 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100286 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100290 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100294 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100297 "powerpc.tcc"
				)
				{
#line 642 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100323 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100328 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100331 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100335 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100339 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100343 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100346 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100350 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100353 "powerpc.tcc"
				)
				{
#line 664 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100373 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100380 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100393 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100400 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100418 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100425 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100443 "powerpc.tcc"
				>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100447 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100451 "powerpc.tcc"
				>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100455 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100458 "powerpc.tcc"
				,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100462 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100465 "powerpc.tcc"
				)
				{
#line 527 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 100493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100501 "powerpc.tcc"
				>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100505 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100509 "powerpc.tcc"
				>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100513 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100516 "powerpc.tcc"
				,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100520 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100523 "powerpc.tcc"
				)
				{
#line 611 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100543 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100551 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100558 "powerpc.tcc"
				>::initialize_function()
				{
#line 335 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadString; }
#line 100563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100571 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100578 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 208 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100583 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100591 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100598 "powerpc.tcc"
				>::initialize_operands()
				{
#line 936 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 100607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100615 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100619 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100623 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100627 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100630 "powerpc.tcc"
				)
				{
#line 94 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100635 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100643 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100647 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100651 "powerpc.tcc"
				>::memory_access_size()
				{
#line 185 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100664 "powerpc.tcc"
				>
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100668 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100672 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100676 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100679 "powerpc.tcc"
				)
				{
#line 239 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 100684 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100693 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100698 "powerpc.tcc"
				> *DecodeOpLswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 100704 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100714 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100718 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100722 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100726 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100729 "powerpc.tcc"
				)
				{
#line 674 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = nb ? nb : 32;
						unsigned int r = rs;
						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100757 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100761 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100765 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100769 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100772 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100776 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100779 "powerpc.tcc"
				)
				{
#line 690 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswi r" << rs << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100799 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100806 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100819 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100826 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 100833 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100841 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100848 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100858 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100866 "powerpc.tcc"
				>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100870 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100874 "powerpc.tcc"
				>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100878 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100881 "powerpc.tcc"
				,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100885 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100888 "powerpc.tcc"
				)
				{
#line 552 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 100910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100918 "powerpc.tcc"
				>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100922 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100926 "powerpc.tcc"
				>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100930 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100933 "powerpc.tcc"
				,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100937 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100940 "powerpc.tcc"
				)
				{
#line 628 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 100955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100963 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100970 "powerpc.tcc"
				>::initialize_function()
				{
#line 336 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreStringImm; }
#line 100975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100983 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100990 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 209 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101003 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101010 "powerpc.tcc"
				>::initialize_operands()
				{
#line 930 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(IMM_T, nb);
					}
#line 101019 "powerpc.tcc"
				}
				//Store string
				template <
#line 38 "ppc.isa"
				class
#line 101025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101028 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101032 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101036 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101040 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101043 "powerpc.tcc"
				)
				{
#line 123 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101056 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101060 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101064 "powerpc.tcc"
				>::memory_access_size()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101077 "powerpc.tcc"
				>
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101081 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101085 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101089 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101092 "powerpc.tcc"
				)
				{
#line 240 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 101097 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101106 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101111 "powerpc.tcc"
				> *DecodeOpStswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 101117 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101127 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101131 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101135 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101139 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101142 "powerpc.tcc"
				)
				{
#line 700 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rs;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 101164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101172 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101176 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101180 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101184 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101187 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101191 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101194 "powerpc.tcc"
				)
				{
#line 718 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101214 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101221 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101234 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101241 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 101248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101256 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101263 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101281 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101288 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101298 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101306 "powerpc.tcc"
				>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101310 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101314 "powerpc.tcc"
				>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101318 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101321 "powerpc.tcc"
				,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101325 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101328 "powerpc.tcc"
				)
				{
#line 571 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 101356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101364 "powerpc.tcc"
				>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101368 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101372 "powerpc.tcc"
				>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101376 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101379 "powerpc.tcc"
				,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101383 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101386 "powerpc.tcc"
				)
				{
#line 640 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 101402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101410 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101417 "powerpc.tcc"
				>::initialize_function()
				{
#line 337 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreString; }
#line 101422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101430 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 210 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101450 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 942 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 101466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101474 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101478 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101482 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101486 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101489 "powerpc.tcc"
				)
				{
#line 124 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101502 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101506 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101510 "powerpc.tcc"
				>::memory_access_size()
				{
#line 187 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101523 "powerpc.tcc"
				>
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101527 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101531 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101535 "powerpc.tcc"
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101538 "powerpc.tcc"
				)
				{
#line 241 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 101543 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101552 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101557 "powerpc.tcc"
				> *DecodeOpStswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 101563 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE MULTIPLE INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 101575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101578 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101582 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101586 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101590 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101593 "powerpc.tcc"
				)
				{
#line 734 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;
						for(r = rd; r < 32; r++)
						{
							cpu->Int32Load(r, ea);
							ea = ea + 4;
						}
					}
#line 101610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101618 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101622 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101626 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101630 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101633 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101637 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101640 "powerpc.tcc"
				)
				{
#line 747 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lmw r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101660 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101667 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101680 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101687 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101705 "powerpc.tcc"
				>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101709 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101713 "powerpc.tcc"
				>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101717 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101720 "powerpc.tcc"
				,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101724 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101727 "powerpc.tcc"
				)
				{
#line 472 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rd;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 101749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101757 "powerpc.tcc"
				>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101761 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101765 "powerpc.tcc"
				>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101769 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101772 "powerpc.tcc"
				,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101776 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101779 "powerpc.tcc"
				)
				{
#line 653 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rd + uop_num;
						cpu->Int32Load(r, ea);
					}
#line 101792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101800 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101807 "powerpc.tcc"
				>::initialize_function()
				{
#line 333 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadMultiple; }
#line 101812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101820 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101827 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 211 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101840 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101847 "powerpc.tcc"
				>::initialize_operands()
				{
#line 208 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rd; i<32; i++)
						{ OUTPUT(GPR_T, i);
						}
					}
#line 101857 "powerpc.tcc"
				}
				//Load multiple
				template <
#line 38 "ppc.isa"
				class
#line 101863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101866 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101870 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101874 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101878 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101881 "powerpc.tcc"
				)
				{
#line 91 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 101886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101894 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101898 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101902 "powerpc.tcc"
				>::memory_access_size()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101907 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101916 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101921 "powerpc.tcc"
				> *DecodeOpLmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 101927 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101937 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101941 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101945 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101949 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101952 "powerpc.tcc"
				)
				{
#line 757 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;

						for(r = rs; r < 32; r++)
						{
							cpu->Int32Store(r, ea);
							ea = ea + 4;
						}
					}
#line 101969 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101977 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101981 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101985 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101989 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101992 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101996 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101999 "powerpc.tcc"
				)
				{
#line 770 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stmw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102019 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102026 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102039 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102046 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 102053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102061 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102068 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102086 "powerpc.tcc"
				>
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102090 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102094 "powerpc.tcc"
				>::resolve(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102098 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102101 "powerpc.tcc"
				,
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102105 "powerpc.tcc"
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102108 "powerpc.tcc"
				)
				{
#line 491 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rs;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;
					}
#line 102129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102137 "powerpc.tcc"
				>
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102141 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102145 "powerpc.tcc"
				>::uop_execute(
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102149 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102152 "powerpc.tcc"
				,
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102156 "powerpc.tcc"
#line 47 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102159 "powerpc.tcc"
				)
				{
#line 663 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rs + uop_num;
						cpu->Int32Store(r, ea);
					}
#line 102171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102179 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102186 "powerpc.tcc"
				>::initialize_function()
				{
#line 338 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreMultiple; }
#line 102191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102199 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102206 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 212 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 102211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102219 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102226 "powerpc.tcc"
				>::initialize_operands()
				{
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rs; i<32; i++)
						{ INPUT(GPR_T, i);
						}
					}
#line 102236 "powerpc.tcc"
				}
				//Store multiple
				template <
#line 38 "ppc.isa"
				class
#line 102242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102245 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102249 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102253 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102257 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102260 "powerpc.tcc"
				)
				{
#line 121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 102265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102273 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102277 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102281 "powerpc.tcc"
				>::memory_access_size()
				{
#line 189 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 102286 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102295 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102300 "powerpc.tcc"
				> *DecodeOpStmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 102306 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************

				FLOATING POINT LOAD INSTRUCTIONS

				**********************************/
				template <
#line 38 "ppc.isa"
				class
#line 102318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102321 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102325 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102329 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102333 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102336 "powerpc.tcc"
				)
				{
#line 786 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// check if FPU is available
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 102358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102366 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102370 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102374 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102378 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102381 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102385 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102388 "powerpc.tcc"
				)
				{
#line 804 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfd f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102408 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102415 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102428 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102435 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102453 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102460 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102478 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102485 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102502 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102509 "powerpc.tcc"
				>::initialize_function()
				{
#line 339 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102522 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102529 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 213 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102542 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102549 "powerpc.tcc"
				>::initialize_operands()
				{
#line 290 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102557 "powerpc.tcc"
				}
				//Load float
				template <
#line 38 "ppc.isa"
				class
#line 102563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102566 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102570 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102574 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102578 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102581 "powerpc.tcc"
				)
				{
#line 96 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102594 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102598 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102602 "powerpc.tcc"
				>::memory_access_size()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102607 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102616 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102621 "powerpc.tcc"
				> *DecodeOpLfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 102627 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102637 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102641 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102645 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102649 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102652 "powerpc.tcc"
				)
				{
#line 814 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 102676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102684 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102688 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102692 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102696 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102699 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102703 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102706 "powerpc.tcc"
				)
				{
#line 834 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102726 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102733 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102746 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102753 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102771 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102778 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102796 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102803 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102813 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102821 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102828 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102845 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102852 "powerpc.tcc"
				>::initialize_function()
				{
#line 340 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102857 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102865 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102872 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 214 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102885 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102892 "powerpc.tcc"
				>::initialize_operands()
				{
#line 296 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102900 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102908 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102912 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102916 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102920 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102923 "powerpc.tcc"
				)
				{
#line 97 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102928 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102936 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102940 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102944 "powerpc.tcc"
				>::memory_access_size()
				{
#line 191 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102949 "powerpc.tcc"
				}
				// Floating point LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 102955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102958 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 102962 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102966 "powerpc.tcc"
				>::is_splitted()
				{
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 102973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102981 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 102985 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102989 "powerpc.tcc"
				>::split_into()
				{
#line 552 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfd_ctype=0;
						lfd_ctype = 50 << 26;
						lfd_ctype = lfd_ctype | (fd << 21);
						lfd_ctype = lfd_ctype | (ra << 16);
						lfd_ctype = lfd_ctype | (d & 0xffff);
						l.push_back( new OpLfd<CONFIG>(lfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 103010 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103019 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103024 "powerpc.tcc"
				> *DecodeOpLfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 103030 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103040 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103044 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103048 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103052 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103055 "powerpc.tcc"
				)
				{
#line 844 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 103078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103086 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103090 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103094 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103098 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103101 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103105 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103108 "powerpc.tcc"
				)
				{
#line 863 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103128 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103135 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103148 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103155 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103173 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103180 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103198 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103205 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103223 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103230 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103248 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103255 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103272 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103279 "powerpc.tcc"
				>::initialize_function()
				{
#line 341 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103292 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103299 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 215 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103312 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103319 "powerpc.tcc"
				>::initialize_operands()
				{
#line 516 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103336 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103340 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103344 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103348 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103351 "powerpc.tcc"
				)
				{
#line 98 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103364 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103368 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103372 "powerpc.tcc"
				>::memory_access_size()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103385 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 103389 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103393 "powerpc.tcc"
				>::is_splitted()
				{
#line 570 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 103400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103408 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 103412 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103416 "powerpc.tcc"
				>::split_into()
				{
#line 573 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfdx_ctype=0;
						lfdx_ctype = 50 << 26;
						lfdx_ctype = lfdx_ctype | (fd << 21);
						lfdx_ctype = lfdx_ctype | (ra << 16);
						lfdx_ctype = lfdx_ctype | (rb << 11);
						lfdx_ctype = lfdx_ctype | (599 << 1);
						l.push_back( new OpLfdx<CONFIG>(lfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 103439 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103448 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103453 "powerpc.tcc"
				> *DecodeOpLfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 103459 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103469 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103473 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103477 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103481 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103484 "powerpc.tcc"
				)
				{
#line 873 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 103506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103514 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103518 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103522 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103526 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103529 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103533 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103536 "powerpc.tcc"
				)
				{
#line 891 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103556 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103563 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103576 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103583 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103593 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103601 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103608 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103626 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103633 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103651 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103658 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103675 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103682 "powerpc.tcc"
				>::initialize_function()
				{
#line 342 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103695 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103702 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103715 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103722 "powerpc.tcc"
				>::initialize_operands()
				{
#line 509 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103739 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103743 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103747 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103751 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103754 "powerpc.tcc"
				)
				{
#line 99 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103767 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103771 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103775 "powerpc.tcc"
				>::memory_access_size()
				{
#line 193 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103780 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103789 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103794 "powerpc.tcc"
				> *DecodeOpLfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 103800 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103810 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103814 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103818 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103822 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103825 "powerpc.tcc"
				)
				{
#line 901 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 103847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103855 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103859 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103863 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103867 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103870 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103874 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103877 "powerpc.tcc"
				)
				{
#line 919 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfs f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103897 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103904 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103917 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103924 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103942 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103949 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103967 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103974 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103991 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103998 "powerpc.tcc"
				>::initialize_function()
				{
#line 343 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104011 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104018 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 217 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104023 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104031 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104038 "powerpc.tcc"
				>::initialize_operands()
				{
#line 290 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104054 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104058 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104062 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104066 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104069 "powerpc.tcc"
				)
				{
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104082 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104086 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104090 "powerpc.tcc"
				>::memory_access_size()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104095 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104103 "powerpc.tcc"
				>
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104107 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104111 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 775 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104116 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104125 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104130 "powerpc.tcc"
				> *DecodeOpLfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 104136 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104146 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104150 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104154 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104158 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104161 "powerpc.tcc"
				)
				{
#line 929 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}
						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104185 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104193 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104197 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104201 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104205 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104208 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104212 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104215 "powerpc.tcc"
				)
				{
#line 949 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104235 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104242 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104255 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104262 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104280 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104287 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104305 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104312 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104330 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104337 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104354 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104361 "powerpc.tcc"
				>::initialize_function()
				{
#line 344 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104374 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104381 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 218 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104386 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104394 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104401 "powerpc.tcc"
				>::initialize_operands()
				{
#line 296 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104417 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104421 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104425 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104429 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104432 "powerpc.tcc"
				)
				{
#line 101 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104445 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104449 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104453 "powerpc.tcc"
				>::memory_access_size()
				{
#line 195 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104458 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104466 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104470 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104474 "powerpc.tcc"
				>::is_splitted()
				{
#line 593 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104489 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104493 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104497 "powerpc.tcc"
				>::split_into()
				{
#line 596 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfs_ctype=0;
						lfs_ctype = 50 << 26;
						lfs_ctype = lfs_ctype | (fd << 21);
						lfs_ctype = lfs_ctype | (ra << 16);
						lfs_ctype = lfs_ctype | (d & 0xffff);
						l.push_back( new OpLfs<CONFIG>(lfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104518 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104523 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104526 "powerpc.tcc"
				>
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104530 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104534 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 776 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104539 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104548 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104553 "powerpc.tcc"
				> *DecodeOpLfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 104559 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104569 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104573 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104577 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104581 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104584 "powerpc.tcc"
				)
				{
#line 959 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104616 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104620 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104624 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104628 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104631 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104635 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104638 "powerpc.tcc"
				)
				{
#line 979 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104650 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104658 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104665 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104678 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104685 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104703 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104710 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104728 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104735 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104753 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104760 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104770 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104778 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104785 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104794 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104802 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104809 "powerpc.tcc"
				>::initialize_function()
				{
#line 345 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104822 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104829 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 219 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104842 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104846 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104850 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104854 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104857 "powerpc.tcc"
				)
				{
#line 102 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104870 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104874 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104878 "powerpc.tcc"
				>::memory_access_size()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104883 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104891 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104895 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104899 "powerpc.tcc"
				>::is_splitted()
				{
#line 614 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104914 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104918 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104922 "powerpc.tcc"
				>::split_into()
				{
#line 617 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfsx_ctype=0;
						lfsx_ctype = 50 << 26;
						lfsx_ctype = lfsx_ctype | (fd << 21);
						lfsx_ctype = lfsx_ctype | (ra << 16);
						lfsx_ctype = lfsx_ctype | (rb << 11);
						lfsx_ctype = lfsx_ctype | (535 << 1);
						l.push_back( new OpLfsx<CONFIG>(lfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104953 "powerpc.tcc"
				>
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104957 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104961 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 777 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104966 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104975 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104980 "powerpc.tcc"
				> *DecodeOpLfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 104986 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104996 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105000 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105004 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105008 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105011 "powerpc.tcc"
				)
				{
#line 989 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 105033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105041 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105045 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105049 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105053 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105056 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105060 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105063 "powerpc.tcc"
				)
				{
#line 1007 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105075 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105083 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105090 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105095 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105103 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105110 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105128 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105135 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105153 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105160 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105178 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105185 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105202 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105209 "powerpc.tcc"
				>::initialize_function()
				{
#line 346 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 105214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105222 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105229 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 220 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105234 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105242 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105249 "powerpc.tcc"
				>::initialize_operands()
				{
#line 509 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 105258 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105266 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105270 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105274 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105278 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105281 "powerpc.tcc"
				)
				{
#line 103 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 105286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105294 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105298 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105302 "powerpc.tcc"
				>::memory_access_size()
				{
#line 197 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 105307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105315 "powerpc.tcc"
				>
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105319 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105323 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 778 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 105328 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105337 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105342 "powerpc.tcc"
				> *DecodeOpLfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 105348 "powerpc.tcc"
					>(code, addr);
				}

				/***********************************

				FLOATING POINT STORE INSTRUCTIONS

				***********************************/
				template <
#line 38 "ppc.isa"
				class
#line 105360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105363 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105367 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105371 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105375 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105378 "powerpc.tcc"
				)
				{
#line 1023 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 105399 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105407 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105411 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105415 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105419 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105422 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105426 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105429 "powerpc.tcc"
				)
				{
#line 1040 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfd f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105449 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105456 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105469 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105476 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105491 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105498 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105516 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105523 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105541 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105548 "powerpc.tcc"
				>::initialize_function()
				{
#line 347 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105553 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105561 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105568 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 221 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105581 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105588 "powerpc.tcc"
				>::initialize_operands()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105596 "powerpc.tcc"
				}
				//Store float
				template <
#line 38 "ppc.isa"
				class
#line 105602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105605 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105609 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105613 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105617 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105620 "powerpc.tcc"
				)
				{
#line 126 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105633 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105637 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105641 "powerpc.tcc"
				>::memory_access_size()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105646 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105655 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105660 "powerpc.tcc"
				> *DecodeOpStfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 105666 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105676 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105680 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105684 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105688 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105691 "powerpc.tcc"
				)
				{
#line 1050 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 105715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105723 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105727 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105731 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105735 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105738 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105742 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105745 "powerpc.tcc"
				)
				{
#line 1070 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105765 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105772 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105785 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105792 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105807 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105814 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105832 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105839 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105857 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105864 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105882 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105889 "powerpc.tcc"
				>::initialize_function()
				{
#line 348 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105902 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105909 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 222 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105922 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105929 "powerpc.tcc"
				>::initialize_operands()
				{
#line 367 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105945 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105949 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105953 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105957 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105960 "powerpc.tcc"
				)
				{
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105973 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105977 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105981 "powerpc.tcc"
				>::memory_access_size()
				{
#line 199 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105986 "powerpc.tcc"
				}
				// Floating point stores with update
				template <
#line 38 "ppc.isa"
				class
#line 105992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105995 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105999 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 106003 "powerpc.tcc"
				>::is_splitted()
				{
#line 638 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 106010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106018 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106022 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 106026 "powerpc.tcc"
				>::split_into()
				{
#line 641 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfd_ctype=0;
						stfd_ctype = 54 << 26;
						stfd_ctype = stfd_ctype | (fs << 21);
						stfd_ctype = stfd_ctype | (ra << 16);
						stfd_ctype = stfd_ctype | (d & 0xffff);
						l.push_back( new OpStfd<CONFIG>(stfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106047 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106056 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106061 "powerpc.tcc"
				> *DecodeOpStfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 106067 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106077 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106081 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106085 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106089 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106092 "powerpc.tcc"
				)
				{
#line 1080 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 106116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106124 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106128 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106132 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106136 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106139 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106143 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106146 "powerpc.tcc"
				)
				{
#line 1100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106166 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106173 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106178 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106186 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106193 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106208 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106215 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106233 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106240 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106258 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106265 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106283 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106290 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106308 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106315 "powerpc.tcc"
				>::initialize_function()
				{
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106328 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106335 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 223 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106348 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106355 "powerpc.tcc"
				>::initialize_operands()
				{
#line 436 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106372 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106376 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106380 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106384 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106387 "powerpc.tcc"
				)
				{
#line 128 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106400 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106404 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106408 "powerpc.tcc"
				>::memory_access_size()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106413 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106421 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 106425 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106429 "powerpc.tcc"
				>::is_splitted()
				{
#line 659 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 106436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106444 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106448 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106452 "powerpc.tcc"
				>::split_into()
				{
#line 662 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfdx_ctype=0;
						stfdx_ctype = 31 << 26;
						stfdx_ctype = stfdx_ctype | (fs << 21);
						stfdx_ctype = stfdx_ctype | (ra << 16);
						stfdx_ctype = stfdx_ctype | (rb << 11);
						stfdx_ctype = stfdx_ctype | (727 << 1);
						l.push_back( new OpStfdx<CONFIG>(stfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106475 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106484 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106489 "powerpc.tcc"
				> *DecodeOpStfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 106495 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106505 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106509 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106513 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106517 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106520 "powerpc.tcc"
				)
				{
#line 1110 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 106540 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106548 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106552 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106556 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106560 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106563 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106567 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106570 "powerpc.tcc"
				)
				{
#line 1126 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106590 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106597 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106610 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106617 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106624 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106632 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106639 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106649 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106657 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106664 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106682 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106689 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106707 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106714 "powerpc.tcc"
				>::initialize_function()
				{
#line 350 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106727 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106734 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 224 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106747 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106754 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106771 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106775 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106779 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106783 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106786 "powerpc.tcc"
				)
				{
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106799 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106803 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106807 "powerpc.tcc"
				>::memory_access_size()
				{
#line 201 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106812 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106821 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106826 "powerpc.tcc"
				> *DecodeOpStfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 106832 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106842 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106846 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106850 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106854 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106857 "powerpc.tcc"
				)
				{
#line 1136 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->FpStoreLSW(fs, ea);
					}
#line 106877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106885 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106889 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106893 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106897 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106900 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106904 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106907 "powerpc.tcc"
				)
				{
#line 1152 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfiwx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106919 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106927 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106934 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106939 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106947 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106954 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106969 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106976 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106994 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107001 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107019 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107026 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107044 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107051 "powerpc.tcc"
				>::initialize_function()
				{
#line 351 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107064 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107071 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107084 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107091 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 107100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107108 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107112 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107116 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107120 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107123 "powerpc.tcc"
				)
				{
#line 130 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107128 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107136 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107140 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107144 "powerpc.tcc"
				>::memory_access_size()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107149 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107158 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107163 "powerpc.tcc"
				> *DecodeOpStfiwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 107169 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107179 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107183 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107187 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107191 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107194 "powerpc.tcc"
				)
				{
#line 1162 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 107213 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107221 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107225 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107229 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107233 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107236 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107240 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107243 "powerpc.tcc"
				)
				{
#line 1177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfs f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107263 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107270 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107283 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107290 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107305 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107312 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107330 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107337 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107355 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107362 "powerpc.tcc"
				>::initialize_function()
				{
#line 352 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107375 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107382 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 226 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107395 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107402 "powerpc.tcc"
				>::initialize_operands()
				{
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107418 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107422 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107426 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107430 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107433 "powerpc.tcc"
				)
				{
#line 131 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107438 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107446 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107450 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107454 "powerpc.tcc"
				>::memory_access_size()
				{
#line 203 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107467 "powerpc.tcc"
				>
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107471 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107475 "powerpc.tcc"
				>::get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107479 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107482 "powerpc.tcc"
				)
				{
#line 738 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107500 "powerpc.tcc"
				>
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107504 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107508 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 763 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107513 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107522 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107527 "powerpc.tcc"
				> *DecodeOpStfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 107533 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107543 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107547 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107551 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107555 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107558 "powerpc.tcc"
				)
				{
#line 1187 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 107581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107589 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107593 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107597 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107601 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107604 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107608 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107611 "powerpc.tcc"
				)
				{
#line 1206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107631 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107638 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107651 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107658 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107673 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107680 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107698 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107705 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107723 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107730 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107748 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107755 "powerpc.tcc"
				>::initialize_function()
				{
#line 353 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107768 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107775 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 227 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107788 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107795 "powerpc.tcc"
				>::initialize_operands()
				{
#line 367 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107811 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107815 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107819 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107823 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107826 "powerpc.tcc"
				)
				{
#line 132 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107839 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107843 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107847 "powerpc.tcc"
				>::memory_access_size()
				{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107860 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107864 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107868 "powerpc.tcc"
				>::is_splitted()
				{
#line 682 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 107875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107883 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 107887 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107891 "powerpc.tcc"
				>::split_into()
				{
#line 685 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfs_ctype=0;
						stfs_ctype = 52 << 26;
						stfs_ctype = stfs_ctype | (fs << 21);
						stfs_ctype = stfs_ctype | (ra << 16);
						stfs_ctype = stfs_ctype | (d & 0xffff);
						l.push_back( new OpStfs<CONFIG>(stfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 107912 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107920 "powerpc.tcc"
				>
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107924 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107928 "powerpc.tcc"
				>::get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107932 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107935 "powerpc.tcc"
				)
				{
#line 738 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107953 "powerpc.tcc"
				>
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107957 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107961 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 764 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107966 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107975 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107980 "powerpc.tcc"
				> *DecodeOpStfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 107986 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107996 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108000 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108004 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108008 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108011 "powerpc.tcc"
				)
				{
#line 1216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 108034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108042 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108046 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108050 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108054 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108057 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108061 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108064 "powerpc.tcc"
				)
				{
#line 1235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108084 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108091 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108104 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108111 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108126 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108133 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108151 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108158 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108176 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108183 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108201 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108208 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108226 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108233 "powerpc.tcc"
				>::initialize_function()
				{
#line 354 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108246 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108253 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 228 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108258 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108266 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108273 "powerpc.tcc"
				>::initialize_operands()
				{
#line 436 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108290 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108294 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108298 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108302 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108305 "powerpc.tcc"
				)
				{
#line 133 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108318 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108322 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108326 "powerpc.tcc"
				>::memory_access_size()
				{
#line 205 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108331 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108339 "powerpc.tcc"
				>
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108343 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108347 "powerpc.tcc"
				>::is_splitted()
				{
#line 703 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 108354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108362 "powerpc.tcc"
				>
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 108366 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108370 "powerpc.tcc"
				>::split_into()
				{
#line 706 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfsx_ctype=0;
						stfsx_ctype = 31 << 26;
						stfsx_ctype = stfsx_ctype | (fs << 21);
						stfsx_ctype = stfsx_ctype | (ra << 16);
						stfsx_ctype = stfsx_ctype | (rb << 11);
						stfsx_ctype = stfsx_ctype | (663 << 1);
						l.push_back( new OpStfsx<CONFIG>(stfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 108393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108401 "powerpc.tcc"
				>
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108405 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108409 "powerpc.tcc"
				>::get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108413 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108416 "powerpc.tcc"
				)
				{
#line 738 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108434 "powerpc.tcc"
				>
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108438 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108442 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 765 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108447 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108456 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108461 "powerpc.tcc"
				> *DecodeOpStfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 108467 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108477 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108481 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108485 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108489 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108492 "powerpc.tcc"
				)
				{
#line 1245 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 108512 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108520 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108524 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108528 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108532 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108535 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108539 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108542 "powerpc.tcc"
				)
				{
#line 1261 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108562 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108569 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108582 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108589 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108596 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108604 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108611 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108629 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108636 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108654 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108661 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108679 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108686 "powerpc.tcc"
				>::initialize_function()
				{
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108691 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108699 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108706 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 229 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108719 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108726 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108743 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108747 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108751 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108755 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108758 "powerpc.tcc"
				)
				{
#line 134 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108771 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108775 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108779 "powerpc.tcc"
				>::memory_access_size()
				{
#line 206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108784 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108792 "powerpc.tcc"
				>
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108796 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108800 "powerpc.tcc"
				>::get_single(
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108804 "powerpc.tcc"
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108807 "powerpc.tcc"
				)
				{
#line 738 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108825 "powerpc.tcc"
				>
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108829 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108833 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 766 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108838 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108847 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108852 "powerpc.tcc"
				> *DecodeOpStfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 108858 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************

				CACHE MANAGEMENT INSTRUCTIONS

				*********************************/
				template <
#line 38 "ppc.isa"
				class
#line 108870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108873 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108877 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108881 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108885 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108888 "powerpc.tcc"
				)
				{
#line 1277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcba(ea);
					}
#line 108897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108905 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108909 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108913 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108917 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108920 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108924 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108927 "powerpc.tcc"
				)
				{
#line 1282 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcba r" << ra << ", r" << rb;
					}
#line 108934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108942 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108949 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108962 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108969 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108984 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108991 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109009 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109016 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109026 "powerpc.tcc"
				}
				/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 109032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109035 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109042 "powerpc.tcc"
				>::initialize_function()
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBA; }
#line 109047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109055 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109062 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 230 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109075 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109082 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109098 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109102 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109106 "powerpc.tcc"
				>::memory_access_size()
				{
#line 207 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109111 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109120 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109125 "powerpc.tcc"
				> *DecodeOpDcba(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 109131 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109141 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109145 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109149 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109153 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109156 "powerpc.tcc"
				)
				{
#line 1288 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbf(ea);
					}
#line 109165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109173 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109177 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109181 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109185 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109188 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109192 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109195 "powerpc.tcc"
				)
				{
#line 1293 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbf r" << ra << ", r" << rb;
					}
#line 109202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109210 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109217 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109230 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109237 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109252 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109259 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109269 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109277 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109284 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109302 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109309 "powerpc.tcc"
				>::initialize_function()
				{
#line 292 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBF; }
#line 109314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109322 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109329 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(8); }
#line 109334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109342 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109349 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109365 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109369 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109373 "powerpc.tcc"
				>::memory_access_size()
				{
#line 208 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109378 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109387 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109392 "powerpc.tcc"
				> *DecodeOpDcbf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 109398 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109408 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109412 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109416 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109420 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109423 "powerpc.tcc"
				)
				{
#line 1298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						cpu->Dcbi(ea);
					}
#line 109431 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109439 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109443 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109447 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109451 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109454 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109458 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109461 "powerpc.tcc"
				)
				{
#line 1302 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbi r" << ra << ", r" << rb;
					}
#line 109468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109476 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109483 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109496 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109503 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109521 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109528 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109546 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109553 "powerpc.tcc"
				>::initialize_function()
				{
#line 293 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBI; }
#line 109558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109566 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109573 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 232 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(6); }
#line 109578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109586 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109593 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109609 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109613 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109617 "powerpc.tcc"
				>::memory_access_size()
				{
#line 209 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109622 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109631 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109636 "powerpc.tcc"
				> *DecodeOpDcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 109642 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109652 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109656 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109660 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109664 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109667 "powerpc.tcc"
				)
				{
#line 1307 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbst(ea);
					}
#line 109676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109684 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109688 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109692 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109696 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109699 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109703 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109706 "powerpc.tcc"
				)
				{
#line 1312 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbst r" << ra << ", r" << rb;
					}
#line 109713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109721 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109728 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109741 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109748 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109763 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109770 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109788 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109795 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109813 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109820 "powerpc.tcc"
				>::initialize_function()
				{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 109825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109833 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109840 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 233 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109853 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109860 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109876 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109880 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109884 "powerpc.tcc"
				>::memory_access_size()
				{
#line 210 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109889 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109898 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109903 "powerpc.tcc"
				> *DecodeOpDcbst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 109909 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109919 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109923 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109927 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109931 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109934 "powerpc.tcc"
				)
				{
#line 1317 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 109941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109949 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109953 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109957 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109961 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109964 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109968 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109971 "powerpc.tcc"
				)
				{
#line 1320 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbt r" << ra << ", r" << rb;
					}
#line 109978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109986 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109993 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110006 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110013 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110023 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110031 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110038 "powerpc.tcc"
				>::initialize_function()
				{
#line 295 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110043 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110051 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110058 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 234 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110071 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110078 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110086 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110094 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110098 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110102 "powerpc.tcc"
				>::memory_access_size()
				{
#line 211 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110107 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110116 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110121 "powerpc.tcc"
				> *DecodeOpDcbt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 110127 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110137 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110141 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110145 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110149 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110152 "powerpc.tcc"
				)
				{
#line 1325 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 110159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110167 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110171 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110175 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110179 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110182 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110186 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110189 "powerpc.tcc"
				)
				{
#line 1328 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbtst r" << ra << ", r" << rb;
					}
#line 110196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110204 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110211 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110224 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110231 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110241 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110249 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110256 "powerpc.tcc"
				>::initialize_function()
				{
#line 296 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110269 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110276 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110281 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110289 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110296 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110312 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110316 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110320 "powerpc.tcc"
				>::memory_access_size()
				{
#line 212 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110325 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110334 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110339 "powerpc.tcc"
				> *DecodeOpDcbtst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 110345 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110355 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110359 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110363 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110367 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110370 "powerpc.tcc"
				)
				{
#line 1333 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbz(ea);
					}
#line 110380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110388 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110392 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110396 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110400 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110403 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110407 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110410 "powerpc.tcc"
				)
				{
#line 1339 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbz r" << ra << ", r" << rb;
					}
#line 110417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110425 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110432 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110445 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110452 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110467 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110474 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110492 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110499 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110509 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110517 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110524 "powerpc.tcc"
				>::initialize_function()
				{
#line 297 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110529 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110537 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110544 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 236 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110557 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110564 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110580 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110584 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110588 "powerpc.tcc"
				>::memory_access_size()
				{
#line 213 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110593 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110602 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110607 "powerpc.tcc"
				> *DecodeOpDcbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 110613 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110623 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110627 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110631 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110635 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110638 "powerpc.tcc"
				)
				{
#line 1344 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Icbi(ea);
					}
#line 110647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110655 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110659 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110663 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110667 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110670 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110674 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110677 "powerpc.tcc"
				)
				{
#line 1349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "icbi r" << ra << ", r" << rb;
					}
#line 110684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110692 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110699 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110704 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110712 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110719 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110734 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110741 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110759 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110766 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110776 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110784 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110791 "powerpc.tcc"
				>::initialize_function()
				{
#line 300 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110804 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110811 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 237 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110824 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110831 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110847 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110851 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110855 "powerpc.tcc"
				>::memory_access_size()
				{
#line 214 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110860 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110869 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110874 "powerpc.tcc"
				> *DecodeOpIcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 110880 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************************

				LOOKASIDE BUFFER MANAGEMENT INSTRUCTIONS

				*********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 110892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110895 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110899 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110903 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110907 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110910 "powerpc.tcc"
				)
				{
#line 1360 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						cpu->Tlbia();
					}
#line 110917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110925 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110929 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110933 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110937 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110940 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110944 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110947 "powerpc.tcc"
				)
				{
#line 1363 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbia"; }
#line 110952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110960 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110967 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110980 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110987 "powerpc.tcc"
				>::initialize_function()
				{
#line 177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 110992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111000 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111007 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 238 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111020 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111027 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111047 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111051 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111055 "powerpc.tcc"
				>::memory_access_size()
				{
#line 215 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111060 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111069 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111074 "powerpc.tcc"
				> *DecodeOpTlbia(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 111080 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111090 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111094 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111098 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111102 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111105 "powerpc.tcc"
				)
				{
#line 1366 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbie(ea);
					}
#line 111113 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111121 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111125 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111129 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111133 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111136 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111140 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111143 "powerpc.tcc"
				)
				{
#line 1370 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbie r" << rb;
					}
#line 111150 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111158 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111165 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111178 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111185 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111200 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111207 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111217 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111225 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111232 "powerpc.tcc"
				>::initialize_function()
				{
#line 178 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111245 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111252 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 239 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111257 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111265 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111272 "powerpc.tcc"
				>::initialize_operands()
				{
#line 865 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rb);
					}
#line 111279 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111287 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111291 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111295 "powerpc.tcc"
				>::memory_access_size()
				{
#line 216 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111300 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111309 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111314 "powerpc.tcc"
				> *DecodeOpTlbie(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 111320 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111330 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111334 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111338 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111342 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111345 "powerpc.tcc"
				)
				{
#line 1375 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* nothing to do */ }
#line 111350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111358 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111362 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111366 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111370 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111373 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111377 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111380 "powerpc.tcc"
				)
				{
#line 1376 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbsync"; }
#line 111385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111393 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111400 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111413 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111420 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111427 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111435 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111442 "powerpc.tcc"
				>::initialize_function()
				{
#line 176 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111455 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111462 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 240 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111467 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111475 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111482 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111502 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111506 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111510 "powerpc.tcc"
				>::memory_access_size()
				{
#line 217 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111515 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111524 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111529 "powerpc.tcc"
				> *DecodeOpTlbsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 111535 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111545 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111549 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111553 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111557 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111560 "powerpc.tcc"
				)
				{
#line 1379 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbld(ea);
					}
#line 111568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111576 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111580 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111584 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111588 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111591 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111595 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111598 "powerpc.tcc"
				)
				{
#line 1383 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbld r" << rb;
					}
#line 111605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111613 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111620 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111633 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111640 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111655 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111662 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111672 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111681 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111686 "powerpc.tcc"
				> *DecodeOpTlbld(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 111692 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111702 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111706 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111710 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111714 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111717 "powerpc.tcc"
				)
				{
#line 1388 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbli(ea);
					}
#line 111725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111733 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111737 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111741 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111745 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111748 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111752 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111755 "powerpc.tcc"
				)
				{
#line 1392 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbli r" << rb;
					}
#line 111762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111770 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111777 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111790 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111797 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111812 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111819 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111829 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111838 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111843 "powerpc.tcc"
				> *DecodeOpTlbli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 111849 "powerpc.tcc"
					>(code, addr);
				}

				/********************************

				EXTERNAL CONTROL INSTRUCTIONS

				********************************/
				template <
#line 38 "ppc.isa"
				class
#line 111861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111864 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111868 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111872 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111876 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111879 "powerpc.tcc"
				)
				{
#line 1403 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 111886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111894 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111898 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111902 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111906 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111909 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111913 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111916 "powerpc.tcc"
				)
				{
#line 1406 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "eciwx r" << rd << ", r" << ra << ", r" << rb;
					}
#line 111923 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111931 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111938 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111951 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111958 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111968 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111976 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111983 "powerpc.tcc"
				>::initialize_function()
				{
#line 298 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 111988 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111996 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112003 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 241 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112008 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112018 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112025 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112034 "powerpc.tcc"
				}
				//Load & Load byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112043 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112047 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112051 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112055 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112058 "powerpc.tcc"
				)
				{
#line 70 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 112063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112071 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112075 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112079 "powerpc.tcc"
				>::memory_access_size()
				{
#line 218 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112084 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112093 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112098 "powerpc.tcc"
				> *DecodeOpEciwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 112104 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112114 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112118 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112122 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112126 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112129 "powerpc.tcc"
				)
				{
#line 1411 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 112136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112144 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112148 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112152 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112156 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112159 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112163 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112166 "powerpc.tcc"
				)
				{
#line 1414 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "ecowx r" << rs << ", r" << ra << ", r" << rb;
					}
#line 112173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112181 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112188 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112201 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112208 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112226 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112233 "powerpc.tcc"
				>::initialize_function()
				{
#line 299 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 112238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112246 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112253 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 242 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112258 "powerpc.tcc"
				}
				//Store & Store byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112267 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112271 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112275 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112279 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112282 "powerpc.tcc"
				)
				{
#line 105 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 112287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112295 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112299 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112303 "powerpc.tcc"
				>::memory_access_size()
				{
#line 219 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112308 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112317 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112322 "powerpc.tcc"
				> *DecodeOpEcowx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 112328 "powerpc.tcc"
					>(code, addr);
				}

				/***************************************

				MEMORY SYNCHRONIZATION INSTRUCTIONS

				***************************************/
				template <
#line 38 "ppc.isa"
				class
#line 112340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112343 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112347 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112351 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112355 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112358 "powerpc.tcc"
				)
				{
#line 1425 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* order is always enforced in functional simulation */ }
#line 112363 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112371 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112375 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112379 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112383 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112386 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112390 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112393 "powerpc.tcc"
				)
				{
#line 1426 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "eieio"; }
#line 112398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112406 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112413 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112426 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112433 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 112440 "powerpc.tcc"
				}
				/** System Register (FnSysRegister | FnSysRegisterSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 112446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112449 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112456 "powerpc.tcc"
				>::initialize_function()
				{
#line 158 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 112461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112469 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112476 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 243 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112489 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112496 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112516 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112520 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112524 "powerpc.tcc"
				>::memory_access_size()
				{
#line 220 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112529 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112538 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112543 "powerpc.tcc"
				> *DecodeOpEieio(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 112549 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112559 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112563 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112567 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112571 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112574 "powerpc.tcc"
				)
				{
#line 1429 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* order is always enforced in functional simulation */
						/* but we still must flush subsequent instruction in the prefetch buffer, forcing refetch */
						cpu->FlushSubsequentInstructions();
					}
#line 112583 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112591 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112595 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112599 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112603 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112606 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112610 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112613 "powerpc.tcc"
				)
				{
#line 1434 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "isync"; }
#line 112618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112626 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112633 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 259 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::REFETCH_SERIALIZATION;
					}
#line 112640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112648 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112655 "powerpc.tcc"
				>::initialize_function()
				{
#line 159 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 112660 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112668 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112675 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 244 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112688 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112695 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112715 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112719 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112723 "powerpc.tcc"
				>::memory_access_size()
				{
#line 221 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112728 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112737 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112742 "powerpc.tcc"
				> *DecodeOpIsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 112748 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112758 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112762 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112766 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112770 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112773 "powerpc.tcc"
				)
				{
#line 1437 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Lwarx(rd, ea);
					}
#line 112782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112790 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112794 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112798 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112802 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112805 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112809 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112812 "powerpc.tcc"
				)
				{
#line 1442 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwarx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 112824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112832 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112839 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112852 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112859 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 112866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112874 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112881 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112899 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112906 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112924 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112931 "powerpc.tcc"
				>::initialize_function()
				{
#line 356 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 112936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112944 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112951 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 245 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 112956 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112966 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112973 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112990 "powerpc.tcc"
				>
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112994 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112998 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 113002 "powerpc.tcc"
#line 62 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 113005 "powerpc.tcc"
				)
				{
#line 78 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 113010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113018 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113022 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 113026 "powerpc.tcc"
				>::memory_access_size()
				{
#line 222 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113031 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113040 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113045 "powerpc.tcc"
				> *DecodeOpLwarx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 113051 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113061 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113065 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113069 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113073 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113076 "powerpc.tcc"
				)
				{
#line 1452 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Stwcx(rs, ea);
					}
#line 113085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113093 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113097 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113101 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113105 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113108 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113112 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113115 "powerpc.tcc"
				)
				{
#line 1458 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwcx. r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 113127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113135 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113142 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113155 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113162 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 113169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113177 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113184 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113202 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113209 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113219 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113227 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113234 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113252 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113259 "powerpc.tcc"
				>::initialize_function()
				{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreSerial; }
#line 113264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113272 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113279 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 246 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(16); }
#line 113284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113292 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113299 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 113308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113316 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113320 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113324 "powerpc.tcc"
				>::memory_access_size()
				{
#line 223 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113329 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113338 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113343 "powerpc.tcc"
				> *DecodeOpStwcx_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 113349 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113359 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113363 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113367 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113371 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113374 "powerpc.tcc"
				)
				{
#line 1468 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ cpu->Synchronize(); }
#line 113379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113387 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113391 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113395 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113399 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113402 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113406 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113409 "powerpc.tcc"
				)
				{
#line 1469 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "sync"; }
#line 113414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113422 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113429 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113442 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113449 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 247 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::STORE_SERIALIZATION);
					}
#line 113456 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113464 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113471 "powerpc.tcc"
				>::initialize_function()
				{
#line 175 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 113476 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113484 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113491 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 247 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 113496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113504 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113511 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113531 "powerpc.tcc"
				>
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113535 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113539 "powerpc.tcc"
				>::memory_access_size()
				{
#line 224 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113544 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113553 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113558 "powerpc.tcc"
				> *DecodeOpSync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSync<
#line 38 "ppc.isa"
					CONFIG
#line 113564 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/*************************************

				SYSTEM LINKAGE INSTRUCTIONS

				*************************************/
				template <
#line 38 "ppc.isa"
				class
#line 113609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113612 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113616 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113620 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113624 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113627 "powerpc.tcc"
				)
				{
#line 42 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						throw SystemCallException<CONFIG>();
					}
#line 113635 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113643 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113647 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113651 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113655 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113658 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113662 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113665 "powerpc.tcc"
				)
				{
#line 46 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "sc";
					}
#line 113672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113680 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113687 "powerpc.tcc"
				>::initialize_function()
				{
#line 174 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 113692 "powerpc.tcc"
				}
				/** Misc **/
				template <
#line 38 "ppc.isa"
				class
#line 113698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113701 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113708 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 250 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113721 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113728 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113740 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113749 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113754 "powerpc.tcc"
				> *DecodeOpSc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSc<
#line 38 "ppc.isa"
					CONFIG
#line 113760 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113770 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113774 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113778 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113782 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113785 "powerpc.tcc"
				)
				{
#line 51 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetNIA(cpu->GetSRR0() & 0xfffffffcUL);
						cpu->SetMSR((msr & 0xffff008cUL) | (cpu->GetSRR1() & 0x0000ff73UL));
					}
#line 113797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113805 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113809 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113813 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113817 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113820 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113824 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113827 "powerpc.tcc"
				)
				{
#line 59 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "rfi" << endl;
					}
#line 113834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113842 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113849 "powerpc.tcc"
				>::initialize_function()
				{
#line 173 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 113854 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113862 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113869 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113882 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113889 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113901 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113910 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113915 "powerpc.tcc"
				> *DecodeOpRfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 113921 "powerpc.tcc"
					>(code, addr);
				}

				/***************************

				TRAP INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 113933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113936 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113940 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113944 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113948 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113951 "powerpc.tcc"
				)
				{
#line 70 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a, b;
						int trap;
						a = cpu->GetGPR(ra);
						b = cpu->GetGPR(rb);
						trap = 0;
						if(a < b && (to & 16)) trap = 1;
						if(a > b && (to & 8)) trap = 1;
						if(a == b && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) b && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) b && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 113968 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113976 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113980 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113984 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113988 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113991 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113995 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113998 "powerpc.tcc"
				)
				{
#line 83 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "tw " << to << ", r" << ra << ", r" << rb;
					}
#line 114005 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114010 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114013 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114020 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114025 "powerpc.tcc"
				}
				/*
				tw.initialize_function =      { Operation<CONFIG>::function = FnIntBasicSerial; }
				twi.initialize_function =     { Operation<CONFIG>::function = FnIntBasicSerial; }
				*/
				template <
#line 38 "ppc.isa"
				class
#line 114034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114037 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114044 "powerpc.tcc"
				>::initialize_function()
				{
#line 249 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114057 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114064 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 252 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114077 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114084 "powerpc.tcc"
				>::initialize_operands()
				{
#line 378 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 114092 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114101 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114106 "powerpc.tcc"
				> *DecodeOpTw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTw<
#line 38 "ppc.isa"
					CONFIG
#line 114112 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114122 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114126 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114130 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114134 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114137 "powerpc.tcc"
				)
				{
#line 88 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a;
						int trap;
						a = (int32_t) cpu->GetGPR(ra);
						trap = 0;
						if(a < simm && (to & 16)) trap = 1;
						if(a > simm && (to & 8)) trap = 1;
						if(a == simm && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) simm && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) simm && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 114153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114161 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114165 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114169 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114173 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114176 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114180 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114183 "powerpc.tcc"
				)
				{
#line 100 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "twi " << to << ", r" << ra << ", " << simm;
					}
#line 114190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114198 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114205 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114210 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114218 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114225 "powerpc.tcc"
				>::initialize_function()
				{
#line 250 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114230 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114238 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114245 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114258 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114265 "powerpc.tcc"
				>::initialize_operands()
				{
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
					}
#line 114272 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114281 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114286 "powerpc.tcc"
				> *DecodeOpTwi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 114292 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************

				PROCESSOR CONTROL INSTRUCTIONS

				******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 114304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114307 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114311 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114315 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114319 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114322 "powerpc.tcc"
				)
				{
#line 110 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read XER
						uint32_t xer = cpu->GetXER();

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR[crfD]: CR[crfD]=XER[0-3]
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | ((xer & 0xf0000000UL) >> (4 * crfD));

						// Reset XER[0-3]
						xer = xer & 0x0fffffffUL;

						// Update CR
						cpu->SetCR(cr);

						// Update XER
						cpu->SetXER(xer);
					}
#line 114345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114353 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114357 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114361 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114365 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114368 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114372 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114375 "powerpc.tcc"
				)
				{
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mcrxr cr" << crfD;
					}
#line 114382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114390 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114397 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114410 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114417 "powerpc.tcc"
				>::initialize_function()
				{
#line 190 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114430 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 254 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114450 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 789 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(XER_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 114466 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114475 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114480 "powerpc.tcc"
				> *DecodeOpMcrxr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 114486 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114496 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114500 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114504 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114508 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114511 "powerpc.tcc"
				)
				{
#line 134 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Move CR to destination GPR
						cpu->SetGPR(rd, cpu->GetCR());
					}
#line 114519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114527 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114531 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114535 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114539 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114542 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114546 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114549 "powerpc.tcc"
				)
				{
#line 138 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfcr r" << rd;
					}
#line 114556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114564 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114571 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114584 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114591 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 114598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114606 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114613 "powerpc.tcc"
				>::initialize_function()
				{
#line 191 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114626 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114633 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114646 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114653 "powerpc.tcc"
				>::initialize_operands()
				{
#line 620 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);
						OUTPUT(GPR_T, rd);
					}
#line 114668 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114677 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114682 "powerpc.tcc"
				> *DecodeOpMfcr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 114688 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114698 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114702 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114706 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114710 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114713 "powerpc.tcc"
				)
				{
#line 143 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						// Move MSR to destination GPR
						cpu->SetGPR(rd, msr);
					}
#line 114724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114732 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114736 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114740 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114744 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114747 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114751 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114754 "powerpc.tcc"
				)
				{
#line 150 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfmsr r" << rd;
					}
#line 114761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114769 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114776 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114789 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114796 "powerpc.tcc"
				>::initialize_function()
				{
#line 160 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 114801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114809 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114816 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 256 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114829 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114836 "powerpc.tcc"
				>::initialize_operands()
				{
#line 615 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 114843 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114852 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114857 "powerpc.tcc"
				> *DecodeOpMfmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 114863 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114873 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114877 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114881 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114885 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114888 "powerpc.tcc"
				)
				{
#line 155 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetSPR(n);
						cpu->SetGPR(rd, result);
					}
#line 114897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114905 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114909 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114913 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114917 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114920 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114924 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114927 "powerpc.tcc"
				)
				{
#line 160 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mfxer r" << rd;
							case 8: os << "mflr r" << rd; return;
							case 9: os << "mfctr r" << rd; return;
							case 22: os << "mfdec r" << rd; return;
							case 528: os << "mfibatu r" << rd << ", 0"; return;
							case 529: os << "mfibatl r" << rd << ", 0"; return;
							case 530: os << "mfibatu r" << rd << ", 1"; return;
							case 531: os << "mfibatl r" << rd << ", 1"; return;
							case 532: os << "mfibatu r" << rd << ", 2"; return;
							case 533: os << "mfibatl r" << rd << ", 2"; return;
							case 534: os << "mfibatu r" << rd << ", 3"; return;
							case 535: os << "mfibatl r" << rd << ", 3"; return;
							case 536: os << "mfdbatu r" << rd << ", 0"; return;
							case 537: os << "mfdbatl r" << rd << ", 0"; return;
							case 538: os << "mfdbatu r" << rd << ", 1"; return;
							case 539: os << "mfdbatl r" << rd << ", 1"; return;
							case 540: os << "mfdbatu r" << rd << ", 2"; return;
							case 541: os << "mfdbatl r" << rd << ", 2"; return;
							case 542: os << "mfdbatu r" << rd << ", 3"; return;
							case 543: os << "mfdbatl r" << rd << ", 3"; return;
							case 560: os << "mfibatu r" << rd << ", 4"; return;
							case 561: os << "mfibatl r" << rd << ", 4"; return;
							case 562: os << "mfibatu r" << rd << ", 5"; return;
							case 563: os << "mfibatl r" << rd << ", 5"; return;
							case 564: os << "mfibatu r" << rd << ", 6"; return;
							case 565: os << "mfibatl r" << rd << ", 6"; return;
							case 566: os << "mfibatu r" << rd << ", 7"; return;
							case 567: os << "mfibatl r" << rd << ", 7"; return;
							case 568: os << "mfdbatu r" << rd << ", 4"; return;
							case 569: os << "mfdbatl r" << rd << ", 4"; return;
							case 570: os << "mfdbatu r" << rd << ", 5"; return;
							case 571: os << "mfdbatl r" << rd << ", 5"; return;
							case 572: os << "mfdbatu r" << rd << ", 6"; return;
							case 573: os << "mfdbatl r" << rd << ", 6"; return;
							case 574: os << "mfdbatu r" << rd << ", 7"; return;
							case 575: os << "mfdbatl r" << rd << ", 7"; return;
						}

						os << "mfspr r" << rd << ", " << n;
					}
#line 114975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114983 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114990 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115003 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115010 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 204 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 528: // IBAT0U
							case 529: // IBAT0L
							case 530: // IBAT1U
							case 531: // IBAT1L
							case 532: // IBAT2U
							case 533: // IBAT2L
							case 534: // IBAT3U
							case 535: // IBAT3L
							case 560: // IBAT4U
							case 561: // IBAT4L
							case 562: // IBAT5U
							case 563: // IBAT5L
							case 564: // IBAT6U
							case 565: // IBAT6L
							case 566: // IBAT7U
							case 567: // IBAT7L
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
							case 256: // VRSAVE
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
						}

						// mtspr (DBAT, MSS, Time Base, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115052 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115059 "powerpc.tcc"
				>::initialize_function()
				{
#line 161 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115072 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115079 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 257 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 115084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115092 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115099 "powerpc.tcc"
				>::initialize_operands()
				{
#line 633 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							INPUT(XER_T,0);
							INPUT(XER_T,1);
							INPUT(XER_T,2);
							INPUT(XER_T,3);
							break;
						case 8:
							INPUT(LR_T,0);
							break;
						case 9:
							INPUT(CTR_T,0);
							/*
							INPUT(CR_T,1);
							INPUT(CR_T,2);
							INPUT(CR_T,3);
							INPUT(CR_T,4);
							INPUT(CR_T,5);
							INPUT(CR_T,6);
							INPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
						OUTPUT(GPR_T, rd);
					}
#line 115133 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115142 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115147 "powerpc.tcc"
				> *DecodeOpMfspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 115153 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115163 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115167 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115171 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115175 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115178 "powerpc.tcc"
				)
				{
#line 206 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetGPR(rs);
						cpu->SetSPR(n, result);
					}
#line 115187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115195 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115199 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115203 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115207 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115210 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115214 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115217 "powerpc.tcc"
				)
				{
#line 211 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mtxer r" << rs; return;
							case 8: os << "mtlr r" << rs; return;
							case 9: os << "mtctr r" << rs; return;
							case 22: os << "mtdec r" << rs; return;
							case 528: os << "mtibatu 0, r" << rs; return;
							case 529: os << "mtibatl 0, r" << rs; return;
							case 530: os << "mtibatu 1, r" << rs; return;
							case 531: os << "mtibatl 1, r" << rs; return;
							case 532: os << "mtibatu 2, r" << rs; return;
							case 533: os << "mtibatl 2, r" << rs; return;
							case 534: os << "mtibatu 3, r" << rs; return;
							case 535: os << "mtibatl 3, r" << rs; return;
							case 536: os << "mtdbatu 0, r" << rs; return;
							case 537: os << "mtdbatl 0, r" << rs; return;
							case 538: os << "mtdbatu 1, r" << rs; return;
							case 539: os << "mtdbatl 1, r" << rs; return;
							case 540: os << "mtdbatu 2, r" << rs; return;
							case 541: os << "mtdbatl 2, r" << rs; return;
							case 542: os << "mtdbatu 3, r" << rs; return;
							case 543: os << "mtdbatl 3, r" << rs; return;
							case 560: os << "mtibatu 4, r" << rs; return;
							case 561: os << "mtibatl 4, r" << rs; return;
							case 562: os << "mtibatu 5, r" << rs; return;
							case 563: os << "mtibatl 5, r" << rs; return;
							case 564: os << "mtibatu 6, r" << rs; return;
							case 565: os << "mtibatl 6, r" << rs; return;
							case 566: os << "mtibatu 7, r" << rs; return;
							case 567: os << "mtibatl 7, r" << rs; return;
							case 568: os << "mtdbatu 4, r" << rs; return;
							case 569: os << "mtdbatl 4, r" << rs; return;
							case 570: os << "mtdbatu 5, r" << rs; return;
							case 571: os << "mtdbatl 5, r" << rs; return;
							case 572: os << "mtdbatu 6, r" << rs; return;
							case 573: os << "mtdbatl 6, r" << rs; return;
							case 574: os << "mtdbatu 7, r" << rs; return;
							case 575: os << "mtdbatl 7, r" << rs; return;
						}

						os << "mtspr " << n << ", r" << rs;
					}
#line 115265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115273 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115280 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115285 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115293 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115300 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: // XER
							Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::REFETCH_SERIALIZATION);
							return;
						}
						// mtspr (DBATs, IBATs, MSS, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115323 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115330 "powerpc.tcc"
				>::initialize_function()
				{
#line 166 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnSysRegisterSerial;
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						//	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
					}
#line 115339 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115347 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115354 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 261 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 115359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115367 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115374 "powerpc.tcc"
				>::initialize_operands()
				{
#line 702 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							OUTPUT(XER_T,0);
							OUTPUT(XER_T,1);
							OUTPUT(XER_T,2);
							OUTPUT(XER_T,3);
							break;
						case 8:
							OUTPUT(LR_T,0);
							break;
						case 9:
							OUTPUT(CTR_T,0);
							/*
							OUTPUT(CR_T,1);
							OUTPUT(CR_T,2);
							OUTPUT(CR_T,3);
							OUTPUT(CR_T,4);
							OUTPUT(CR_T,5);
							OUTPUT(CR_T,6);
							OUTPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
					}
#line 115408 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115417 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115422 "powerpc.tcc"
				> *DecodeOpMtspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 115428 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115438 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115442 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115446 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115450 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115453 "powerpc.tcc"
				)
				{
#line 257 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t d;
						d = ((tbr & 0x1F) << 5) + ((tbr >> 5) & 0x1F);
						switch(d)
						{
							case 268: cpu->SetGPR(rd, cpu->GetTBL()); break;
							case 269: cpu->SetGPR(rd, cpu->GetTBU()); break;
						default:
							/* illegal instruction */
							throw IllegalInstructionException<CONFIG>();
						}
					}
#line 115469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115477 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115481 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115485 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115489 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115492 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115496 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115499 "powerpc.tcc"
				)
				{
#line 269 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mftb r" << rd << ", " << tbr;
					}
#line 115506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115514 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115521 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115534 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115541 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115556 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115563 "powerpc.tcc"
				>::initialize_function()
				{
#line 164 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 115568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115576 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115583 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 258 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115596 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115603 "powerpc.tcc"
				>::initialize_operands()
				{
#line 615 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 115610 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115619 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115624 "powerpc.tcc"
				> *DecodeOpMftb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 115630 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115640 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115644 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115648 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115652 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115655 "powerpc.tcc"
				)
				{
#line 274 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t cr = cpu->GetCR();

						// Generate a bit mask of bits to move from source GPR to CR
						uint32_t m = 128;
						uint32_t mask = 0;
						unsigned int i = 8; // Hope compiler will unroll the loop !
						do
						{
							mask = (crm & m) ? (mask << 4) | 0xf : mask << 4;
						} while(m >>= 1, --i);

						// Apply the bit mask
						cr = (cr & ~mask) | (s & mask);

						// Update CR
						cpu->SetCR(cr);
					}
#line 115679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115687 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115691 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115695 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115699 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115702 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115706 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115709 "powerpc.tcc"
				)
				{
#line 294 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(crm == 0xff)
						os << "mtcr r" << rs;
						else
						os << "mtcrf " << crm << ", r" << rs;
					}
#line 115719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115727 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115734 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115747 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115754 "powerpc.tcc"
				>::initialize_function()
				{
#line 192 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 115759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115767 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115774 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 259 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115787 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115794 "powerpc.tcc"
				>::initialize_operands()
				{
#line 680 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 115818 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115827 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115832 "powerpc.tcc"
				> *DecodeOpMtcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 115838 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115848 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115852 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115856 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115860 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115863 "powerpc.tcc"
				)
				{
#line 302 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetMSR(cpu->GetGPR(rs));
					}
#line 115873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115881 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115885 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115889 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115893 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115896 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115900 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115903 "powerpc.tcc"
				)
				{
#line 308 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtmsr r" << rs;
					}
#line 115910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115918 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115925 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115938 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115945 "powerpc.tcc"
				>::initialize_function()
				{
#line 165 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115958 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115965 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 260 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115978 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115985 "powerpc.tcc"
				>::initialize_operands()
				{
#line 675 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
					}
#line 115992 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116001 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116006 "powerpc.tcc"
				> *DecodeOpMtmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 116012 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************************

				SEGMENT REGISTER MANIPULATION INSTRUCTIONS

				**********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 116024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116027 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116031 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116035 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116039 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116042 "powerpc.tcc"
				)
				{
#line 318 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR(sr));
					}
#line 116052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116060 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116064 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116068 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116072 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116075 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116079 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116082 "powerpc.tcc"
				)
				{
#line 324 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsr r" << rd << ", " << sr;
					}
#line 116089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116097 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116104 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116117 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116124 "powerpc.tcc"
				>::initialize_function()
				{
#line 162 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 116129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116137 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116144 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 262 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116157 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116164 "powerpc.tcc"
				>::initialize_operands()
				{
#line 740 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(SR_T, sr);
					}
#line 116172 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116181 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116186 "powerpc.tcc"
				> *DecodeOpMfsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 116192 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116202 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116206 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116210 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116214 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116217 "powerpc.tcc"
				)
				{
#line 329 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR((cpu->GetGPR(rb) >> 28) & 0xf));
					}
#line 116227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116235 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116239 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116243 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116247 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116250 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116254 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116257 "powerpc.tcc"
				)
				{
#line 335 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsrin r" << rd << ", r" << rb;
					}
#line 116264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116272 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116279 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116292 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116299 "powerpc.tcc"
				>::initialize_function()
				{
#line 163 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116312 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116319 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 263 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116332 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116339 "powerpc.tcc"
				>::initialize_operands()
				{
#line 587 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, rb);
					}
#line 116347 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116356 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116361 "powerpc.tcc"
				> *DecodeOpMfsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116367 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116377 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116381 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116385 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116389 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116392 "powerpc.tcc"
				)
				{
#line 340 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR(sr, cpu->GetGPR(rs));
					}
#line 116402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116410 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116414 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116418 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116422 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116425 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116429 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116432 "powerpc.tcc"
				)
				{
#line 346 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsr " << sr << ", r" << rs;
					}
#line 116439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116447 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116454 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116467 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116474 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116489 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116496 "powerpc.tcc"
				>::initialize_function()
				{
#line 171 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116509 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116516 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 264 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116529 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116536 "powerpc.tcc"
				>::initialize_operands()
				{
#line 734 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(SR_T, sr);
					}
#line 116544 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116553 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116558 "powerpc.tcc"
				> *DecodeOpMtsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 116564 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116574 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116578 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116582 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116586 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116589 "powerpc.tcc"
				)
				{
#line 351 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR((cpu->GetGPR(rb) >> 28) & 0xf, cpu->GetGPR(rs));
					}
#line 116599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116607 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116611 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116615 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116619 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116622 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116626 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116629 "powerpc.tcc"
				)
				{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsrin r" << rs << ", r" << rb;
					}
#line 116636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116644 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116651 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116664 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116671 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116678 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116686 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116693 "powerpc.tcc"
				>::initialize_function()
				{
#line 172 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116706 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116713 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 265 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116726 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116733 "powerpc.tcc"
				>::initialize_operands()
				{
#line 746 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
					}
#line 116741 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116750 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116755 "powerpc.tcc"
				> *DecodeOpMtsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116761 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116771 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116775 "powerpc.tcc"
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116779 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116783 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116786 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116790 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116793 "powerpc.tcc"
				)
				{
#line 3 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dss " << strm << ", 0";
					}
#line 116800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116808 "powerpc.tcc"
				>

				void
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116815 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116820 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116829 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116834 "powerpc.tcc"
				> *DecodeOpDss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDss<
#line 38 "ppc.isa"
					CONFIG
#line 116840 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116850 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116854 "powerpc.tcc"
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116858 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116862 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116865 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116869 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116872 "powerpc.tcc"
				)
				{
#line 9 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dssall " << strm;
					}
#line 116879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116887 "powerpc.tcc"
				>

				void
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116894 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116899 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116908 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116913 "powerpc.tcc"
				> *DecodeOpDssall(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 116919 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116929 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116933 "powerpc.tcc"
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116937 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116941 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116944 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116948 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116951 "powerpc.tcc"
				)
				{
#line 15 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dst r" << ra << ", r" << rb << ", " << strm;
					}
#line 116958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116966 "powerpc.tcc"
				>

				void
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116973 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116978 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116987 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116992 "powerpc.tcc"
				> *DecodeOpDst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDst<
#line 38 "ppc.isa"
					CONFIG
#line 116998 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117008 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117012 "powerpc.tcc"
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117016 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117020 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117023 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117027 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117030 "powerpc.tcc"
				)
				{
#line 21 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstst r" << ra << ", r" << rb << ", " << strm;
					}
#line 117037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117045 "powerpc.tcc"
				>

				void
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117052 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117057 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117066 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117071 "powerpc.tcc"
				> *DecodeOpDstst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 117077 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117087 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117091 "powerpc.tcc"
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117095 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117099 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117102 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117106 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117109 "powerpc.tcc"
				)
				{
#line 27 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117124 "powerpc.tcc"
				>

				void
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117131 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117136 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117145 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117150 "powerpc.tcc"
				> *DecodeOpDststt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 117156 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117166 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117170 "powerpc.tcc"
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117174 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117178 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117181 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117185 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117188 "powerpc.tcc"
				)
				{
#line 33 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117203 "powerpc.tcc"
				>

				void
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117210 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117215 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117224 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117229 "powerpc.tcc"
				> *DecodeOpDstt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 117235 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117245 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117249 "powerpc.tcc"
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117253 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117257 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117260 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117264 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117267 "powerpc.tcc"
				)
				{
#line 39 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvebx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117282 "powerpc.tcc"
				>

				void
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117289 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117308 "powerpc.tcc"
				> *DecodeOpLvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 117314 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117324 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117328 "powerpc.tcc"
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117332 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117336 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117339 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117343 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117346 "powerpc.tcc"
				)
				{
#line 45 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvehx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117361 "powerpc.tcc"
				>

				void
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117368 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117373 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117382 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117387 "powerpc.tcc"
				> *DecodeOpLvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 117393 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117403 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117407 "powerpc.tcc"
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117411 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117415 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117418 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117422 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117425 "powerpc.tcc"
				)
				{
#line 51 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvewx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117440 "powerpc.tcc"
				>

				void
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117447 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117452 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117461 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117466 "powerpc.tcc"
				> *DecodeOpLvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 117472 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117482 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117486 "powerpc.tcc"
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117490 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117494 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117497 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117501 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117504 "powerpc.tcc"
				)
				{
#line 57 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117519 "powerpc.tcc"
				>

				void
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117526 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117531 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117540 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117545 "powerpc.tcc"
				> *DecodeOpLvsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 117551 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117561 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117565 "powerpc.tcc"
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117569 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117573 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117576 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117580 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117583 "powerpc.tcc"
				)
				{
#line 63 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsr v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117598 "powerpc.tcc"
				>

				void
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117605 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117610 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117619 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117624 "powerpc.tcc"
				> *DecodeOpLvsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 117630 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117640 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117644 "powerpc.tcc"
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117648 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117652 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117655 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117659 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117662 "powerpc.tcc"
				)
				{
#line 69 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117677 "powerpc.tcc"
				>

				void
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117684 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117689 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117698 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117703 "powerpc.tcc"
				> *DecodeOpLvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 117709 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117719 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117723 "powerpc.tcc"
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117727 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117731 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117734 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117738 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117741 "powerpc.tcc"
				)
				{
#line 75 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvxl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117756 "powerpc.tcc"
				>

				void
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117763 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117768 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117777 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117782 "powerpc.tcc"
				> *DecodeOpLvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 117788 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117798 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117802 "powerpc.tcc"
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117806 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117810 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117813 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117817 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117820 "powerpc.tcc"
				)
				{
#line 81 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mfvscr v" << vd;
					}
#line 117827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117835 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117842 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117855 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117862 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117869 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117878 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117883 "powerpc.tcc"
				> *DecodeOpMfvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117889 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117899 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117903 "powerpc.tcc"
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117907 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117911 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117914 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117918 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117921 "powerpc.tcc"
				)
				{
#line 87 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mtvscr v" << vb;
					}
#line 117928 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117936 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117943 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117948 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117956 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117963 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117970 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117979 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117984 "powerpc.tcc"
				> *DecodeOpMtvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117990 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118000 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118004 "powerpc.tcc"
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118008 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118012 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118015 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118019 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118022 "powerpc.tcc"
				)
				{
#line 93 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvebx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118037 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118044 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118057 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118064 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118071 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118080 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118085 "powerpc.tcc"
				> *DecodeOpStvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 118091 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118101 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118105 "powerpc.tcc"
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118109 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118113 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118116 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118120 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118123 "powerpc.tcc"
				)
				{
#line 99 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvehx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118130 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118138 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118145 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118150 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118158 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118165 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118172 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118181 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118186 "powerpc.tcc"
				> *DecodeOpStvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 118192 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118202 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118206 "powerpc.tcc"
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118210 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118214 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118217 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118221 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118224 "powerpc.tcc"
				)
				{
#line 105 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvewx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118239 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118246 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118259 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118266 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118273 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118282 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118287 "powerpc.tcc"
				> *DecodeOpStvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 118293 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118303 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118307 "powerpc.tcc"
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118311 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118315 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118318 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118322 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118325 "powerpc.tcc"
				)
				{
#line 111 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118340 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118347 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118360 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118367 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118374 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118383 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118388 "powerpc.tcc"
				> *DecodeOpStvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 118394 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118404 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118408 "powerpc.tcc"
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118412 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118416 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118419 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118423 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118426 "powerpc.tcc"
				)
				{
#line 117 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvxl v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118433 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118441 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118448 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118461 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118468 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118475 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118484 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118489 "powerpc.tcc"
				> *DecodeOpStvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 118495 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118505 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118509 "powerpc.tcc"
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118513 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118517 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118520 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118524 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118527 "powerpc.tcc"
				)
				{
#line 123 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 118534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118542 "powerpc.tcc"
				>

				void
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118549 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118554 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118563 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118568 "powerpc.tcc"
				> *DecodeOpVaddcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 118574 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118584 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118588 "powerpc.tcc"
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118592 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118596 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118599 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118603 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118606 "powerpc.tcc"
				)
				{
#line 129 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 118613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118621 "powerpc.tcc"
				>

				void
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118628 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 118633 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118642 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118647 "powerpc.tcc"
				> *DecodeOpVaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 118653 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118663 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118667 "powerpc.tcc"
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118671 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118675 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118678 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118682 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118685 "powerpc.tcc"
				)
				{
#line 135 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118692 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118700 "powerpc.tcc"
				>

				void
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118707 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118712 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118721 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118726 "powerpc.tcc"
				> *DecodeOpVaddsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 118732 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118742 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118746 "powerpc.tcc"
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118750 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118754 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118757 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118761 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118764 "powerpc.tcc"
				)
				{
#line 141 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118779 "powerpc.tcc"
				>

				void
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118786 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118791 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118800 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118805 "powerpc.tcc"
				> *DecodeOpVaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 118811 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118821 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118825 "powerpc.tcc"
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118829 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118833 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118836 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118840 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118843 "powerpc.tcc"
				)
				{
#line 147 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 118850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118858 "powerpc.tcc"
				>

				void
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118865 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118870 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118879 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118884 "powerpc.tcc"
				> *DecodeOpVaddsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 118890 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118900 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118904 "powerpc.tcc"
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118908 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118912 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118915 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118919 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118922 "powerpc.tcc"
				)
				{
#line 153 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubm v" << vd << ", v" << va << ", v" << vb;
					}
#line 118929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118937 "powerpc.tcc"
				>

				void
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118944 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118949 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118958 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118963 "powerpc.tcc"
				> *DecodeOpVaddubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 118969 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118979 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118983 "powerpc.tcc"
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 118987 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118991 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118994 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118998 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119001 "powerpc.tcc"
				)
				{
#line 159 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119016 "powerpc.tcc"
				>

				void
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 119023 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119028 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119037 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119042 "powerpc.tcc"
				> *DecodeOpVaddubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 119048 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119058 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119062 "powerpc.tcc"
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119066 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119070 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119073 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119077 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119080 "powerpc.tcc"
				)
				{
#line 165 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119095 "powerpc.tcc"
				>

				void
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119102 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119107 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119116 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119121 "powerpc.tcc"
				> *DecodeOpVadduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 119127 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119137 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119141 "powerpc.tcc"
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119145 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119149 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119152 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119156 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119159 "powerpc.tcc"
				)
				{
#line 171 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119174 "powerpc.tcc"
				>

				void
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119181 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119186 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119195 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119200 "powerpc.tcc"
				> *DecodeOpVadduhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 119206 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119216 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119220 "powerpc.tcc"
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119224 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119228 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119231 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119235 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119238 "powerpc.tcc"
				)
				{
#line 177 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119253 "powerpc.tcc"
				>

				void
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119260 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119265 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119274 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119279 "powerpc.tcc"
				> *DecodeOpVadduwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 119285 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119295 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119299 "powerpc.tcc"
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119303 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119307 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119310 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119314 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119317 "powerpc.tcc"
				)
				{
#line 183 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduws v" << vd << ", v" << va << ", v" << vb;
					}
#line 119324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119332 "powerpc.tcc"
				>

				void
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119339 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119344 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119353 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119358 "powerpc.tcc"
				> *DecodeOpVadduws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 119364 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119374 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119378 "powerpc.tcc"
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119382 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119386 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119389 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119393 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119396 "powerpc.tcc"
				)
				{
#line 189 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vand v" << vd << ", v" << va << ", v" << vb;
					}
#line 119403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119411 "powerpc.tcc"
				>

				void
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119418 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119423 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119432 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119437 "powerpc.tcc"
				> *DecodeOpVand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVand<
#line 38 "ppc.isa"
					CONFIG
#line 119443 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119453 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119457 "powerpc.tcc"
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119461 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119465 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119468 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119472 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119475 "powerpc.tcc"
				)
				{
#line 195 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vandc v" << vd << ", v" << va << ", v" << vb;
					}
#line 119482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119490 "powerpc.tcc"
				>

				void
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119497 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119502 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119511 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119516 "powerpc.tcc"
				> *DecodeOpVandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 119522 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119532 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119536 "powerpc.tcc"
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119540 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119544 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119547 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119551 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119554 "powerpc.tcc"
				)
				{
#line 201 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 119561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119569 "powerpc.tcc"
				>

				void
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119576 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119581 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119590 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119595 "powerpc.tcc"
				> *DecodeOpVavgsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 119601 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119611 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119615 "powerpc.tcc"
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119619 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119623 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119626 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119630 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119633 "powerpc.tcc"
				)
				{
#line 207 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119648 "powerpc.tcc"
				>

				void
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119655 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119660 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119669 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119674 "powerpc.tcc"
				> *DecodeOpVavgsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 119680 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119690 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119694 "powerpc.tcc"
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119698 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119702 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119705 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119709 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119712 "powerpc.tcc"
				)
				{
#line 213 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119727 "powerpc.tcc"
				>

				void
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119734 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119739 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119748 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119753 "powerpc.tcc"
				> *DecodeOpVavgsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 119759 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119769 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119773 "powerpc.tcc"
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119777 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119781 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119784 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119788 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119791 "powerpc.tcc"
				)
				{
#line 219 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgub v" << vd << ", v" << va << ", v" << vb;
					}
#line 119798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119806 "powerpc.tcc"
				>

				void
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119813 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119818 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119827 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119832 "powerpc.tcc"
				> *DecodeOpVavgub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 119838 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119848 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119852 "powerpc.tcc"
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119856 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119860 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119863 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119867 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119870 "powerpc.tcc"
				)
				{
#line 225 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119885 "powerpc.tcc"
				>

				void
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119892 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119897 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119906 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119911 "powerpc.tcc"
				> *DecodeOpVavguh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 119917 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119927 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119931 "powerpc.tcc"
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119935 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119939 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119942 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119946 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119949 "powerpc.tcc"
				)
				{
#line 231 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119964 "powerpc.tcc"
				>

				void
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119971 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119976 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119985 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119990 "powerpc.tcc"
				> *DecodeOpVavguw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 119996 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120006 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120010 "powerpc.tcc"
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120014 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120018 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120021 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120025 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120028 "powerpc.tcc"
				)
				{
#line 237 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfsx v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120043 "powerpc.tcc"
				>

				void
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120050 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120055 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120064 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120069 "powerpc.tcc"
				> *DecodeOpVcfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 120075 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120085 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120089 "powerpc.tcc"
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120093 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120097 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120100 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120104 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120107 "powerpc.tcc"
				)
				{
#line 243 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfux v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120122 "powerpc.tcc"
				>

				void
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120129 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120134 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120143 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120148 "powerpc.tcc"
				> *DecodeOpVcfux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 120154 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120164 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120168 "powerpc.tcc"
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120172 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120176 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120179 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120183 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120186 "powerpc.tcc"
				)
				{
#line 249 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpbfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120201 "powerpc.tcc"
				>

				void
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120208 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120213 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120222 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120227 "powerpc.tcc"
				> *DecodeOpVcmpbfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 120233 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120243 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120247 "powerpc.tcc"
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120251 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120255 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120258 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120262 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120265 "powerpc.tcc"
				)
				{
#line 255 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpeqfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120280 "powerpc.tcc"
				>

				void
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120287 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120306 "powerpc.tcc"
				> *DecodeOpVcmpeqfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 120312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120322 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120326 "powerpc.tcc"
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120330 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120334 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120337 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120341 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120344 "powerpc.tcc"
				)
				{
#line 261 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120359 "powerpc.tcc"
				>

				void
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120366 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120371 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120380 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120385 "powerpc.tcc"
				> *DecodeOpVcmpequb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 120391 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120401 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120405 "powerpc.tcc"
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120409 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120413 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120416 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120420 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120423 "powerpc.tcc"
				)
				{
#line 267 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120438 "powerpc.tcc"
				>

				void
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120445 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120450 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120459 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120464 "powerpc.tcc"
				> *DecodeOpVcmpequh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 120470 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120480 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120484 "powerpc.tcc"
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120488 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120492 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120495 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120499 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120502 "powerpc.tcc"
				)
				{
#line 273 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120509 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120517 "powerpc.tcc"
				>

				void
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120524 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120529 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120538 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120543 "powerpc.tcc"
				> *DecodeOpVcmpequw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 120549 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120559 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120563 "powerpc.tcc"
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120567 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120571 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120574 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120578 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120581 "powerpc.tcc"
				)
				{
#line 279 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgefp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120596 "powerpc.tcc"
				>

				void
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120603 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120608 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120617 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120622 "powerpc.tcc"
				> *DecodeOpVcmpgefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 120628 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120638 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120642 "powerpc.tcc"
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120646 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120650 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120653 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120657 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120660 "powerpc.tcc"
				)
				{
#line 285 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120675 "powerpc.tcc"
				>

				void
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120682 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120687 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120696 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120701 "powerpc.tcc"
				> *DecodeOpVcmpgtfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 120707 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120717 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120721 "powerpc.tcc"
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120725 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120729 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120732 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120736 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120739 "powerpc.tcc"
				)
				{
#line 291 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120746 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120754 "powerpc.tcc"
				>

				void
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120761 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120766 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120775 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120780 "powerpc.tcc"
				> *DecodeOpVcmpgtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 120786 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120796 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120800 "powerpc.tcc"
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120804 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120808 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120811 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120815 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120818 "powerpc.tcc"
				)
				{
#line 297 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120833 "powerpc.tcc"
				>

				void
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120840 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120845 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120854 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120859 "powerpc.tcc"
				> *DecodeOpVcmpgtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 120865 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120875 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120879 "powerpc.tcc"
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120883 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120887 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120890 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120894 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120897 "powerpc.tcc"
				)
				{
#line 303 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120912 "powerpc.tcc"
				>

				void
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120919 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120924 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120933 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120938 "powerpc.tcc"
				> *DecodeOpVcmpgtsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 120944 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120954 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120958 "powerpc.tcc"
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 120962 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120966 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120969 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120973 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120976 "powerpc.tcc"
				)
				{
#line 309 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtub" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120991 "powerpc.tcc"
				>

				void
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 120998 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121003 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121012 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121017 "powerpc.tcc"
				> *DecodeOpVcmpgtub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 121023 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121033 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121037 "powerpc.tcc"
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121041 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121045 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121048 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121052 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121055 "powerpc.tcc"
				)
				{
#line 315 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121070 "powerpc.tcc"
				>

				void
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121077 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121082 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121091 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121096 "powerpc.tcc"
				> *DecodeOpVcmpgtuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 121102 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121112 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121116 "powerpc.tcc"
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121120 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121124 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121127 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121131 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121134 "powerpc.tcc"
				)
				{
#line 321 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121149 "powerpc.tcc"
				>

				void
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121156 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121161 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121170 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121175 "powerpc.tcc"
				> *DecodeOpVcmpgtuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 121181 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121191 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121195 "powerpc.tcc"
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121199 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121203 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121206 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121210 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121213 "powerpc.tcc"
				)
				{
#line 327 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctsxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121228 "powerpc.tcc"
				>

				void
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121235 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121240 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121249 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121254 "powerpc.tcc"
				> *DecodeOpVctsxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 121260 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121270 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121274 "powerpc.tcc"
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121278 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121282 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121285 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121289 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121292 "powerpc.tcc"
				)
				{
#line 333 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctuxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121299 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121307 "powerpc.tcc"
				>

				void
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121314 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121319 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121328 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121333 "powerpc.tcc"
				> *DecodeOpVctuxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 121339 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121349 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121353 "powerpc.tcc"
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121357 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121361 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121364 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121368 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121371 "powerpc.tcc"
				)
				{
#line 339 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vexptefp v" << vd << ", v" << vb;
					}
#line 121378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121386 "powerpc.tcc"
				>

				void
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121393 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121398 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121407 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121412 "powerpc.tcc"
				> *DecodeOpVexptefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 121418 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121428 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121432 "powerpc.tcc"
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121436 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121440 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121443 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121447 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121450 "powerpc.tcc"
				)
				{
#line 345 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vlogefp v" << vd << ", v" << vb;
					}
#line 121457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121465 "powerpc.tcc"
				>

				void
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121472 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121477 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121486 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121491 "powerpc.tcc"
				> *DecodeOpVlogefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 121497 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121507 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121511 "powerpc.tcc"
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121515 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121519 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121522 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121526 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121529 "powerpc.tcc"
				)
				{
#line 351 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaddfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 121536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121544 "powerpc.tcc"
				>

				void
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121551 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121556 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121565 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121570 "powerpc.tcc"
				> *DecodeOpVmaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 121576 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121586 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121590 "powerpc.tcc"
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121594 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121598 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121601 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121605 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121608 "powerpc.tcc"
				)
				{
#line 357 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 121615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121623 "powerpc.tcc"
				>

				void
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121630 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121635 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121644 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121649 "powerpc.tcc"
				> *DecodeOpVmaxfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 121655 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121665 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121669 "powerpc.tcc"
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121673 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121677 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121680 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121684 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121687 "powerpc.tcc"
				)
				{
#line 363 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 121694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121702 "powerpc.tcc"
				>

				void
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121709 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121714 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121723 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121728 "powerpc.tcc"
				> *DecodeOpVmaxsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 121734 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121744 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121748 "powerpc.tcc"
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121752 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121756 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121759 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121763 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121766 "powerpc.tcc"
				)
				{
#line 369 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 121773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121781 "powerpc.tcc"
				>

				void
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121788 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121793 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121802 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121807 "powerpc.tcc"
				> *DecodeOpVmaxsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 121813 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121823 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121827 "powerpc.tcc"
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121831 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121835 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121838 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121842 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121845 "powerpc.tcc"
				)
				{
#line 375 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 121852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121860 "powerpc.tcc"
				>

				void
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121867 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121872 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121881 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121886 "powerpc.tcc"
				> *DecodeOpVmaxsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 121892 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121902 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121906 "powerpc.tcc"
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121910 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121914 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121917 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121921 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121924 "powerpc.tcc"
				)
				{
#line 381 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxub v" << vd << ", v" << va << ", v" << vb;
					}
#line 121931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121939 "powerpc.tcc"
				>

				void
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121946 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121951 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121960 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121965 "powerpc.tcc"
				> *DecodeOpVmaxub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 121971 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121981 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121985 "powerpc.tcc"
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 121989 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121993 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121996 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122000 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122003 "powerpc.tcc"
				)
				{
#line 387 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122018 "powerpc.tcc"
				>

				void
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 122025 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122030 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122039 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122044 "powerpc.tcc"
				> *DecodeOpVmaxuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 122050 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122060 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122064 "powerpc.tcc"
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122068 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122072 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122075 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122079 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122082 "powerpc.tcc"
				)
				{
#line 393 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122097 "powerpc.tcc"
				>

				void
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122104 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122109 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122118 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122123 "powerpc.tcc"
				> *DecodeOpVmaxuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 122129 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122139 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122143 "powerpc.tcc"
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122147 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122151 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122154 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122158 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122161 "powerpc.tcc"
				)
				{
#line 399 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhaddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122176 "powerpc.tcc"
				>

				void
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122183 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122188 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122197 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122202 "powerpc.tcc"
				> *DecodeOpVmhaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122208 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122218 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122222 "powerpc.tcc"
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122226 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122230 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122233 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122237 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122240 "powerpc.tcc"
				)
				{
#line 405 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhraddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122255 "powerpc.tcc"
				>

				void
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122262 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122267 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122276 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122281 "powerpc.tcc"
				> *DecodeOpVmhraddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122287 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122297 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122301 "powerpc.tcc"
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122305 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122309 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122312 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122316 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122319 "powerpc.tcc"
				)
				{
#line 411 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 122326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122334 "powerpc.tcc"
				>

				void
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122341 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 122346 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122355 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122360 "powerpc.tcc"
				> *DecodeOpVminfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 122366 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122376 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122380 "powerpc.tcc"
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122384 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122388 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122391 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122395 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122398 "powerpc.tcc"
				)
				{
#line 417 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122413 "powerpc.tcc"
				>

				void
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122420 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122425 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122434 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122439 "powerpc.tcc"
				> *DecodeOpVminsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 122445 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122455 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122459 "powerpc.tcc"
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122463 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122467 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122470 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122474 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122477 "powerpc.tcc"
				)
				{
#line 423 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122492 "powerpc.tcc"
				>

				void
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122499 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122504 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122513 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122518 "powerpc.tcc"
				> *DecodeOpVminsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 122524 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122534 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122538 "powerpc.tcc"
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122542 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122546 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122549 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122553 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122556 "powerpc.tcc"
				)
				{
#line 429 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122571 "powerpc.tcc"
				>

				void
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122578 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122583 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122592 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122597 "powerpc.tcc"
				> *DecodeOpVminsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 122603 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122613 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122617 "powerpc.tcc"
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122621 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122625 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122628 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122632 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122635 "powerpc.tcc"
				)
				{
#line 435 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminub v" << vd << ", v" << va << ", v" << vb;
					}
#line 122642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122650 "powerpc.tcc"
				>

				void
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122657 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122662 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122671 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122676 "powerpc.tcc"
				> *DecodeOpVminub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 122682 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122692 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122696 "powerpc.tcc"
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122700 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122704 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122707 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122711 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122714 "powerpc.tcc"
				)
				{
#line 441 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122729 "powerpc.tcc"
				>

				void
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122736 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122741 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122750 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122755 "powerpc.tcc"
				> *DecodeOpVminuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 122761 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122771 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122775 "powerpc.tcc"
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122779 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122783 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122786 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122790 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122793 "powerpc.tcc"
				)
				{
#line 447 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122808 "powerpc.tcc"
				>

				void
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122815 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122820 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122829 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122834 "powerpc.tcc"
				> *DecodeOpVminuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 122840 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122850 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122854 "powerpc.tcc"
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122858 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122862 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122865 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122869 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122872 "powerpc.tcc"
				)
				{
#line 453 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmladduhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122887 "powerpc.tcc"
				>

				void
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122894 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122899 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122908 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122913 "powerpc.tcc"
				> *DecodeOpVmladduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 122919 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122929 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122933 "powerpc.tcc"
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122937 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122941 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122944 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122948 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122951 "powerpc.tcc"
				)
				{
#line 459 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122966 "powerpc.tcc"
				>

				void
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122973 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 122978 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122987 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122992 "powerpc.tcc"
				> *DecodeOpVmrghb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 122998 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123008 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123012 "powerpc.tcc"
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123016 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123020 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123023 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123027 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123030 "powerpc.tcc"
				)
				{
#line 465 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123045 "powerpc.tcc"
				>

				void
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123052 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123057 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123066 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123071 "powerpc.tcc"
				> *DecodeOpVmrghh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 123077 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123087 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123091 "powerpc.tcc"
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123095 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123099 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123102 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123106 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123109 "powerpc.tcc"
				)
				{
#line 471 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123124 "powerpc.tcc"
				>

				void
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123131 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123136 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123145 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123150 "powerpc.tcc"
				> *DecodeOpVmrghw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 123156 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123166 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123170 "powerpc.tcc"
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123174 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123178 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123181 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123185 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123188 "powerpc.tcc"
				)
				{
#line 477 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123203 "powerpc.tcc"
				>

				void
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123210 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123215 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123224 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123229 "powerpc.tcc"
				> *DecodeOpVmrglb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 123235 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123245 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123249 "powerpc.tcc"
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123253 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123257 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123260 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123264 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123267 "powerpc.tcc"
				)
				{
#line 483 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123282 "powerpc.tcc"
				>

				void
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123289 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123308 "powerpc.tcc"
				> *DecodeOpVmrglh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 123314 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123324 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123328 "powerpc.tcc"
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123332 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123336 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123339 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123343 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123346 "powerpc.tcc"
				)
				{
#line 489 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123361 "powerpc.tcc"
				>

				void
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123368 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123373 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123382 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123387 "powerpc.tcc"
				> *DecodeOpVmrglw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 123393 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123403 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123407 "powerpc.tcc"
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123411 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123415 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123418 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123422 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123425 "powerpc.tcc"
				)
				{
#line 495 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsummbm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123440 "powerpc.tcc"
				>

				void
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123447 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123452 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123461 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123466 "powerpc.tcc"
				> *DecodeOpVmsummbm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 123472 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123482 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123486 "powerpc.tcc"
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123490 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123494 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123497 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123501 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123504 "powerpc.tcc"
				)
				{
#line 501 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123519 "powerpc.tcc"
				>

				void
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123526 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123531 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123540 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123545 "powerpc.tcc"
				> *DecodeOpVmsumshm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 123551 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123561 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123565 "powerpc.tcc"
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123569 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123573 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123576 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123580 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123583 "powerpc.tcc"
				)
				{
#line 507 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123598 "powerpc.tcc"
				>

				void
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123605 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123610 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123619 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123624 "powerpc.tcc"
				> *DecodeOpVmsumshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 123630 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123640 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123644 "powerpc.tcc"
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123648 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123652 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123655 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123659 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123662 "powerpc.tcc"
				)
				{
#line 513 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumubm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123677 "powerpc.tcc"
				>

				void
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123684 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123689 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123698 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123703 "powerpc.tcc"
				> *DecodeOpVmsumubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 123709 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123719 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123723 "powerpc.tcc"
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123727 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123731 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123734 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123738 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123741 "powerpc.tcc"
				)
				{
#line 519 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123756 "powerpc.tcc"
				>

				void
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123763 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123768 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123777 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123782 "powerpc.tcc"
				> *DecodeOpVmsumuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 123788 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123798 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123802 "powerpc.tcc"
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123806 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123810 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123813 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123817 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123820 "powerpc.tcc"
				)
				{
#line 525 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123835 "powerpc.tcc"
				>

				void
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123842 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123847 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123856 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123861 "powerpc.tcc"
				> *DecodeOpVmsumuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 123867 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123877 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123881 "powerpc.tcc"
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123885 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123889 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123892 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123896 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123899 "powerpc.tcc"
				)
				{
#line 531 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123914 "powerpc.tcc"
				>

				void
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123921 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123926 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123935 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123940 "powerpc.tcc"
				> *DecodeOpVmulesb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 123946 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123956 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123960 "powerpc.tcc"
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 123964 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123968 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123971 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123975 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123978 "powerpc.tcc"
				)
				{
#line 537 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123993 "powerpc.tcc"
				>

				void
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 124000 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124005 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124014 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124019 "powerpc.tcc"
				> *DecodeOpVmulesh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 124025 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124035 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124039 "powerpc.tcc"
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124043 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124047 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124050 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124054 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124057 "powerpc.tcc"
				)
				{
#line 543 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124072 "powerpc.tcc"
				>

				void
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124079 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124084 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124093 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124098 "powerpc.tcc"
				> *DecodeOpVmuleub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 124104 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124114 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124118 "powerpc.tcc"
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124122 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124126 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124129 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124133 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124136 "powerpc.tcc"
				)
				{
#line 549 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124151 "powerpc.tcc"
				>

				void
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124158 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124163 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124172 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124177 "powerpc.tcc"
				> *DecodeOpVmuleuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 124183 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124193 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124197 "powerpc.tcc"
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124201 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124205 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124208 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124212 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124215 "powerpc.tcc"
				)
				{
#line 555 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosb v" << vd << ", v" << va << ", v" << vb;
					}
#line 124222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124230 "powerpc.tcc"
				>

				void
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124237 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124242 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124251 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124256 "powerpc.tcc"
				> *DecodeOpVmulosb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 124262 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124272 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124276 "powerpc.tcc"
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124280 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124284 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124287 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124291 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124294 "powerpc.tcc"
				)
				{
#line 561 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124309 "powerpc.tcc"
				>

				void
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124316 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124321 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124330 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124335 "powerpc.tcc"
				> *DecodeOpVmulosh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 124341 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124351 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124355 "powerpc.tcc"
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124359 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124363 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124366 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124370 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124373 "powerpc.tcc"
				)
				{
#line 567 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuloub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124388 "powerpc.tcc"
				>

				void
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124395 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124400 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124409 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124414 "powerpc.tcc"
				> *DecodeOpVmuloub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 124420 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124430 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124434 "powerpc.tcc"
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124438 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124442 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124445 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124449 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124452 "powerpc.tcc"
				)
				{
#line 573 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulouh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124467 "powerpc.tcc"
				>

				void
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124474 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124479 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124488 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124493 "powerpc.tcc"
				> *DecodeOpVmulouh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 124499 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124509 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124513 "powerpc.tcc"
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124517 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124521 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124524 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124528 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124531 "powerpc.tcc"
				)
				{
#line 579 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnmsubfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 124538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124546 "powerpc.tcc"
				>

				void
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124553 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 124558 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124567 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124572 "powerpc.tcc"
				> *DecodeOpVnmsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 124578 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124588 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124592 "powerpc.tcc"
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124596 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124600 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124603 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124607 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124610 "powerpc.tcc"
				)
				{
#line 585 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124625 "powerpc.tcc"
				>

				void
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124632 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124637 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124646 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124651 "powerpc.tcc"
				> *DecodeOpVnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 124657 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124667 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124671 "powerpc.tcc"
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124675 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124679 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124682 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124686 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124689 "powerpc.tcc"
				)
				{
#line 591 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124704 "powerpc.tcc"
				>

				void
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124711 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124716 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124725 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124730 "powerpc.tcc"
				> *DecodeOpVor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVor<
#line 38 "ppc.isa"
					CONFIG
#line 124736 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124746 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124750 "powerpc.tcc"
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124754 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124758 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124761 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124765 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124768 "powerpc.tcc"
				)
				{
#line 597 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vperm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 124775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124783 "powerpc.tcc"
				>

				void
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124790 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124795 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124804 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124809 "powerpc.tcc"
				> *DecodeOpVperm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 124815 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124825 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124829 "powerpc.tcc"
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124833 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124837 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124840 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124844 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124847 "powerpc.tcc"
				)
				{
#line 603 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkpx v" << vd << ", v" << va << ", v" << vb;
					}
#line 124854 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124862 "powerpc.tcc"
				>

				void
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124869 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124874 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124883 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124888 "powerpc.tcc"
				> *DecodeOpVpkpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 124894 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124904 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124908 "powerpc.tcc"
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124912 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124916 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124919 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124923 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124926 "powerpc.tcc"
				)
				{
#line 609 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshss v" << vd << ", v" << va << ", v" << vb;
					}
#line 124933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124941 "powerpc.tcc"
				>

				void
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124948 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124953 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124962 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124967 "powerpc.tcc"
				> *DecodeOpVpkshss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 124973 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124983 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124987 "powerpc.tcc"
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 124991 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124995 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124998 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125002 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125005 "powerpc.tcc"
				)
				{
#line 615 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125020 "powerpc.tcc"
				>

				void
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 125027 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125032 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125041 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125046 "powerpc.tcc"
				> *DecodeOpVpkshus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 125052 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125062 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125066 "powerpc.tcc"
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125070 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125074 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125077 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125081 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125084 "powerpc.tcc"
				)
				{
#line 621 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswss v" << vd << ", v" << va << ", v" << vb;
					}
#line 125091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125099 "powerpc.tcc"
				>

				void
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125106 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125111 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125120 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125125 "powerpc.tcc"
				> *DecodeOpVpkswss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 125131 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125141 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125145 "powerpc.tcc"
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125149 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125153 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125156 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125160 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125163 "powerpc.tcc"
				)
				{
#line 627 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125178 "powerpc.tcc"
				>

				void
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125185 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125190 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125199 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125204 "powerpc.tcc"
				> *DecodeOpVpkswus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 125210 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125220 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125224 "powerpc.tcc"
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125228 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125232 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125235 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125239 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125242 "powerpc.tcc"
				)
				{
#line 633 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125257 "powerpc.tcc"
				>

				void
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125264 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125269 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125278 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125283 "powerpc.tcc"
				> *DecodeOpVpkuhum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 125289 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125299 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125303 "powerpc.tcc"
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125307 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125311 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125314 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125318 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125321 "powerpc.tcc"
				)
				{
#line 639 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125336 "powerpc.tcc"
				>

				void
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125343 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125348 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125357 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125362 "powerpc.tcc"
				> *DecodeOpVpkuhus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 125368 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125378 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125382 "powerpc.tcc"
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125386 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125390 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125393 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125397 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125400 "powerpc.tcc"
				)
				{
#line 645 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125415 "powerpc.tcc"
				>

				void
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125422 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125427 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125436 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125441 "powerpc.tcc"
				> *DecodeOpVpkuwum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 125447 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125457 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125461 "powerpc.tcc"
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125465 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125469 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125472 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125476 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125479 "powerpc.tcc"
				)
				{
#line 651 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125494 "powerpc.tcc"
				>

				void
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125501 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125506 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125515 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125520 "powerpc.tcc"
				> *DecodeOpVpkuwus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 125526 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125536 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125540 "powerpc.tcc"
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125544 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125548 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125551 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125555 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125558 "powerpc.tcc"
				)
				{
#line 657 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrefp v" << vd << ", v" << vb;
					}
#line 125565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125573 "powerpc.tcc"
				>

				void
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125580 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125585 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125594 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125599 "powerpc.tcc"
				> *DecodeOpVrefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 125605 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125615 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125619 "powerpc.tcc"
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125623 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125627 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125630 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125634 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125637 "powerpc.tcc"
				)
				{
#line 663 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfim v" << vd << ", v" << vb;
					}
#line 125644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125652 "powerpc.tcc"
				>

				void
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125659 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125664 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125673 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125678 "powerpc.tcc"
				> *DecodeOpVrfim(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 125684 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125694 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125698 "powerpc.tcc"
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125702 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125706 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125709 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125713 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125716 "powerpc.tcc"
				)
				{
#line 669 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfin v" << vd << ", v" << vb;
					}
#line 125723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125731 "powerpc.tcc"
				>

				void
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125738 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125743 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125752 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125757 "powerpc.tcc"
				> *DecodeOpVrfin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 125763 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125773 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125777 "powerpc.tcc"
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125781 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125785 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125788 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125792 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125795 "powerpc.tcc"
				)
				{
#line 675 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfip v" << vd << ", v" << vb;
					}
#line 125802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125810 "powerpc.tcc"
				>

				void
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125817 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125822 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125831 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125836 "powerpc.tcc"
				> *DecodeOpVrfip(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 125842 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125852 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125856 "powerpc.tcc"
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125860 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125864 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125867 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125871 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125874 "powerpc.tcc"
				)
				{
#line 681 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfiz v" << vd << ", v" << vb;
					}
#line 125881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125889 "powerpc.tcc"
				>

				void
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125896 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125901 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125910 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125915 "powerpc.tcc"
				> *DecodeOpVrfiz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 125921 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125931 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125935 "powerpc.tcc"
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125939 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125943 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125946 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125950 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125953 "powerpc.tcc"
				)
				{
#line 687 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlb v" << vd << ", v" << va << ", v" << vb;
					}
#line 125960 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125968 "powerpc.tcc"
				>

				void
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125975 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 125980 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125989 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125994 "powerpc.tcc"
				> *DecodeOpVrlb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 126000 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126010 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126014 "powerpc.tcc"
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126018 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126022 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126025 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126029 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126032 "powerpc.tcc"
				)
				{
#line 693 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126047 "powerpc.tcc"
				>

				void
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126054 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126059 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126068 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126073 "powerpc.tcc"
				> *DecodeOpVrlh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 126079 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126089 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126093 "powerpc.tcc"
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126097 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126101 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126104 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126108 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126111 "powerpc.tcc"
				)
				{
#line 699 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126126 "powerpc.tcc"
				>

				void
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126133 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126138 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126147 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126152 "powerpc.tcc"
				> *DecodeOpVrlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 126158 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126168 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126172 "powerpc.tcc"
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126176 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126180 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126183 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126187 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126190 "powerpc.tcc"
				)
				{
#line 705 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrsqrtefp v" << vd << ", v" << vb;
					}
#line 126197 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126205 "powerpc.tcc"
				>

				void
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126212 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 126217 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126226 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126231 "powerpc.tcc"
				> *DecodeOpVrsqrtefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 126237 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126247 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126251 "powerpc.tcc"
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126255 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126259 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126262 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126266 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126269 "powerpc.tcc"
				)
				{
#line 711 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsel v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 126276 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126284 "powerpc.tcc"
				>

				void
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126291 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126296 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126305 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126310 "powerpc.tcc"
				> *DecodeOpVsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 126316 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126326 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126330 "powerpc.tcc"
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126334 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126338 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126341 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126345 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126348 "powerpc.tcc"
				)
				{
#line 717 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsl v" << vd << ", v" << va << ", v" << vb;
					}
#line 126355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126363 "powerpc.tcc"
				>

				void
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126370 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126375 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126384 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126389 "powerpc.tcc"
				> *DecodeOpVsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 126395 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126405 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126409 "powerpc.tcc"
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126413 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126417 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126420 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126424 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126427 "powerpc.tcc"
				)
				{
#line 723 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslb v" << vd << ", v" << va << ", v" << vb;
					}
#line 126434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126442 "powerpc.tcc"
				>

				void
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126449 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126454 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126463 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126468 "powerpc.tcc"
				> *DecodeOpVslb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 126474 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126484 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126488 "powerpc.tcc"
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126492 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126496 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126499 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126503 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126506 "powerpc.tcc"
				)
				{
#line 729 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsldoi v" << vd << ", v" << va << ", v" << vb;
					}
#line 126513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126521 "powerpc.tcc"
				>

				void
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126528 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126533 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126542 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126547 "powerpc.tcc"
				> *DecodeOpVsldoi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 126553 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126563 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126567 "powerpc.tcc"
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126571 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126575 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126578 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126582 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126585 "powerpc.tcc"
				)
				{
#line 735 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126600 "powerpc.tcc"
				>

				void
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126607 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126612 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126621 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126626 "powerpc.tcc"
				> *DecodeOpVslh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 126632 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126642 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126646 "powerpc.tcc"
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126650 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126654 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126657 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126661 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126664 "powerpc.tcc"
				)
				{
#line 741 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslo v" << vd << ", v" << va << ", v" << vb;
					}
#line 126671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126679 "powerpc.tcc"
				>

				void
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126686 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126691 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126700 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126705 "powerpc.tcc"
				> *DecodeOpVslo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 126711 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126721 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126725 "powerpc.tcc"
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126729 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126733 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126736 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126740 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126743 "powerpc.tcc"
				)
				{
#line 747 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126758 "powerpc.tcc"
				>

				void
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126765 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126770 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126779 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126784 "powerpc.tcc"
				> *DecodeOpVslw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 126790 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126800 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126804 "powerpc.tcc"
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126808 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126812 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126815 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126819 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126822 "powerpc.tcc"
				)
				{
#line 753 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltb v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126837 "powerpc.tcc"
				>

				void
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126844 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126849 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126858 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126863 "powerpc.tcc"
				> *DecodeOpVspltb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 126869 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126879 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126883 "powerpc.tcc"
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126887 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126891 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126894 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126898 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126901 "powerpc.tcc"
				)
				{
#line 759 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsplth v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126916 "powerpc.tcc"
				>

				void
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126923 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126928 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126937 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126942 "powerpc.tcc"
				> *DecodeOpVsplth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 126948 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126958 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126962 "powerpc.tcc"
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 126966 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126970 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126973 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126977 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126980 "powerpc.tcc"
				)
				{
#line 765 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisb v" << vd << ", v" << vb << ", " << (int) simm;
					}
#line 126987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126995 "powerpc.tcc"
				>

				void
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 127002 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127007 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127016 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127021 "powerpc.tcc"
				> *DecodeOpVspltisb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 127027 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127037 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127041 "powerpc.tcc"
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127045 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127049 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127052 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127056 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127059 "powerpc.tcc"
				)
				{
#line 771 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltish v" << vd << ", v" << vb << ", " << simm;
					}
#line 127066 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127074 "powerpc.tcc"
				>

				void
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127081 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127086 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127095 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127100 "powerpc.tcc"
				> *DecodeOpVspltish(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 127106 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127116 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127120 "powerpc.tcc"
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127124 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127128 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127131 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127135 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127138 "powerpc.tcc"
				)
				{
#line 777 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisw v" << vd << ", v" << vb << ", " << simm;
					}
#line 127145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127153 "powerpc.tcc"
				>

				void
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127160 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127165 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127174 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127179 "powerpc.tcc"
				> *DecodeOpVspltisw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 127185 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127195 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127199 "powerpc.tcc"
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127203 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127207 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127210 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127214 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127217 "powerpc.tcc"
				)
				{
#line 783 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltiw v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 127224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127232 "powerpc.tcc"
				>

				void
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127239 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127244 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127253 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127258 "powerpc.tcc"
				> *DecodeOpVspltw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 127264 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127274 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127278 "powerpc.tcc"
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127282 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127286 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127289 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127293 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127296 "powerpc.tcc"
				)
				{
#line 789 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsr v" << vd << ", v" << va << ", v" << vb;
					}
#line 127303 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127311 "powerpc.tcc"
				>

				void
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127318 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127323 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127332 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127337 "powerpc.tcc"
				> *DecodeOpVsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 127343 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127353 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127357 "powerpc.tcc"
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127361 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127365 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127368 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127372 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127375 "powerpc.tcc"
				)
				{
#line 795 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrab v" << vd << ", v" << va << ", v" << vb;
					}
#line 127382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127390 "powerpc.tcc"
				>

				void
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127397 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127402 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127411 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127416 "powerpc.tcc"
				> *DecodeOpVsrab(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 127422 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127432 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127436 "powerpc.tcc"
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127440 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127444 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127447 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127451 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127454 "powerpc.tcc"
				)
				{
#line 801 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrah v" << vd << ", v" << va << ", v" << vb;
					}
#line 127461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127469 "powerpc.tcc"
				>

				void
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127476 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127481 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127490 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127495 "powerpc.tcc"
				> *DecodeOpVsrah(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 127501 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127511 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127515 "powerpc.tcc"
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127519 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127523 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127526 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127530 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127533 "powerpc.tcc"
				)
				{
#line 807 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsraw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127540 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127548 "powerpc.tcc"
				>

				void
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127555 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127560 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127569 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127574 "powerpc.tcc"
				> *DecodeOpVsraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 127580 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127590 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127594 "powerpc.tcc"
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127598 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127602 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127605 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127609 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127612 "powerpc.tcc"
				)
				{
#line 813 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrb v" << vd << ", v" << va << ", v" << vb;
					}
#line 127619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127627 "powerpc.tcc"
				>

				void
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127634 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127639 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127648 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127653 "powerpc.tcc"
				> *DecodeOpVsrb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 127659 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127669 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127673 "powerpc.tcc"
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127677 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127681 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127684 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127688 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127691 "powerpc.tcc"
				)
				{
#line 819 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrh v" << vd << ", v" << va << ", v" << vb;
					}
#line 127698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127706 "powerpc.tcc"
				>

				void
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127713 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127718 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127727 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127732 "powerpc.tcc"
				> *DecodeOpVsrh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 127738 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127748 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127752 "powerpc.tcc"
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127756 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127760 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127763 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127767 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127770 "powerpc.tcc"
				)
				{
#line 825 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsro v" << vd << ", v" << va << ", v" << vb;
					}
#line 127777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127785 "powerpc.tcc"
				>

				void
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127792 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127797 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127806 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127811 "powerpc.tcc"
				> *DecodeOpVsro(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 127817 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127827 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127831 "powerpc.tcc"
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127835 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127839 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127842 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127846 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127849 "powerpc.tcc"
				)
				{
#line 831 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127864 "powerpc.tcc"
				>

				void
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127871 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127876 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127885 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127890 "powerpc.tcc"
				> *DecodeOpVsrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 127896 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127906 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127910 "powerpc.tcc"
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127914 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127918 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127921 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127925 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127928 "powerpc.tcc"
				)
				{
#line 837 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127943 "powerpc.tcc"
				>

				void
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127950 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127955 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127964 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127969 "powerpc.tcc"
				> *DecodeOpVsubcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 127975 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127985 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127989 "powerpc.tcc"
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 127993 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127997 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128000 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128004 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128007 "powerpc.tcc"
				)
				{
#line 843 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 128014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128022 "powerpc.tcc"
				>

				void
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 128029 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 128034 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128043 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128048 "powerpc.tcc"
				> *DecodeOpVsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 128054 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128064 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128068 "powerpc.tcc"
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128072 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128076 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128079 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128083 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128086 "powerpc.tcc"
				)
				{
#line 849 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128101 "powerpc.tcc"
				>

				void
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128108 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128113 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128122 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128127 "powerpc.tcc"
				> *DecodeOpVsubsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 128133 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128143 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128147 "powerpc.tcc"
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128151 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128155 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128158 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128162 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128165 "powerpc.tcc"
				)
				{
#line 855 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128180 "powerpc.tcc"
				>

				void
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128187 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128192 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128201 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128206 "powerpc.tcc"
				> *DecodeOpVsubshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 128212 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128222 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128226 "powerpc.tcc"
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128230 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128234 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128237 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128241 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128244 "powerpc.tcc"
				)
				{
#line 861 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128259 "powerpc.tcc"
				>

				void
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128266 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128271 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128280 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128285 "powerpc.tcc"
				> *DecodeOpVsubsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 128291 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128301 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128305 "powerpc.tcc"
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128309 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128313 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128316 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128320 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128323 "powerpc.tcc"
				)
				{
#line 867 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128338 "powerpc.tcc"
				>

				void
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128345 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128350 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128359 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128364 "powerpc.tcc"
				> *DecodeOpVsububm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 128370 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128380 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128384 "powerpc.tcc"
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128388 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128392 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128395 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128399 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128402 "powerpc.tcc"
				)
				{
#line 873 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128417 "powerpc.tcc"
				>

				void
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128424 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128429 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128438 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128443 "powerpc.tcc"
				> *DecodeOpVsububs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 128449 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128459 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128463 "powerpc.tcc"
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128467 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128471 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128474 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128478 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128481 "powerpc.tcc"
				)
				{
#line 879 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128496 "powerpc.tcc"
				>

				void
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128503 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128508 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128517 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128522 "powerpc.tcc"
				> *DecodeOpVsubuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 128528 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128538 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128542 "powerpc.tcc"
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128546 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128550 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128553 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128557 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128560 "powerpc.tcc"
				)
				{
#line 885 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128575 "powerpc.tcc"
				>

				void
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128582 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128587 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128596 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128601 "powerpc.tcc"
				> *DecodeOpVsubuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 128607 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128617 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128621 "powerpc.tcc"
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128625 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128629 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128632 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128636 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128639 "powerpc.tcc"
				)
				{
#line 891 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128654 "powerpc.tcc"
				>

				void
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128661 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128666 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128675 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128680 "powerpc.tcc"
				> *DecodeOpVsubuwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 128686 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128696 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128700 "powerpc.tcc"
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128704 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128708 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128711 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128715 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128718 "powerpc.tcc"
				)
				{
#line 897 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128733 "powerpc.tcc"
				>

				void
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128740 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128745 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128754 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128759 "powerpc.tcc"
				> *DecodeOpVsubuws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 128765 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128775 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128779 "powerpc.tcc"
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128783 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128787 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128790 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128794 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128797 "powerpc.tcc"
				)
				{
#line 903 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsumsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128812 "powerpc.tcc"
				>

				void
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128819 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128824 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128833 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128838 "powerpc.tcc"
				> *DecodeOpVsumsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 128844 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128854 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128858 "powerpc.tcc"
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128862 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128866 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128869 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128873 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128876 "powerpc.tcc"
				)
				{
#line 909 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum2sws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128883 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128891 "powerpc.tcc"
				>

				void
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128898 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128903 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128912 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128917 "powerpc.tcc"
				> *DecodeOpVsum2sws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 128923 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128933 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128937 "powerpc.tcc"
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128941 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128945 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128948 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128952 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128955 "powerpc.tcc"
				)
				{
#line 915 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4sbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128970 "powerpc.tcc"
				>

				void
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128977 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128982 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128991 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128996 "powerpc.tcc"
				> *DecodeOpVsum4sbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 129002 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129012 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129016 "powerpc.tcc"
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129020 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129024 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129027 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129031 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129034 "powerpc.tcc"
				)
				{
#line 921 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4shs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129049 "powerpc.tcc"
				>

				void
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129056 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129061 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129070 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129075 "powerpc.tcc"
				> *DecodeOpVsum4shs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 129081 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129091 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129095 "powerpc.tcc"
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129099 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129103 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129106 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129110 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129113 "powerpc.tcc"
				)
				{
#line 927 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4ubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129128 "powerpc.tcc"
				>

				void
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129135 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129140 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129149 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129154 "powerpc.tcc"
				> *DecodeOpVsum4ubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 129160 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129170 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129174 "powerpc.tcc"
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129178 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129182 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129185 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129189 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129192 "powerpc.tcc"
				)
				{
#line 933 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhpx v" << vd << ", v" << vb;
					}
#line 129199 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129207 "powerpc.tcc"
				>

				void
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129214 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129219 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129228 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129233 "powerpc.tcc"
				> *DecodeOpVupkhpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 129239 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129249 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129253 "powerpc.tcc"
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129257 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129261 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129264 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129268 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129271 "powerpc.tcc"
				)
				{
#line 939 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsb v" << vd << ", v" << vb;
					}
#line 129278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129286 "powerpc.tcc"
				>

				void
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129293 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129298 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129307 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129312 "powerpc.tcc"
				> *DecodeOpVupkhsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 129318 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129328 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129332 "powerpc.tcc"
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129336 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129340 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129343 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129347 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129350 "powerpc.tcc"
				)
				{
#line 945 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsh v" << vd << ", v" << vb;
					}
#line 129357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129365 "powerpc.tcc"
				>

				void
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129372 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129377 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129386 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129391 "powerpc.tcc"
				> *DecodeOpVupkhsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 129397 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129407 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129411 "powerpc.tcc"
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129415 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129419 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129422 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129426 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129429 "powerpc.tcc"
				)
				{
#line 951 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklpx v" << vd << ", v" << vb;
					}
#line 129436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129444 "powerpc.tcc"
				>

				void
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129451 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129456 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129465 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129470 "powerpc.tcc"
				> *DecodeOpVupklpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 129476 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129486 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129490 "powerpc.tcc"
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129494 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129498 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129501 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129505 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129508 "powerpc.tcc"
				)
				{
#line 957 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsb v" << vd << ", v" << vb;
					}
#line 129515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129523 "powerpc.tcc"
				>

				void
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129530 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129535 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129544 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129549 "powerpc.tcc"
				> *DecodeOpVupklsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 129555 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129565 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129569 "powerpc.tcc"
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129573 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129577 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129580 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129584 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129587 "powerpc.tcc"
				)
				{
#line 963 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsh v" << vd << ", v" << vb;
					}
#line 129594 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129602 "powerpc.tcc"
				>

				void
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129609 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129614 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129623 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129628 "powerpc.tcc"
				> *DecodeOpVupklsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 129634 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129644 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129648 "powerpc.tcc"
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129652 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129656 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129659 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129663 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129666 "powerpc.tcc"
				)
				{
#line 969 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vxor v" << vd << ", v" << va << ", v" << vb;
					}
#line 129673 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129681 "powerpc.tcc"
				>

				void
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129688 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 129693 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129702 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129707 "powerpc.tcc"
				> *DecodeOpVxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 129713 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129723 "powerpc.tcc"
				>
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 129728 "powerpc.tcc"
				>::OpAdd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129732 "powerpc.tcc"
				>(code, addr, "add")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129748 "powerpc.tcc"
				>
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 129753 "powerpc.tcc"
				>::OpAddc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129757 "powerpc.tcc"
				>(code, addr, "addc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129773 "powerpc.tcc"
				>
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 129778 "powerpc.tcc"
				>::OpAdde(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129782 "powerpc.tcc"
				>(code, addr, "adde")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129798 "powerpc.tcc"
				>
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 129803 "powerpc.tcc"
				>::OpAddi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129807 "powerpc.tcc"
				>(code, addr, "addi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129821 "powerpc.tcc"
				>
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 129826 "powerpc.tcc"
				>::OpAddic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129830 "powerpc.tcc"
				>(code, addr, "addic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129844 "powerpc.tcc"
				>
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 129849 "powerpc.tcc"
				>::OpAddic_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129853 "powerpc.tcc"
				>(code, addr, "addic_")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129867 "powerpc.tcc"
				>
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 129872 "powerpc.tcc"
				>::OpAddis(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129876 "powerpc.tcc"
				>(code, addr, "addis")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 129887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129890 "powerpc.tcc"
				>
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 129895 "powerpc.tcc"
				>::OpAddme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129899 "powerpc.tcc"
				>(code, addr, "addme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129914 "powerpc.tcc"
				>
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 129919 "powerpc.tcc"
				>::OpAddze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129923 "powerpc.tcc"
				>(code, addr, "addze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129938 "powerpc.tcc"
				>
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 129943 "powerpc.tcc"
				>::OpDivw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129947 "powerpc.tcc"
				>(code, addr, "divw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129963 "powerpc.tcc"
				>
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 129968 "powerpc.tcc"
				>::OpDivwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129972 "powerpc.tcc"
				>(code, addr, "divwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129988 "powerpc.tcc"
				>
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 129993 "powerpc.tcc"
				>::OpMulhw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129997 "powerpc.tcc"
				>(code, addr, "mulhw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130012 "powerpc.tcc"
				>
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 130017 "powerpc.tcc"
				>::OpMulhwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130021 "powerpc.tcc"
				>(code, addr, "mulhwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130036 "powerpc.tcc"
				>
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 130041 "powerpc.tcc"
				>::OpMulli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130045 "powerpc.tcc"
				>(code, addr, "mulli")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130059 "powerpc.tcc"
				>
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 130064 "powerpc.tcc"
				>::OpMullw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130068 "powerpc.tcc"
				>(code, addr, "mullw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130084 "powerpc.tcc"
				>
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 130089 "powerpc.tcc"
				>::OpNeg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130093 "powerpc.tcc"
				>(code, addr, "neg")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130108 "powerpc.tcc"
				>
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 130113 "powerpc.tcc"
				>::OpSubf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130117 "powerpc.tcc"
				>(code, addr, "subf")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130133 "powerpc.tcc"
				>
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 130138 "powerpc.tcc"
				>::OpSubfc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130142 "powerpc.tcc"
				>(code, addr, "subfc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130158 "powerpc.tcc"
				>
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 130163 "powerpc.tcc"
				>::OpSubfe(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130167 "powerpc.tcc"
				>(code, addr, "subfe")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130183 "powerpc.tcc"
				>
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 130188 "powerpc.tcc"
				>::OpSubfic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130192 "powerpc.tcc"
				>(code, addr, "subfic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130206 "powerpc.tcc"
				>
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 130211 "powerpc.tcc"
				>::OpSubfme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130215 "powerpc.tcc"
				>(code, addr, "subfme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130230 "powerpc.tcc"
				>
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 130235 "powerpc.tcc"
				>::OpSubfze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130239 "powerpc.tcc"
				>(code, addr, "subfze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130254 "powerpc.tcc"
				>
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 130259 "powerpc.tcc"
				>::OpCmp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130263 "powerpc.tcc"
				>(code, addr, "cmp")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130278 "powerpc.tcc"
				>
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 130283 "powerpc.tcc"
				>::OpCmpi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130287 "powerpc.tcc"
				>(code, addr, "cmpi")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130302 "powerpc.tcc"
				>
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 130307 "powerpc.tcc"
				>::OpCmpl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130311 "powerpc.tcc"
				>(code, addr, "cmpl")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130326 "powerpc.tcc"
				>
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 130331 "powerpc.tcc"
				>::OpCmpli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130335 "powerpc.tcc"
				>(code, addr, "cmpli")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130350 "powerpc.tcc"
				>
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 130355 "powerpc.tcc"
				>::OpAnd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130359 "powerpc.tcc"
				>(code, addr, "and")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130374 "powerpc.tcc"
				>
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 130379 "powerpc.tcc"
				>::OpAndc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130383 "powerpc.tcc"
				>(code, addr, "andc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130398 "powerpc.tcc"
				>
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 130403 "powerpc.tcc"
				>::OpAndi_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130407 "powerpc.tcc"
				>(code, addr, "andi_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130421 "powerpc.tcc"
				>
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 130426 "powerpc.tcc"
				>::OpAndis_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130430 "powerpc.tcc"
				>(code, addr, "andis_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130444 "powerpc.tcc"
				>
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 130449 "powerpc.tcc"
				>::OpCntlzw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130453 "powerpc.tcc"
				>(code, addr, "cntlzw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130467 "powerpc.tcc"
				>
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 130472 "powerpc.tcc"
				>::OpEqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130476 "powerpc.tcc"
				>(code, addr, "eqv")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130491 "powerpc.tcc"
				>
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 130496 "powerpc.tcc"
				>::OpExtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130500 "powerpc.tcc"
				>(code, addr, "extsb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130514 "powerpc.tcc"
				>
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 130519 "powerpc.tcc"
				>::OpExtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130523 "powerpc.tcc"
				>(code, addr, "extsh")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130537 "powerpc.tcc"
				>
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 130542 "powerpc.tcc"
				>::OpNand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130546 "powerpc.tcc"
				>(code, addr, "nand")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130561 "powerpc.tcc"
				>
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 130566 "powerpc.tcc"
				>::OpNor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130570 "powerpc.tcc"
				>(code, addr, "nor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130585 "powerpc.tcc"
				>
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 130590 "powerpc.tcc"
				>::OpOr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130594 "powerpc.tcc"
				>(code, addr, "or")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130609 "powerpc.tcc"
				>
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 130614 "powerpc.tcc"
				>::OpOrc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130618 "powerpc.tcc"
				>(code, addr, "orc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130633 "powerpc.tcc"
				>
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 130638 "powerpc.tcc"
				>::OpOri(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130642 "powerpc.tcc"
				>(code, addr, "ori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130656 "powerpc.tcc"
				>
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 130661 "powerpc.tcc"
				>::OpOris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130665 "powerpc.tcc"
				>(code, addr, "oris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130679 "powerpc.tcc"
				>
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 130684 "powerpc.tcc"
				>::OpXor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130688 "powerpc.tcc"
				>(code, addr, "xor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130703 "powerpc.tcc"
				>
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 130708 "powerpc.tcc"
				>::OpXori(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130712 "powerpc.tcc"
				>(code, addr, "xori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130726 "powerpc.tcc"
				>
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 130731 "powerpc.tcc"
				>::OpXoris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130735 "powerpc.tcc"
				>(code, addr, "xoris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130749 "powerpc.tcc"
				>
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 130754 "powerpc.tcc"
				>::OpRlwimi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130758 "powerpc.tcc"
				>(code, addr, "rlwimi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130775 "powerpc.tcc"
				>
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 130780 "powerpc.tcc"
				>::OpRlwinm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130784 "powerpc.tcc"
				>(code, addr, "rlwinm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130801 "powerpc.tcc"
				>
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 130806 "powerpc.tcc"
				>::OpRlwnm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130810 "powerpc.tcc"
				>(code, addr, "rlwnm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130827 "powerpc.tcc"
				>
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 130832 "powerpc.tcc"
				>::OpSlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130836 "powerpc.tcc"
				>(code, addr, "slw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130851 "powerpc.tcc"
				>
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 130856 "powerpc.tcc"
				>::OpSraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130860 "powerpc.tcc"
				>(code, addr, "sraw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130875 "powerpc.tcc"
				>
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 130880 "powerpc.tcc"
				>::OpSrawi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130884 "powerpc.tcc"
				>(code, addr, "srawi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130899 "powerpc.tcc"
				>
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 130904 "powerpc.tcc"
				>::OpSrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130908 "powerpc.tcc"
				>(code, addr, "srw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130923 "powerpc.tcc"
				>
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 130928 "powerpc.tcc"
				>::OpFadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130932 "powerpc.tcc"
				>(code, addr, "fadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130947 "powerpc.tcc"
				>
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 130952 "powerpc.tcc"
				>::OpFadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130956 "powerpc.tcc"
				>(code, addr, "fadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130971 "powerpc.tcc"
				>
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 130976 "powerpc.tcc"
				>::OpFdiv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130980 "powerpc.tcc"
				>(code, addr, "fdiv")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130995 "powerpc.tcc"
				>
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 131000 "powerpc.tcc"
				>::OpFdivs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131004 "powerpc.tcc"
				>(code, addr, "fdivs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131019 "powerpc.tcc"
				>
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 131024 "powerpc.tcc"
				>::OpFmul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131028 "powerpc.tcc"
				>(code, addr, "fmul")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131043 "powerpc.tcc"
				>
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 131048 "powerpc.tcc"
				>::OpFmuls(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131052 "powerpc.tcc"
				>(code, addr, "fmuls")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131067 "powerpc.tcc"
				>
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 131072 "powerpc.tcc"
				>::OpFres(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131076 "powerpc.tcc"
				>(code, addr, "fres")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131090 "powerpc.tcc"
				>
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 131095 "powerpc.tcc"
				>::OpFrsqrte(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131099 "powerpc.tcc"
				>(code, addr, "frsqrte")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131113 "powerpc.tcc"
				>
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 131118 "powerpc.tcc"
				>::OpFsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131122 "powerpc.tcc"
				>(code, addr, "fsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131137 "powerpc.tcc"
				>
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131142 "powerpc.tcc"
				>::OpFsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131146 "powerpc.tcc"
				>(code, addr, "fsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131161 "powerpc.tcc"
				>
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 131166 "powerpc.tcc"
				>::OpFsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131170 "powerpc.tcc"
				>(code, addr, "fsel")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131186 "powerpc.tcc"
				>
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 131191 "powerpc.tcc"
				>::OpFsqrt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131195 "powerpc.tcc"
				>(code, addr, "fsqrt")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131209 "powerpc.tcc"
				>
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 131214 "powerpc.tcc"
				>::OpFsqrts(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131218 "powerpc.tcc"
				>(code, addr, "fsqrts")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131232 "powerpc.tcc"
				>
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131237 "powerpc.tcc"
				>::OpFmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131241 "powerpc.tcc"
				>(code, addr, "fmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131257 "powerpc.tcc"
				>
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131262 "powerpc.tcc"
				>::OpFmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131266 "powerpc.tcc"
				>(code, addr, "fmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131282 "powerpc.tcc"
				>
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131287 "powerpc.tcc"
				>::OpFmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131291 "powerpc.tcc"
				>(code, addr, "fmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131307 "powerpc.tcc"
				>
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131312 "powerpc.tcc"
				>::OpFmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131316 "powerpc.tcc"
				>(code, addr, "fmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131332 "powerpc.tcc"
				>
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131337 "powerpc.tcc"
				>::OpFnmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131341 "powerpc.tcc"
				>(code, addr, "fnmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131357 "powerpc.tcc"
				>
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131362 "powerpc.tcc"
				>::OpFnmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131366 "powerpc.tcc"
				>(code, addr, "fnmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131382 "powerpc.tcc"
				>
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131387 "powerpc.tcc"
				>::OpFnmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131391 "powerpc.tcc"
				>(code, addr, "fnmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131407 "powerpc.tcc"
				>
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131412 "powerpc.tcc"
				>::OpFnmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131416 "powerpc.tcc"
				>(code, addr, "fnmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131432 "powerpc.tcc"
				>
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 131437 "powerpc.tcc"
				>::OpFcmpo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131441 "powerpc.tcc"
				>(code, addr, "fcmpo")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131455 "powerpc.tcc"
				>
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 131460 "powerpc.tcc"
				>::OpFcmpu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131464 "powerpc.tcc"
				>(code, addr, "fcmpu")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131478 "powerpc.tcc"
				>
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 131483 "powerpc.tcc"
				>::OpFctiw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131487 "powerpc.tcc"
				>(code, addr, "fctiw")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131501 "powerpc.tcc"
				>
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 131506 "powerpc.tcc"
				>::OpFctiwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131510 "powerpc.tcc"
				>(code, addr, "fctiwz")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131524 "powerpc.tcc"
				>
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 131529 "powerpc.tcc"
				>::OpFrsp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131533 "powerpc.tcc"
				>(code, addr, "frsp")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131547 "powerpc.tcc"
				>
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 131552 "powerpc.tcc"
				>::OpFabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131556 "powerpc.tcc"
				>(code, addr, "fabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131570 "powerpc.tcc"
				>
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 131575 "powerpc.tcc"
				>::OpFmr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131579 "powerpc.tcc"
				>(code, addr, "fmr")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131593 "powerpc.tcc"
				>
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 131598 "powerpc.tcc"
				>::OpFnabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131602 "powerpc.tcc"
				>(code, addr, "fnabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131616 "powerpc.tcc"
				>
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 131621 "powerpc.tcc"
				>::OpFneg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131625 "powerpc.tcc"
				>(code, addr, "fneg")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131639 "powerpc.tcc"
				>
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 131644 "powerpc.tcc"
				>::OpMcrfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131648 "powerpc.tcc"
				>(code, addr, "mcrfs")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131661 "powerpc.tcc"
				>
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 131666 "powerpc.tcc"
				>::OpMffs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131670 "powerpc.tcc"
				>(code, addr, "mffs")
				{
					fd = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131683 "powerpc.tcc"
				>
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 131688 "powerpc.tcc"
				>::OpMtfsb0(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131692 "powerpc.tcc"
				>(code, addr, "mtfsb0")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131705 "powerpc.tcc"
				>
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 131710 "powerpc.tcc"
				>::OpMtfsb1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131714 "powerpc.tcc"
				>(code, addr, "mtfsb1")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131727 "powerpc.tcc"
				>
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 131732 "powerpc.tcc"
				>::OpMtfsf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131736 "powerpc.tcc"
				>(code, addr, "mtfsf")
				{
					fm = ((code >> 17) & 0xff);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131750 "powerpc.tcc"
				>
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 131755 "powerpc.tcc"
				>::OpMtfsfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131759 "powerpc.tcc"
				>(code, addr, "mtfsfi")
				{
					crfD = ((code >> 23) & 0x7);
					imm = ((code >> 12) & 0xf);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131773 "powerpc.tcc"
				>
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 131778 "powerpc.tcc"
				>::OpB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131782 "powerpc.tcc"
				>(code, addr, "b")
				{
					li = (((((int32_t)(code >> 2)) & 0xffffff) << 8) >> 8) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131796 "powerpc.tcc"
				>
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 131801 "powerpc.tcc"
				>::OpBc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131805 "powerpc.tcc"
				>(code, addr, "bc")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					bd = (((((int32_t)(code >> 2)) & 0x3fff) << 18) >> 18) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131821 "powerpc.tcc"
				>
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 131826 "powerpc.tcc"
				>::OpBcctr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131830 "powerpc.tcc"
				>(code, addr, "bcctr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131844 "powerpc.tcc"
				>
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 131849 "powerpc.tcc"
				>::OpBclr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131853 "powerpc.tcc"
				>(code, addr, "bclr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131867 "powerpc.tcc"
				>
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 131872 "powerpc.tcc"
				>::OpCrand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131876 "powerpc.tcc"
				>(code, addr, "crand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131890 "powerpc.tcc"
				>
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 131895 "powerpc.tcc"
				>::OpCrandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131899 "powerpc.tcc"
				>(code, addr, "crandc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131913 "powerpc.tcc"
				>
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 131918 "powerpc.tcc"
				>::OpCreqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131922 "powerpc.tcc"
				>(code, addr, "creqv")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131936 "powerpc.tcc"
				>
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 131941 "powerpc.tcc"
				>::OpCrnand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131945 "powerpc.tcc"
				>(code, addr, "crnand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131959 "powerpc.tcc"
				>
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 131964 "powerpc.tcc"
				>::OpCrnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131968 "powerpc.tcc"
				>(code, addr, "crnor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131982 "powerpc.tcc"
				>
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 131987 "powerpc.tcc"
				>::OpCror(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131991 "powerpc.tcc"
				>(code, addr, "cror")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132005 "powerpc.tcc"
				>
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 132010 "powerpc.tcc"
				>::OpCrorc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132014 "powerpc.tcc"
				>(code, addr, "crorc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132028 "powerpc.tcc"
				>
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 132033 "powerpc.tcc"
				>::OpCrxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132037 "powerpc.tcc"
				>(code, addr, "crxor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132051 "powerpc.tcc"
				>
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 132056 "powerpc.tcc"
				>::OpMcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132060 "powerpc.tcc"
				>(code, addr, "mcrf")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132073 "powerpc.tcc"
				>
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 132078 "powerpc.tcc"
				>::OpLbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132082 "powerpc.tcc"
				>(code, addr, "lbz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132096 "powerpc.tcc"
				>
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 132101 "powerpc.tcc"
				>::OpLbzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132105 "powerpc.tcc"
				>(code, addr, "lbzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132116 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132119 "powerpc.tcc"
				>
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 132124 "powerpc.tcc"
				>::OpLbzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132128 "powerpc.tcc"
				>(code, addr, "lbzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132142 "powerpc.tcc"
				>
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 132147 "powerpc.tcc"
				>::OpLbzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132151 "powerpc.tcc"
				>(code, addr, "lbzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132165 "powerpc.tcc"
				>
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 132170 "powerpc.tcc"
				>::OpLha(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132174 "powerpc.tcc"
				>(code, addr, "lha")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132188 "powerpc.tcc"
				>
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 132193 "powerpc.tcc"
				>::OpLhau(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132197 "powerpc.tcc"
				>(code, addr, "lhau")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132211 "powerpc.tcc"
				>
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 132216 "powerpc.tcc"
				>::OpLhaux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132220 "powerpc.tcc"
				>(code, addr, "lhaux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132234 "powerpc.tcc"
				>
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 132239 "powerpc.tcc"
				>::OpLhax(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132243 "powerpc.tcc"
				>(code, addr, "lhax")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132257 "powerpc.tcc"
				>
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 132262 "powerpc.tcc"
				>::OpLhz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132266 "powerpc.tcc"
				>(code, addr, "lhz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132280 "powerpc.tcc"
				>
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 132285 "powerpc.tcc"
				>::OpLhzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132289 "powerpc.tcc"
				>(code, addr, "lhzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132303 "powerpc.tcc"
				>
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 132308 "powerpc.tcc"
				>::OpLhzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132312 "powerpc.tcc"
				>(code, addr, "lhzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132326 "powerpc.tcc"
				>
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 132331 "powerpc.tcc"
				>::OpLhzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132335 "powerpc.tcc"
				>(code, addr, "lhzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132349 "powerpc.tcc"
				>
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 132354 "powerpc.tcc"
				>::OpLwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132358 "powerpc.tcc"
				>(code, addr, "lwz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132372 "powerpc.tcc"
				>
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 132377 "powerpc.tcc"
				>::OpLwzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132381 "powerpc.tcc"
				>(code, addr, "lwzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132395 "powerpc.tcc"
				>
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 132400 "powerpc.tcc"
				>::OpLwzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132404 "powerpc.tcc"
				>(code, addr, "lwzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132418 "powerpc.tcc"
				>
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 132423 "powerpc.tcc"
				>::OpLwzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132427 "powerpc.tcc"
				>(code, addr, "lwzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132441 "powerpc.tcc"
				>
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 132446 "powerpc.tcc"
				>::OpStb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132450 "powerpc.tcc"
				>(code, addr, "stb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132464 "powerpc.tcc"
				>
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 132469 "powerpc.tcc"
				>::OpStbu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132473 "powerpc.tcc"
				>(code, addr, "stbu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132487 "powerpc.tcc"
				>
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 132492 "powerpc.tcc"
				>::OpStbux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132496 "powerpc.tcc"
				>(code, addr, "stbux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132510 "powerpc.tcc"
				>
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 132515 "powerpc.tcc"
				>::OpStbx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132519 "powerpc.tcc"
				>(code, addr, "stbx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132533 "powerpc.tcc"
				>
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 132538 "powerpc.tcc"
				>::OpSth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132542 "powerpc.tcc"
				>(code, addr, "sth")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132556 "powerpc.tcc"
				>
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 132561 "powerpc.tcc"
				>::OpSthu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132565 "powerpc.tcc"
				>(code, addr, "sthu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132579 "powerpc.tcc"
				>
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 132584 "powerpc.tcc"
				>::OpSthux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132588 "powerpc.tcc"
				>(code, addr, "sthux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132602 "powerpc.tcc"
				>
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 132607 "powerpc.tcc"
				>::OpSthx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132611 "powerpc.tcc"
				>(code, addr, "sthx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132625 "powerpc.tcc"
				>
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 132630 "powerpc.tcc"
				>::OpStw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132634 "powerpc.tcc"
				>(code, addr, "stw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132648 "powerpc.tcc"
				>
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 132653 "powerpc.tcc"
				>::OpStwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132657 "powerpc.tcc"
				>(code, addr, "stwu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132671 "powerpc.tcc"
				>
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 132676 "powerpc.tcc"
				>::OpStwux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132680 "powerpc.tcc"
				>(code, addr, "stwux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132694 "powerpc.tcc"
				>
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 132699 "powerpc.tcc"
				>::OpStwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132703 "powerpc.tcc"
				>(code, addr, "stwx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132717 "powerpc.tcc"
				>
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132722 "powerpc.tcc"
				>::OpLhbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132726 "powerpc.tcc"
				>(code, addr, "lhbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132740 "powerpc.tcc"
				>
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132745 "powerpc.tcc"
				>::OpLwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132749 "powerpc.tcc"
				>(code, addr, "lwbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132763 "powerpc.tcc"
				>
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132768 "powerpc.tcc"
				>::OpSthbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132772 "powerpc.tcc"
				>(code, addr, "sthbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132786 "powerpc.tcc"
				>
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132791 "powerpc.tcc"
				>::OpStwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132795 "powerpc.tcc"
				>(code, addr, "stwbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132809 "powerpc.tcc"
				>
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 132814 "powerpc.tcc"
				>::OpLswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132818 "powerpc.tcc"
				>(code, addr, "lswi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132832 "powerpc.tcc"
				>
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 132837 "powerpc.tcc"
				>::OpLswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132841 "powerpc.tcc"
				>(code, addr, "lswx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132855 "powerpc.tcc"
				>
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 132860 "powerpc.tcc"
				>::OpStswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132864 "powerpc.tcc"
				>(code, addr, "stswi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132878 "powerpc.tcc"
				>
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 132883 "powerpc.tcc"
				>::OpStswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132887 "powerpc.tcc"
				>(code, addr, "stswx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132901 "powerpc.tcc"
				>
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 132906 "powerpc.tcc"
				>::OpLmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132910 "powerpc.tcc"
				>(code, addr, "lmw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132924 "powerpc.tcc"
				>
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 132929 "powerpc.tcc"
				>::OpStmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132933 "powerpc.tcc"
				>(code, addr, "stmw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132947 "powerpc.tcc"
				>
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 132952 "powerpc.tcc"
				>::OpLfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132956 "powerpc.tcc"
				>(code, addr, "lfd")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132970 "powerpc.tcc"
				>
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 132975 "powerpc.tcc"
				>::OpLfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132979 "powerpc.tcc"
				>(code, addr, "lfdu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132993 "powerpc.tcc"
				>
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 132998 "powerpc.tcc"
				>::OpLfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133002 "powerpc.tcc"
				>(code, addr, "lfdux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133016 "powerpc.tcc"
				>
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133021 "powerpc.tcc"
				>::OpLfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133025 "powerpc.tcc"
				>(code, addr, "lfdx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133039 "powerpc.tcc"
				>
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 133044 "powerpc.tcc"
				>::OpLfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133048 "powerpc.tcc"
				>(code, addr, "lfs")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133062 "powerpc.tcc"
				>
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133067 "powerpc.tcc"
				>::OpLfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133071 "powerpc.tcc"
				>(code, addr, "lfsu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133085 "powerpc.tcc"
				>
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133090 "powerpc.tcc"
				>::OpLfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133094 "powerpc.tcc"
				>(code, addr, "lfsux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133108 "powerpc.tcc"
				>
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133113 "powerpc.tcc"
				>::OpLfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133117 "powerpc.tcc"
				>(code, addr, "lfsx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133131 "powerpc.tcc"
				>
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 133136 "powerpc.tcc"
				>::OpStfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133140 "powerpc.tcc"
				>(code, addr, "stfd")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133151 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133154 "powerpc.tcc"
				>
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 133159 "powerpc.tcc"
				>::OpStfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133163 "powerpc.tcc"
				>(code, addr, "stfdu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133177 "powerpc.tcc"
				>
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 133182 "powerpc.tcc"
				>::OpStfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133186 "powerpc.tcc"
				>(code, addr, "stfdux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133200 "powerpc.tcc"
				>
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133205 "powerpc.tcc"
				>::OpStfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133209 "powerpc.tcc"
				>(code, addr, "stfdx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133223 "powerpc.tcc"
				>
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 133228 "powerpc.tcc"
				>::OpStfiwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133232 "powerpc.tcc"
				>(code, addr, "stfiwx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133246 "powerpc.tcc"
				>
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 133251 "powerpc.tcc"
				>::OpStfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133255 "powerpc.tcc"
				>(code, addr, "stfs")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133269 "powerpc.tcc"
				>
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133274 "powerpc.tcc"
				>::OpStfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133278 "powerpc.tcc"
				>(code, addr, "stfsu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133292 "powerpc.tcc"
				>
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133297 "powerpc.tcc"
				>::OpStfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133301 "powerpc.tcc"
				>(code, addr, "stfsux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133315 "powerpc.tcc"
				>
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133320 "powerpc.tcc"
				>::OpStfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133324 "powerpc.tcc"
				>(code, addr, "stfsx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133338 "powerpc.tcc"
				>
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 133343 "powerpc.tcc"
				>::OpDcba(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133347 "powerpc.tcc"
				>(code, addr, "dcba")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133360 "powerpc.tcc"
				>
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 133365 "powerpc.tcc"
				>::OpDcbf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133369 "powerpc.tcc"
				>(code, addr, "dcbf")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133382 "powerpc.tcc"
				>
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133387 "powerpc.tcc"
				>::OpDcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133391 "powerpc.tcc"
				>(code, addr, "dcbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133404 "powerpc.tcc"
				>
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 133409 "powerpc.tcc"
				>::OpDcbst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133413 "powerpc.tcc"
				>(code, addr, "dcbst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133426 "powerpc.tcc"
				>
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 133431 "powerpc.tcc"
				>::OpDcbt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133435 "powerpc.tcc"
				>(code, addr, "dcbt")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133448 "powerpc.tcc"
				>
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 133453 "powerpc.tcc"
				>::OpDcbtst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133457 "powerpc.tcc"
				>(code, addr, "dcbtst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133470 "powerpc.tcc"
				>
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 133475 "powerpc.tcc"
				>::OpDcbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133479 "powerpc.tcc"
				>(code, addr, "dcbz")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133492 "powerpc.tcc"
				>
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133497 "powerpc.tcc"
				>::OpIcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133501 "powerpc.tcc"
				>(code, addr, "icbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133514 "powerpc.tcc"
				>
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 133519 "powerpc.tcc"
				>::OpTlbia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133523 "powerpc.tcc"
				>(code, addr, "tlbia")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133534 "powerpc.tcc"
				>
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 133539 "powerpc.tcc"
				>::OpTlbie(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133543 "powerpc.tcc"
				>(code, addr, "tlbie")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133555 "powerpc.tcc"
				>
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 133560 "powerpc.tcc"
				>::OpTlbsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133564 "powerpc.tcc"
				>(code, addr, "tlbsync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133575 "powerpc.tcc"
				>
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 133580 "powerpc.tcc"
				>::OpTlbld(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133584 "powerpc.tcc"
				>(code, addr, "tlbld")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133596 "powerpc.tcc"
				>
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 133601 "powerpc.tcc"
				>::OpTlbli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133605 "powerpc.tcc"
				>(code, addr, "tlbli")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133617 "powerpc.tcc"
				>
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 133622 "powerpc.tcc"
				>::OpEciwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133626 "powerpc.tcc"
				>(code, addr, "eciwx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133640 "powerpc.tcc"
				>
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 133645 "powerpc.tcc"
				>::OpEcowx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133649 "powerpc.tcc"
				>(code, addr, "ecowx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133663 "powerpc.tcc"
				>
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 133668 "powerpc.tcc"
				>::OpEieio(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133672 "powerpc.tcc"
				>(code, addr, "eieio")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133683 "powerpc.tcc"
				>
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 133688 "powerpc.tcc"
				>::OpIsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133692 "powerpc.tcc"
				>(code, addr, "isync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133703 "powerpc.tcc"
				>
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 133708 "powerpc.tcc"
				>::OpLwarx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133712 "powerpc.tcc"
				>(code, addr, "lwarx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133726 "powerpc.tcc"
				>
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 133731 "powerpc.tcc"
				>::OpStwcx_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133735 "powerpc.tcc"
				>(code, addr, "stwcx_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133749 "powerpc.tcc"
				>
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 133754 "powerpc.tcc"
				>::OpSync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133758 "powerpc.tcc"
				>(code, addr, "sync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133769 "powerpc.tcc"
				>
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 133774 "powerpc.tcc"
				>::OpSc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133778 "powerpc.tcc"
				>(code, addr, "sc")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133789 "powerpc.tcc"
				>
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 133794 "powerpc.tcc"
				>::OpRfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133798 "powerpc.tcc"
				>(code, addr, "rfi")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133809 "powerpc.tcc"
				>
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 133814 "powerpc.tcc"
				>::OpTw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133818 "powerpc.tcc"
				>(code, addr, "tw")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133832 "powerpc.tcc"
				>
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 133837 "powerpc.tcc"
				>::OpTwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133841 "powerpc.tcc"
				>(code, addr, "twi")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133855 "powerpc.tcc"
				>
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 133860 "powerpc.tcc"
				>::OpMcrxr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133864 "powerpc.tcc"
				>(code, addr, "mcrxr")
				{
					crfD = ((code >> 23) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133876 "powerpc.tcc"
				>
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 133881 "powerpc.tcc"
				>::OpMfcr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133885 "powerpc.tcc"
				>(code, addr, "mfcr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133897 "powerpc.tcc"
				>
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 133902 "powerpc.tcc"
				>::OpMfmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133906 "powerpc.tcc"
				>(code, addr, "mfmsr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133918 "powerpc.tcc"
				>
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 133923 "powerpc.tcc"
				>::OpMfspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133927 "powerpc.tcc"
				>(code, addr, "mfspr")
				{
					rd = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133940 "powerpc.tcc"
				>
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 133945 "powerpc.tcc"
				>::OpMtspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133949 "powerpc.tcc"
				>(code, addr, "mtspr")
				{
					rs = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133962 "powerpc.tcc"
				>
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 133967 "powerpc.tcc"
				>::OpMftb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133971 "powerpc.tcc"
				>(code, addr, "mftb")
				{
					rd = ((code >> 21) & 0x1f);
					tbr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133984 "powerpc.tcc"
				>
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 133989 "powerpc.tcc"
				>::OpMtcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133993 "powerpc.tcc"
				>(code, addr, "mtcrf")
				{
					rs = ((code >> 21) & 0x1f);
					crm = ((code >> 12) & 0xff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134006 "powerpc.tcc"
				>
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 134011 "powerpc.tcc"
				>::OpMtmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134015 "powerpc.tcc"
				>(code, addr, "mtmsr")
				{
					rs = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134027 "powerpc.tcc"
				>
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 134032 "powerpc.tcc"
				>::OpMfsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134036 "powerpc.tcc"
				>(code, addr, "mfsr")
				{
					rd = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134049 "powerpc.tcc"
				>
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134054 "powerpc.tcc"
				>::OpMfsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134058 "powerpc.tcc"
				>(code, addr, "mfsrin")
				{
					rd = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134071 "powerpc.tcc"
				>
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 134076 "powerpc.tcc"
				>::OpMtsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134080 "powerpc.tcc"
				>(code, addr, "mtsr")
				{
					rs = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134093 "powerpc.tcc"
				>
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134098 "powerpc.tcc"
				>::OpMtsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134102 "powerpc.tcc"
				>(code, addr, "mtsrin")
				{
					rs = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134115 "powerpc.tcc"
				>
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 134120 "powerpc.tcc"
				>::OpDss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134124 "powerpc.tcc"
				>(code, addr, "dss")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134136 "powerpc.tcc"
				>
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 134141 "powerpc.tcc"
				>::OpDssall(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134145 "powerpc.tcc"
				>(code, addr, "dssall")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134157 "powerpc.tcc"
				>
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 134162 "powerpc.tcc"
				>::OpDst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134166 "powerpc.tcc"
				>(code, addr, "dst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134180 "powerpc.tcc"
				>
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 134185 "powerpc.tcc"
				>::OpDstst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134189 "powerpc.tcc"
				>(code, addr, "dstst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134203 "powerpc.tcc"
				>
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 134208 "powerpc.tcc"
				>::OpDststt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134212 "powerpc.tcc"
				>(code, addr, "dststt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134226 "powerpc.tcc"
				>
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 134231 "powerpc.tcc"
				>::OpDstt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134235 "powerpc.tcc"
				>(code, addr, "dstt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134249 "powerpc.tcc"
				>
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134254 "powerpc.tcc"
				>::OpLvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134258 "powerpc.tcc"
				>(code, addr, "lvebx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134272 "powerpc.tcc"
				>
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134277 "powerpc.tcc"
				>::OpLvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134281 "powerpc.tcc"
				>(code, addr, "lvehx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134295 "powerpc.tcc"
				>
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134300 "powerpc.tcc"
				>::OpLvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134304 "powerpc.tcc"
				>(code, addr, "lvewx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134318 "powerpc.tcc"
				>
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 134323 "powerpc.tcc"
				>::OpLvsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134327 "powerpc.tcc"
				>(code, addr, "lvsl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134341 "powerpc.tcc"
				>
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 134346 "powerpc.tcc"
				>::OpLvsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134350 "powerpc.tcc"
				>(code, addr, "lvsr")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134364 "powerpc.tcc"
				>
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 134369 "powerpc.tcc"
				>::OpLvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134373 "powerpc.tcc"
				>(code, addr, "lvx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134387 "powerpc.tcc"
				>
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134392 "powerpc.tcc"
				>::OpLvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134396 "powerpc.tcc"
				>(code, addr, "lvxl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134410 "powerpc.tcc"
				>
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134415 "powerpc.tcc"
				>::OpMfvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134419 "powerpc.tcc"
				>(code, addr, "mfvscr")
				{
					vd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134431 "powerpc.tcc"
				>
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134436 "powerpc.tcc"
				>::OpMtvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134440 "powerpc.tcc"
				>(code, addr, "mtvscr")
				{
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134452 "powerpc.tcc"
				>
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134457 "powerpc.tcc"
				>::OpStvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134461 "powerpc.tcc"
				>(code, addr, "stvebx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134475 "powerpc.tcc"
				>
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134480 "powerpc.tcc"
				>::OpStvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134484 "powerpc.tcc"
				>(code, addr, "stvehx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134498 "powerpc.tcc"
				>
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134503 "powerpc.tcc"
				>::OpStvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134507 "powerpc.tcc"
				>(code, addr, "stvewx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134521 "powerpc.tcc"
				>
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 134526 "powerpc.tcc"
				>::OpStvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134530 "powerpc.tcc"
				>(code, addr, "stvx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134544 "powerpc.tcc"
				>
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134549 "powerpc.tcc"
				>::OpStvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134553 "powerpc.tcc"
				>(code, addr, "stvxl")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134567 "powerpc.tcc"
				>
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 134572 "powerpc.tcc"
				>::OpVaddcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134576 "powerpc.tcc"
				>(code, addr, "vaddcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134590 "powerpc.tcc"
				>
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 134595 "powerpc.tcc"
				>::OpVaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134599 "powerpc.tcc"
				>(code, addr, "vaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134613 "powerpc.tcc"
				>
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 134618 "powerpc.tcc"
				>::OpVaddsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134622 "powerpc.tcc"
				>(code, addr, "vaddsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134636 "powerpc.tcc"
				>
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 134641 "powerpc.tcc"
				>::OpVaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134645 "powerpc.tcc"
				>(code, addr, "vaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134659 "powerpc.tcc"
				>
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 134664 "powerpc.tcc"
				>::OpVaddsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134668 "powerpc.tcc"
				>(code, addr, "vaddsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134682 "powerpc.tcc"
				>
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 134687 "powerpc.tcc"
				>::OpVaddubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134691 "powerpc.tcc"
				>(code, addr, "vaddubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134705 "powerpc.tcc"
				>
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 134710 "powerpc.tcc"
				>::OpVaddubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134714 "powerpc.tcc"
				>(code, addr, "vaddubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134728 "powerpc.tcc"
				>
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 134733 "powerpc.tcc"
				>::OpVadduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134737 "powerpc.tcc"
				>(code, addr, "vadduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134751 "powerpc.tcc"
				>
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 134756 "powerpc.tcc"
				>::OpVadduhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134760 "powerpc.tcc"
				>(code, addr, "vadduhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134774 "powerpc.tcc"
				>
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 134779 "powerpc.tcc"
				>::OpVadduwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134783 "powerpc.tcc"
				>(code, addr, "vadduwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134797 "powerpc.tcc"
				>
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 134802 "powerpc.tcc"
				>::OpVadduws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134806 "powerpc.tcc"
				>(code, addr, "vadduws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134820 "powerpc.tcc"
				>
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 134825 "powerpc.tcc"
				>::OpVand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134829 "powerpc.tcc"
				>(code, addr, "vand")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134843 "powerpc.tcc"
				>
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 134848 "powerpc.tcc"
				>::OpVandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134852 "powerpc.tcc"
				>(code, addr, "vandc")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134866 "powerpc.tcc"
				>
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 134871 "powerpc.tcc"
				>::OpVavgsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134875 "powerpc.tcc"
				>(code, addr, "vavgsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134889 "powerpc.tcc"
				>
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 134894 "powerpc.tcc"
				>::OpVavgsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134898 "powerpc.tcc"
				>(code, addr, "vavgsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134912 "powerpc.tcc"
				>
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 134917 "powerpc.tcc"
				>::OpVavgsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134921 "powerpc.tcc"
				>(code, addr, "vavgsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134935 "powerpc.tcc"
				>
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 134940 "powerpc.tcc"
				>::OpVavgub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134944 "powerpc.tcc"
				>(code, addr, "vavgub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134958 "powerpc.tcc"
				>
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 134963 "powerpc.tcc"
				>::OpVavguh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134967 "powerpc.tcc"
				>(code, addr, "vavguh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134981 "powerpc.tcc"
				>
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 134986 "powerpc.tcc"
				>::OpVavguw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134990 "powerpc.tcc"
				>(code, addr, "vavguw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135004 "powerpc.tcc"
				>
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 135009 "powerpc.tcc"
				>::OpVcfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135013 "powerpc.tcc"
				>(code, addr, "vcfsx")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135027 "powerpc.tcc"
				>
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 135032 "powerpc.tcc"
				>::OpVcfux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135036 "powerpc.tcc"
				>(code, addr, "vcfux")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135050 "powerpc.tcc"
				>
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 135055 "powerpc.tcc"
				>::OpVcmpbfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135059 "powerpc.tcc"
				>(code, addr, "vcmpbfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135074 "powerpc.tcc"
				>
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 135079 "powerpc.tcc"
				>::OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135083 "powerpc.tcc"
				>(code, addr, "vcmpeqfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135098 "powerpc.tcc"
				>
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 135103 "powerpc.tcc"
				>::OpVcmpequb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135107 "powerpc.tcc"
				>(code, addr, "vcmpequb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135122 "powerpc.tcc"
				>
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 135127 "powerpc.tcc"
				>::OpVcmpequh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135131 "powerpc.tcc"
				>(code, addr, "vcmpequh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135146 "powerpc.tcc"
				>
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 135151 "powerpc.tcc"
				>::OpVcmpequw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135155 "powerpc.tcc"
				>(code, addr, "vcmpequw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135170 "powerpc.tcc"
				>
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 135175 "powerpc.tcc"
				>::OpVcmpgefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135179 "powerpc.tcc"
				>(code, addr, "vcmpgefp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135194 "powerpc.tcc"
				>
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 135199 "powerpc.tcc"
				>::OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135203 "powerpc.tcc"
				>(code, addr, "vcmpgtfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135218 "powerpc.tcc"
				>
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 135223 "powerpc.tcc"
				>::OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135227 "powerpc.tcc"
				>(code, addr, "vcmpgtsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135242 "powerpc.tcc"
				>
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 135247 "powerpc.tcc"
				>::OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135251 "powerpc.tcc"
				>(code, addr, "vcmpgtsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135266 "powerpc.tcc"
				>
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 135271 "powerpc.tcc"
				>::OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135275 "powerpc.tcc"
				>(code, addr, "vcmpgtsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135290 "powerpc.tcc"
				>
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 135295 "powerpc.tcc"
				>::OpVcmpgtub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135299 "powerpc.tcc"
				>(code, addr, "vcmpgtub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135314 "powerpc.tcc"
				>
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 135319 "powerpc.tcc"
				>::OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135323 "powerpc.tcc"
				>(code, addr, "vcmpgtuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135338 "powerpc.tcc"
				>
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 135343 "powerpc.tcc"
				>::OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135347 "powerpc.tcc"
				>(code, addr, "vcmpgtuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135362 "powerpc.tcc"
				>
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 135367 "powerpc.tcc"
				>::OpVctsxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135371 "powerpc.tcc"
				>(code, addr, "vctsxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135385 "powerpc.tcc"
				>
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 135390 "powerpc.tcc"
				>::OpVctuxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135394 "powerpc.tcc"
				>(code, addr, "vctuxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135408 "powerpc.tcc"
				>
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 135413 "powerpc.tcc"
				>::OpVexptefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135417 "powerpc.tcc"
				>(code, addr, "vexptefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135430 "powerpc.tcc"
				>
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 135435 "powerpc.tcc"
				>::OpVlogefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135439 "powerpc.tcc"
				>(code, addr, "vlogefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135452 "powerpc.tcc"
				>
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 135457 "powerpc.tcc"
				>::OpVmaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135461 "powerpc.tcc"
				>(code, addr, "vmaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135476 "powerpc.tcc"
				>
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 135481 "powerpc.tcc"
				>::OpVmaxfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135485 "powerpc.tcc"
				>(code, addr, "vmaxfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135499 "powerpc.tcc"
				>
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 135504 "powerpc.tcc"
				>::OpVmaxsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135508 "powerpc.tcc"
				>(code, addr, "vmaxsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135522 "powerpc.tcc"
				>
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 135527 "powerpc.tcc"
				>::OpVmaxsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135531 "powerpc.tcc"
				>(code, addr, "vmaxsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135545 "powerpc.tcc"
				>
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 135550 "powerpc.tcc"
				>::OpVmaxsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135554 "powerpc.tcc"
				>(code, addr, "vmaxsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135568 "powerpc.tcc"
				>
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 135573 "powerpc.tcc"
				>::OpVmaxub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135577 "powerpc.tcc"
				>(code, addr, "vmaxub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135591 "powerpc.tcc"
				>
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 135596 "powerpc.tcc"
				>::OpVmaxuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135600 "powerpc.tcc"
				>(code, addr, "vmaxuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135614 "powerpc.tcc"
				>
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 135619 "powerpc.tcc"
				>::OpVmaxuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135623 "powerpc.tcc"
				>(code, addr, "vmaxuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135637 "powerpc.tcc"
				>
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135642 "powerpc.tcc"
				>::OpVmhaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135646 "powerpc.tcc"
				>(code, addr, "vmhaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135661 "powerpc.tcc"
				>
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135666 "powerpc.tcc"
				>::OpVmhraddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135670 "powerpc.tcc"
				>(code, addr, "vmhraddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135685 "powerpc.tcc"
				>
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 135690 "powerpc.tcc"
				>::OpVminfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135694 "powerpc.tcc"
				>(code, addr, "vminfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135708 "powerpc.tcc"
				>
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 135713 "powerpc.tcc"
				>::OpVminsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135717 "powerpc.tcc"
				>(code, addr, "vminsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135731 "powerpc.tcc"
				>
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 135736 "powerpc.tcc"
				>::OpVminsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135740 "powerpc.tcc"
				>(code, addr, "vminsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135754 "powerpc.tcc"
				>
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 135759 "powerpc.tcc"
				>::OpVminsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135763 "powerpc.tcc"
				>(code, addr, "vminsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135777 "powerpc.tcc"
				>
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 135782 "powerpc.tcc"
				>::OpVminub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135786 "powerpc.tcc"
				>(code, addr, "vminub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135800 "powerpc.tcc"
				>
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 135805 "powerpc.tcc"
				>::OpVminuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135809 "powerpc.tcc"
				>(code, addr, "vminuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135823 "powerpc.tcc"
				>
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 135828 "powerpc.tcc"
				>::OpVminuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135832 "powerpc.tcc"
				>(code, addr, "vminuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135846 "powerpc.tcc"
				>
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 135851 "powerpc.tcc"
				>::OpVmladduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135855 "powerpc.tcc"
				>(code, addr, "vmladduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135870 "powerpc.tcc"
				>
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 135875 "powerpc.tcc"
				>::OpVmrghb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135879 "powerpc.tcc"
				>(code, addr, "vmrghb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135893 "powerpc.tcc"
				>
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 135898 "powerpc.tcc"
				>::OpVmrghh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135902 "powerpc.tcc"
				>(code, addr, "vmrghh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135916 "powerpc.tcc"
				>
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 135921 "powerpc.tcc"
				>::OpVmrghw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135925 "powerpc.tcc"
				>(code, addr, "vmrghw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135939 "powerpc.tcc"
				>
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 135944 "powerpc.tcc"
				>::OpVmrglb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135948 "powerpc.tcc"
				>(code, addr, "vmrglb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135962 "powerpc.tcc"
				>
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 135967 "powerpc.tcc"
				>::OpVmrglh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135971 "powerpc.tcc"
				>(code, addr, "vmrglh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135985 "powerpc.tcc"
				>
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 135990 "powerpc.tcc"
				>::OpVmrglw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135994 "powerpc.tcc"
				>(code, addr, "vmrglw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136008 "powerpc.tcc"
				>
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 136013 "powerpc.tcc"
				>::OpVmsummbm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136017 "powerpc.tcc"
				>(code, addr, "vmsummbm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136032 "powerpc.tcc"
				>
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 136037 "powerpc.tcc"
				>::OpVmsumshm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136041 "powerpc.tcc"
				>(code, addr, "vmsumshm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136056 "powerpc.tcc"
				>
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 136061 "powerpc.tcc"
				>::OpVmsumshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136065 "powerpc.tcc"
				>(code, addr, "vmsumshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136080 "powerpc.tcc"
				>
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 136085 "powerpc.tcc"
				>::OpVmsumubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136089 "powerpc.tcc"
				>(code, addr, "vmsumubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136104 "powerpc.tcc"
				>
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 136109 "powerpc.tcc"
				>::OpVmsumuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136113 "powerpc.tcc"
				>(code, addr, "vmsumuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136128 "powerpc.tcc"
				>
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 136133 "powerpc.tcc"
				>::OpVmsumuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136137 "powerpc.tcc"
				>(code, addr, "vmsumuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136152 "powerpc.tcc"
				>
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 136157 "powerpc.tcc"
				>::OpVmulesb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136161 "powerpc.tcc"
				>(code, addr, "vmulesb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136175 "powerpc.tcc"
				>
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 136180 "powerpc.tcc"
				>::OpVmulesh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136184 "powerpc.tcc"
				>(code, addr, "vmulesh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136198 "powerpc.tcc"
				>
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 136203 "powerpc.tcc"
				>::OpVmuleub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136207 "powerpc.tcc"
				>(code, addr, "vmuleub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136221 "powerpc.tcc"
				>
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 136226 "powerpc.tcc"
				>::OpVmuleuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136230 "powerpc.tcc"
				>(code, addr, "vmuleuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136244 "powerpc.tcc"
				>
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 136249 "powerpc.tcc"
				>::OpVmulosb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136253 "powerpc.tcc"
				>(code, addr, "vmulosb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136267 "powerpc.tcc"
				>
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 136272 "powerpc.tcc"
				>::OpVmulosh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136276 "powerpc.tcc"
				>(code, addr, "vmulosh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136290 "powerpc.tcc"
				>
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 136295 "powerpc.tcc"
				>::OpVmuloub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136299 "powerpc.tcc"
				>(code, addr, "vmuloub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136313 "powerpc.tcc"
				>
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 136318 "powerpc.tcc"
				>::OpVmulouh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136322 "powerpc.tcc"
				>(code, addr, "vmulouh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136336 "powerpc.tcc"
				>
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 136341 "powerpc.tcc"
				>::OpVnmsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136345 "powerpc.tcc"
				>(code, addr, "vnmsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136360 "powerpc.tcc"
				>
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 136365 "powerpc.tcc"
				>::OpVnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136369 "powerpc.tcc"
				>(code, addr, "vnor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136383 "powerpc.tcc"
				>
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 136388 "powerpc.tcc"
				>::OpVor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136392 "powerpc.tcc"
				>(code, addr, "vor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136406 "powerpc.tcc"
				>
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 136411 "powerpc.tcc"
				>::OpVperm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136415 "powerpc.tcc"
				>(code, addr, "vperm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136430 "powerpc.tcc"
				>
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 136435 "powerpc.tcc"
				>::OpVpkpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136439 "powerpc.tcc"
				>(code, addr, "vpkpx")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136453 "powerpc.tcc"
				>
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 136458 "powerpc.tcc"
				>::OpVpkshss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136462 "powerpc.tcc"
				>(code, addr, "vpkshss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136476 "powerpc.tcc"
				>
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 136481 "powerpc.tcc"
				>::OpVpkshus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136485 "powerpc.tcc"
				>(code, addr, "vpkshus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136499 "powerpc.tcc"
				>
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 136504 "powerpc.tcc"
				>::OpVpkswss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136508 "powerpc.tcc"
				>(code, addr, "vpkswss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136522 "powerpc.tcc"
				>
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 136527 "powerpc.tcc"
				>::OpVpkswus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136531 "powerpc.tcc"
				>(code, addr, "vpkswus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136545 "powerpc.tcc"
				>
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 136550 "powerpc.tcc"
				>::OpVpkuhum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136554 "powerpc.tcc"
				>(code, addr, "vpkuhum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136568 "powerpc.tcc"
				>
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 136573 "powerpc.tcc"
				>::OpVpkuhus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136577 "powerpc.tcc"
				>(code, addr, "vpkuhus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136591 "powerpc.tcc"
				>
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 136596 "powerpc.tcc"
				>::OpVpkuwum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136600 "powerpc.tcc"
				>(code, addr, "vpkuwum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136614 "powerpc.tcc"
				>
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 136619 "powerpc.tcc"
				>::OpVpkuwus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136623 "powerpc.tcc"
				>(code, addr, "vpkuwus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136637 "powerpc.tcc"
				>
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 136642 "powerpc.tcc"
				>::OpVrefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136646 "powerpc.tcc"
				>(code, addr, "vrefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136659 "powerpc.tcc"
				>
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 136664 "powerpc.tcc"
				>::OpVrfim(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136668 "powerpc.tcc"
				>(code, addr, "vrfim")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136681 "powerpc.tcc"
				>
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 136686 "powerpc.tcc"
				>::OpVrfin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136690 "powerpc.tcc"
				>(code, addr, "vrfin")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136703 "powerpc.tcc"
				>
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 136708 "powerpc.tcc"
				>::OpVrfip(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136712 "powerpc.tcc"
				>(code, addr, "vrfip")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136725 "powerpc.tcc"
				>
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 136730 "powerpc.tcc"
				>::OpVrfiz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136734 "powerpc.tcc"
				>(code, addr, "vrfiz")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136747 "powerpc.tcc"
				>
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 136752 "powerpc.tcc"
				>::OpVrlb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136756 "powerpc.tcc"
				>(code, addr, "vrlb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136770 "powerpc.tcc"
				>
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 136775 "powerpc.tcc"
				>::OpVrlh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136779 "powerpc.tcc"
				>(code, addr, "vrlh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136793 "powerpc.tcc"
				>
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 136798 "powerpc.tcc"
				>::OpVrlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136802 "powerpc.tcc"
				>(code, addr, "vrlw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136816 "powerpc.tcc"
				>
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 136821 "powerpc.tcc"
				>::OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136825 "powerpc.tcc"
				>(code, addr, "vrsqrtefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136838 "powerpc.tcc"
				>
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 136843 "powerpc.tcc"
				>::OpVsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136847 "powerpc.tcc"
				>(code, addr, "vsel")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136862 "powerpc.tcc"
				>
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 136867 "powerpc.tcc"
				>::OpVsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136871 "powerpc.tcc"
				>(code, addr, "vsl")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136885 "powerpc.tcc"
				>
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 136890 "powerpc.tcc"
				>::OpVslb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136894 "powerpc.tcc"
				>(code, addr, "vslb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136908 "powerpc.tcc"
				>
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 136913 "powerpc.tcc"
				>::OpVsldoi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136917 "powerpc.tcc"
				>(code, addr, "vsldoi")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					sh = ((code >> 6) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136932 "powerpc.tcc"
				>
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 136937 "powerpc.tcc"
				>::OpVslh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136941 "powerpc.tcc"
				>(code, addr, "vslh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136955 "powerpc.tcc"
				>
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 136960 "powerpc.tcc"
				>::OpVslo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136964 "powerpc.tcc"
				>(code, addr, "vslo")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136978 "powerpc.tcc"
				>
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 136983 "powerpc.tcc"
				>::OpVslw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136987 "powerpc.tcc"
				>(code, addr, "vslw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137001 "powerpc.tcc"
				>
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 137006 "powerpc.tcc"
				>::OpVspltb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137010 "powerpc.tcc"
				>(code, addr, "vspltb")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137024 "powerpc.tcc"
				>
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 137029 "powerpc.tcc"
				>::OpVsplth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137033 "powerpc.tcc"
				>(code, addr, "vsplth")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137047 "powerpc.tcc"
				>
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 137052 "powerpc.tcc"
				>::OpVspltisb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137056 "powerpc.tcc"
				>(code, addr, "vspltisb")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137070 "powerpc.tcc"
				>
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 137075 "powerpc.tcc"
				>::OpVspltish(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137079 "powerpc.tcc"
				>(code, addr, "vspltish")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137093 "powerpc.tcc"
				>
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 137098 "powerpc.tcc"
				>::OpVspltisw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137102 "powerpc.tcc"
				>(code, addr, "vspltisw")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137116 "powerpc.tcc"
				>
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 137121 "powerpc.tcc"
				>::OpVspltw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137125 "powerpc.tcc"
				>(code, addr, "vspltw")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137139 "powerpc.tcc"
				>
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 137144 "powerpc.tcc"
				>::OpVsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137148 "powerpc.tcc"
				>(code, addr, "vsr")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137162 "powerpc.tcc"
				>
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 137167 "powerpc.tcc"
				>::OpVsrab(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137171 "powerpc.tcc"
				>(code, addr, "vsrab")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137185 "powerpc.tcc"
				>
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 137190 "powerpc.tcc"
				>::OpVsrah(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137194 "powerpc.tcc"
				>(code, addr, "vsrah")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137208 "powerpc.tcc"
				>
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 137213 "powerpc.tcc"
				>::OpVsraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137217 "powerpc.tcc"
				>(code, addr, "vsraw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137231 "powerpc.tcc"
				>
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 137236 "powerpc.tcc"
				>::OpVsrb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137240 "powerpc.tcc"
				>(code, addr, "vsrb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137254 "powerpc.tcc"
				>
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 137259 "powerpc.tcc"
				>::OpVsrh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137263 "powerpc.tcc"
				>(code, addr, "vsrh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137277 "powerpc.tcc"
				>
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 137282 "powerpc.tcc"
				>::OpVsro(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137286 "powerpc.tcc"
				>(code, addr, "vsro")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137300 "powerpc.tcc"
				>
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 137305 "powerpc.tcc"
				>::OpVsrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137309 "powerpc.tcc"
				>(code, addr, "vsrw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137323 "powerpc.tcc"
				>
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 137328 "powerpc.tcc"
				>::OpVsubcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137332 "powerpc.tcc"
				>(code, addr, "vsubcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137346 "powerpc.tcc"
				>
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 137351 "powerpc.tcc"
				>::OpVsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137355 "powerpc.tcc"
				>(code, addr, "vsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137369 "powerpc.tcc"
				>
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 137374 "powerpc.tcc"
				>::OpVsubsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137378 "powerpc.tcc"
				>(code, addr, "vsubsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137392 "powerpc.tcc"
				>
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 137397 "powerpc.tcc"
				>::OpVsubshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137401 "powerpc.tcc"
				>(code, addr, "vsubshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137415 "powerpc.tcc"
				>
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 137420 "powerpc.tcc"
				>::OpVsubsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137424 "powerpc.tcc"
				>(code, addr, "vsubsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137438 "powerpc.tcc"
				>
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 137443 "powerpc.tcc"
				>::OpVsububm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137447 "powerpc.tcc"
				>(code, addr, "vsububm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137461 "powerpc.tcc"
				>
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 137466 "powerpc.tcc"
				>::OpVsububs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137470 "powerpc.tcc"
				>(code, addr, "vsububs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137484 "powerpc.tcc"
				>
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 137489 "powerpc.tcc"
				>::OpVsubuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137493 "powerpc.tcc"
				>(code, addr, "vsubuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137507 "powerpc.tcc"
				>
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 137512 "powerpc.tcc"
				>::OpVsubuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137516 "powerpc.tcc"
				>(code, addr, "vsubuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137530 "powerpc.tcc"
				>
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 137535 "powerpc.tcc"
				>::OpVsubuwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137539 "powerpc.tcc"
				>(code, addr, "vsubuwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137553 "powerpc.tcc"
				>
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 137558 "powerpc.tcc"
				>::OpVsubuws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137562 "powerpc.tcc"
				>(code, addr, "vsubuws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137576 "powerpc.tcc"
				>
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 137581 "powerpc.tcc"
				>::OpVsumsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137585 "powerpc.tcc"
				>(code, addr, "vsumsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137599 "powerpc.tcc"
				>
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 137604 "powerpc.tcc"
				>::OpVsum2sws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137608 "powerpc.tcc"
				>(code, addr, "vsum2sws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137622 "powerpc.tcc"
				>
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 137627 "powerpc.tcc"
				>::OpVsum4sbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137631 "powerpc.tcc"
				>(code, addr, "vsum4sbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137645 "powerpc.tcc"
				>
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 137650 "powerpc.tcc"
				>::OpVsum4shs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137654 "powerpc.tcc"
				>(code, addr, "vsum4shs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137668 "powerpc.tcc"
				>
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 137673 "powerpc.tcc"
				>::OpVsum4ubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137677 "powerpc.tcc"
				>(code, addr, "vsum4ubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137691 "powerpc.tcc"
				>
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 137696 "powerpc.tcc"
				>::OpVupkhpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137700 "powerpc.tcc"
				>(code, addr, "vupkhpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137713 "powerpc.tcc"
				>
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 137718 "powerpc.tcc"
				>::OpVupkhsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137722 "powerpc.tcc"
				>(code, addr, "vupkhsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137735 "powerpc.tcc"
				>
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 137740 "powerpc.tcc"
				>::OpVupkhsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137744 "powerpc.tcc"
				>(code, addr, "vupkhsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137757 "powerpc.tcc"
				>
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 137762 "powerpc.tcc"
				>::OpVupklpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137766 "powerpc.tcc"
				>(code, addr, "vupklpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137779 "powerpc.tcc"
				>
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 137784 "powerpc.tcc"
				>::OpVupklsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137788 "powerpc.tcc"
				>(code, addr, "vupklsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137801 "powerpc.tcc"
				>
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 137806 "powerpc.tcc"
				>::OpVupklsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137810 "powerpc.tcc"
				>(code, addr, "vupklsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137823 "powerpc.tcc"
				>
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 137828 "powerpc.tcc"
				>::OpVxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137832 "powerpc.tcc"
				>(code, addr, "vxor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137846 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137851 "powerpc.tcc"
				>::DecodeMapPage(typename CONFIG::address_t key)
				{
					this->key = key;
					memset(operation, 0, sizeof(operation));
					next = 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137865 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137870 "powerpc.tcc"
				>::~DecodeMapPage()
				{
					unsigned int idx;
					for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
					delete operation[idx];
				}

				template <
#line 38 "ppc.isa"
				class
#line 137881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137884 "powerpc.tcc"
				>
				DecodeTableEntry<
#line 38 "ppc.isa"
				CONFIG
#line 137889 "powerpc.tcc"
				>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137893 "powerpc.tcc"
				> *(*decode)(CodeType, typename CONFIG::address_t))
				{
					this->opcode = opcode;
					this->opcode_mask = opcode_mask;
					this->decode = decode;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137907 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 137912 "powerpc.tcc"
				>::Decoder()
				: is_little_endian( false ), mru_page( 0 )
				{
					memset(decode_hash_table, 0, sizeof(decode_hash_table));
					if(
#line 967 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137920 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137924 "powerpc.tcc"
					>(0x100004c4UL, 0xfc0007ffUL, DecodeOpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 137928 "powerpc.tcc"
					>));
					if(
#line 961 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137933 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137937 "powerpc.tcc"
					>(0x100002ceUL, 0xfc1f07ffUL, DecodeOpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 137941 "powerpc.tcc"
					>));
					if(
#line 955 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137946 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137950 "powerpc.tcc"
					>(0x1000028eUL, 0xfc1f07ffUL, DecodeOpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 137954 "powerpc.tcc"
					>));
					if(
#line 949 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137959 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137963 "powerpc.tcc"
					>(0x100003ceUL, 0xfc1f07ffUL, DecodeOpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 137967 "powerpc.tcc"
					>));
					if(
#line 943 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137972 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137976 "powerpc.tcc"
					>(0x1000024eUL, 0xfc1f07ffUL, DecodeOpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 137980 "powerpc.tcc"
					>));
					if(
#line 937 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137985 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137989 "powerpc.tcc"
					>(0x1000020eUL, 0xfc1f07ffUL, DecodeOpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 137993 "powerpc.tcc"
					>));
					if(
#line 931 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137998 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138002 "powerpc.tcc"
					>(0x1000034eUL, 0xfc1f07ffUL, DecodeOpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 138006 "powerpc.tcc"
					>));
					if(
#line 925 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138011 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138015 "powerpc.tcc"
					>(0x10000608UL, 0xfc0007ffUL, DecodeOpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 138019 "powerpc.tcc"
					>));
					if(
#line 919 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138024 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138028 "powerpc.tcc"
					>(0x10000648UL, 0xfc0007ffUL, DecodeOpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 138032 "powerpc.tcc"
					>));
					if(
#line 913 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138037 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138041 "powerpc.tcc"
					>(0x10000708UL, 0xfc0007ffUL, DecodeOpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 138045 "powerpc.tcc"
					>));
					if(
#line 907 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138050 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138054 "powerpc.tcc"
					>(0x10000688UL, 0xfc0007ffUL, DecodeOpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 138058 "powerpc.tcc"
					>));
					if(
#line 901 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138063 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138067 "powerpc.tcc"
					>(0x10000788UL, 0xfc0007ffUL, DecodeOpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 138071 "powerpc.tcc"
					>));
					if(
#line 895 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138076 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138080 "powerpc.tcc"
					>(0x10000680UL, 0xfc0007ffUL, DecodeOpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 138084 "powerpc.tcc"
					>));
					if(
#line 889 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138089 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138093 "powerpc.tcc"
					>(0x10000480UL, 0xfc0007ffUL, DecodeOpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 138097 "powerpc.tcc"
					>));
					if(
#line 883 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138102 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138106 "powerpc.tcc"
					>(0x10000640UL, 0xfc0007ffUL, DecodeOpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138110 "powerpc.tcc"
					>));
					if(
#line 877 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138115 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138119 "powerpc.tcc"
					>(0x10000440UL, 0xfc0007ffUL, DecodeOpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138123 "powerpc.tcc"
					>));
					if(
#line 871 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138128 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138132 "powerpc.tcc"
					>(0x10000600UL, 0xfc0007ffUL, DecodeOpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 138136 "powerpc.tcc"
					>));
					if(
#line 865 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138141 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138145 "powerpc.tcc"
					>(0x10000400UL, 0xfc0007ffUL, DecodeOpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 138149 "powerpc.tcc"
					>));
					if(
#line 859 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138154 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138158 "powerpc.tcc"
					>(0x10000780UL, 0xfc0007ffUL, DecodeOpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 138162 "powerpc.tcc"
					>));
					if(
#line 853 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138167 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138171 "powerpc.tcc"
					>(0x10000740UL, 0xfc0007ffUL, DecodeOpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 138175 "powerpc.tcc"
					>));
					if(
#line 847 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138180 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138184 "powerpc.tcc"
					>(0x10000700UL, 0xfc0007ffUL, DecodeOpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 138188 "powerpc.tcc"
					>));
					if(
#line 841 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138193 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138197 "powerpc.tcc"
					>(0x1000004aUL, 0xfc0007ffUL, DecodeOpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138201 "powerpc.tcc"
					>));
					if(
#line 835 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138206 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138210 "powerpc.tcc"
					>(0x10000580UL, 0xfc0007ffUL, DecodeOpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 138214 "powerpc.tcc"
					>));
					if(
#line 829 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138219 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138223 "powerpc.tcc"
					>(0x10000284UL, 0xfc0007ffUL, DecodeOpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 138227 "powerpc.tcc"
					>));
					if(
#line 823 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138232 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138236 "powerpc.tcc"
					>(0x1000044cUL, 0xfc0007ffUL, DecodeOpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 138240 "powerpc.tcc"
					>));
					if(
#line 817 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138245 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138249 "powerpc.tcc"
					>(0x10000244UL, 0xfc0007ffUL, DecodeOpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 138253 "powerpc.tcc"
					>));
					if(
#line 811 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138258 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138262 "powerpc.tcc"
					>(0x10000204UL, 0xfc0007ffUL, DecodeOpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 138266 "powerpc.tcc"
					>));
					if(
#line 805 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138271 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138275 "powerpc.tcc"
					>(0x10000384UL, 0xfc0007ffUL, DecodeOpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 138279 "powerpc.tcc"
					>));
					if(
#line 799 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138284 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138288 "powerpc.tcc"
					>(0x10000344UL, 0xfc0007ffUL, DecodeOpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 138292 "powerpc.tcc"
					>));
					if(
#line 793 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138297 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138301 "powerpc.tcc"
					>(0x10000304UL, 0xfc0007ffUL, DecodeOpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 138305 "powerpc.tcc"
					>));
					if(
#line 787 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138310 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138314 "powerpc.tcc"
					>(0x100002c4UL, 0xfc0007ffUL, DecodeOpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 138318 "powerpc.tcc"
					>));
					if(
#line 781 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138323 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138327 "powerpc.tcc"
					>(0x1000028cUL, 0xfc0007ffUL, DecodeOpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 138331 "powerpc.tcc"
					>));
					if(
#line 775 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138336 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138340 "powerpc.tcc"
					>(0x1000038cUL, 0xfc0007ffUL, DecodeOpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 138344 "powerpc.tcc"
					>));
					if(
#line 769 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138349 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138353 "powerpc.tcc"
					>(0x1000034cUL, 0xfc0007ffUL, DecodeOpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 138357 "powerpc.tcc"
					>));
					if(
#line 763 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138362 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138366 "powerpc.tcc"
					>(0x1000030cUL, 0xfc0007ffUL, DecodeOpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 138370 "powerpc.tcc"
					>));
					if(
#line 757 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138375 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138379 "powerpc.tcc"
					>(0x1000024cUL, 0xfc0007ffUL, DecodeOpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 138383 "powerpc.tcc"
					>));
					if(
#line 751 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138388 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138392 "powerpc.tcc"
					>(0x1000020cUL, 0xfc0007ffUL, DecodeOpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 138396 "powerpc.tcc"
					>));
					if(
#line 745 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138401 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138405 "powerpc.tcc"
					>(0x10000184UL, 0xfc0007ffUL, DecodeOpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 138409 "powerpc.tcc"
					>));
					if(
#line 739 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138414 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138418 "powerpc.tcc"
					>(0x1000040cUL, 0xfc0007ffUL, DecodeOpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 138422 "powerpc.tcc"
					>));
					if(
#line 733 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138427 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138431 "powerpc.tcc"
					>(0x10000144UL, 0xfc0007ffUL, DecodeOpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 138435 "powerpc.tcc"
					>));
					if(
#line 727 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138440 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138444 "powerpc.tcc"
					>(0x1000002cUL, 0xfc00043fUL, DecodeOpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 138448 "powerpc.tcc"
					>));
					if(
#line 721 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138453 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138457 "powerpc.tcc"
					>(0x10000104UL, 0xfc0007ffUL, DecodeOpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 138461 "powerpc.tcc"
					>));
					if(
#line 715 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138466 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138470 "powerpc.tcc"
					>(0x100001c4UL, 0xfc0007ffUL, DecodeOpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 138474 "powerpc.tcc"
					>));
					if(
#line 709 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138479 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138483 "powerpc.tcc"
					>(0x1000002aUL, 0xfc00003fUL, DecodeOpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 138487 "powerpc.tcc"
					>));
					if(
#line 703 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138492 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138496 "powerpc.tcc"
					>(0x1000014aUL, 0xfc1f07ffUL, DecodeOpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 138500 "powerpc.tcc"
					>));
					if(
#line 697 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138505 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138509 "powerpc.tcc"
					>(0x10000084UL, 0xfc0007ffUL, DecodeOpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 138513 "powerpc.tcc"
					>));
					if(
#line 691 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138518 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138522 "powerpc.tcc"
					>(0x10000044UL, 0xfc0007ffUL, DecodeOpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 138526 "powerpc.tcc"
					>));
					if(
#line 685 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138531 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138535 "powerpc.tcc"
					>(0x10000004UL, 0xfc0007ffUL, DecodeOpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 138539 "powerpc.tcc"
					>));
					if(
#line 679 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138544 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138548 "powerpc.tcc"
					>(0x1000024aUL, 0xfc1f07ffUL, DecodeOpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 138552 "powerpc.tcc"
					>));
					if(
#line 673 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138557 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138561 "powerpc.tcc"
					>(0x1000028aUL, 0xfc1f07ffUL, DecodeOpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 138565 "powerpc.tcc"
					>));
					if(
#line 667 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138570 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138574 "powerpc.tcc"
					>(0x1000020aUL, 0xfc1f07ffUL, DecodeOpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 138578 "powerpc.tcc"
					>));
					if(
#line 661 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138583 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138587 "powerpc.tcc"
					>(0x100002caUL, 0xfc1f07ffUL, DecodeOpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 138591 "powerpc.tcc"
					>));
					if(
#line 655 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138596 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138600 "powerpc.tcc"
					>(0x1000010aUL, 0xfc1f07ffUL, DecodeOpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 138604 "powerpc.tcc"
					>));
					if(
#line 649 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138609 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138613 "powerpc.tcc"
					>(0x100000ceUL, 0xfc0007ffUL, DecodeOpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 138617 "powerpc.tcc"
					>));
					if(
#line 643 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138622 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138626 "powerpc.tcc"
					>(0x1000004eUL, 0xfc0007ffUL, DecodeOpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 138630 "powerpc.tcc"
					>));
					if(
#line 637 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138635 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138639 "powerpc.tcc"
					>(0x1000008eUL, 0xfc0007ffUL, DecodeOpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 138643 "powerpc.tcc"
					>));
					if(
#line 631 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138648 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138652 "powerpc.tcc"
					>(0x1000000eUL, 0xfc0007ffUL, DecodeOpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 138656 "powerpc.tcc"
					>));
					if(
#line 625 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138661 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138665 "powerpc.tcc"
					>(0x1000014eUL, 0xfc0007ffUL, DecodeOpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 138669 "powerpc.tcc"
					>));
					if(
#line 619 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138674 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138678 "powerpc.tcc"
					>(0x100001ceUL, 0xfc0007ffUL, DecodeOpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 138682 "powerpc.tcc"
					>));
					if(
#line 613 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138687 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138691 "powerpc.tcc"
					>(0x1000010eUL, 0xfc0007ffUL, DecodeOpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 138695 "powerpc.tcc"
					>));
					if(
#line 607 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138700 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138704 "powerpc.tcc"
					>(0x1000018eUL, 0xfc0007ffUL, DecodeOpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 138708 "powerpc.tcc"
					>));
					if(
#line 601 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138713 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138717 "powerpc.tcc"
					>(0x1000030eUL, 0xfc0007ffUL, DecodeOpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 138721 "powerpc.tcc"
					>));
					if(
#line 595 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138726 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138730 "powerpc.tcc"
					>(0x1000002bUL, 0xfc00003fUL, DecodeOpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 138734 "powerpc.tcc"
					>));
					if(
#line 589 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138739 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138743 "powerpc.tcc"
					>(0x10000484UL, 0xfc0007ffUL, DecodeOpVor<
#line 38 "ppc.isa"
					CONFIG
#line 138747 "powerpc.tcc"
					>));
					if(
#line 583 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138752 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138756 "powerpc.tcc"
					>(0x10000504UL, 0xfc0007ffUL, DecodeOpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 138760 "powerpc.tcc"
					>));
					if(
#line 577 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138765 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138769 "powerpc.tcc"
					>(0x1000002fUL, 0xfc00003fUL, DecodeOpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138773 "powerpc.tcc"
					>));
					if(
#line 571 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138778 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138782 "powerpc.tcc"
					>(0x10000048UL, 0xfc0007ffUL, DecodeOpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 138786 "powerpc.tcc"
					>));
					if(
#line 565 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138791 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138795 "powerpc.tcc"
					>(0x10000008UL, 0xfc0007ffUL, DecodeOpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 138799 "powerpc.tcc"
					>));
					if(
#line 559 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138804 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138808 "powerpc.tcc"
					>(0x10000148UL, 0xfc0007ffUL, DecodeOpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 138812 "powerpc.tcc"
					>));
					if(
#line 553 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138817 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138821 "powerpc.tcc"
					>(0x10000108UL, 0xfc0007ffUL, DecodeOpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 138825 "powerpc.tcc"
					>));
					if(
#line 547 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138830 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138834 "powerpc.tcc"
					>(0x10000248UL, 0xfc0007ffUL, DecodeOpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 138838 "powerpc.tcc"
					>));
					if(
#line 541 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138843 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138847 "powerpc.tcc"
					>(0x10000208UL, 0xfc0007ffUL, DecodeOpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 138851 "powerpc.tcc"
					>));
					if(
#line 535 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138856 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138860 "powerpc.tcc"
					>(0x10000348UL, 0xfc0007ffUL, DecodeOpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 138864 "powerpc.tcc"
					>));
					if(
#line 529 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138869 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138873 "powerpc.tcc"
					>(0x10000308UL, 0xfc0007ffUL, DecodeOpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 138877 "powerpc.tcc"
					>));
					if(
#line 523 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138882 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138886 "powerpc.tcc"
					>(0x10000027UL, 0xfc00003fUL, DecodeOpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138890 "powerpc.tcc"
					>));
					if(
#line 517 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138895 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138899 "powerpc.tcc"
					>(0x10000026UL, 0xfc00003fUL, DecodeOpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138903 "powerpc.tcc"
					>));
					if(
#line 511 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138908 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138912 "powerpc.tcc"
					>(0x10000024UL, 0xfc00003fUL, DecodeOpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 138916 "powerpc.tcc"
					>));
					if(
#line 505 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138921 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138925 "powerpc.tcc"
					>(0x10000029UL, 0xfc00003fUL, DecodeOpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 138929 "powerpc.tcc"
					>));
					if(
#line 499 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138934 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138938 "powerpc.tcc"
					>(0x10000028UL, 0xfc00003fUL, DecodeOpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 138942 "powerpc.tcc"
					>));
					if(
#line 493 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138947 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138951 "powerpc.tcc"
					>(0x10000025UL, 0xfc00003fUL, DecodeOpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 138955 "powerpc.tcc"
					>));
					if(
#line 487 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138960 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138964 "powerpc.tcc"
					>(0x1000018cUL, 0xfc0007ffUL, DecodeOpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 138968 "powerpc.tcc"
					>));
					if(
#line 481 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138973 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138977 "powerpc.tcc"
					>(0x1000014cUL, 0xfc0007ffUL, DecodeOpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 138981 "powerpc.tcc"
					>));
					if(
#line 475 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138986 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138990 "powerpc.tcc"
					>(0x1000010cUL, 0xfc0007ffUL, DecodeOpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 138994 "powerpc.tcc"
					>));
					if(
#line 469 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138999 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139003 "powerpc.tcc"
					>(0x1000008cUL, 0xfc0007ffUL, DecodeOpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 139007 "powerpc.tcc"
					>));
					if(
#line 463 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139012 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139016 "powerpc.tcc"
					>(0x1000004cUL, 0xfc0007ffUL, DecodeOpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 139020 "powerpc.tcc"
					>));
					if(
#line 457 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139025 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139029 "powerpc.tcc"
					>(0x1000000cUL, 0xfc0007ffUL, DecodeOpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 139033 "powerpc.tcc"
					>));
					if(
#line 451 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139038 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139042 "powerpc.tcc"
					>(0x10000022UL, 0xfc00003fUL, DecodeOpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139046 "powerpc.tcc"
					>));
					if(
#line 445 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139051 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139055 "powerpc.tcc"
					>(0x10000282UL, 0xfc0007ffUL, DecodeOpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 139059 "powerpc.tcc"
					>));
					if(
#line 439 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139064 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139068 "powerpc.tcc"
					>(0x10000242UL, 0xfc0007ffUL, DecodeOpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 139072 "powerpc.tcc"
					>));
					if(
#line 433 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139077 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139081 "powerpc.tcc"
					>(0x10000202UL, 0xfc0007ffUL, DecodeOpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 139085 "powerpc.tcc"
					>));
					if(
#line 427 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139090 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139094 "powerpc.tcc"
					>(0x10000382UL, 0xfc0007ffUL, DecodeOpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 139098 "powerpc.tcc"
					>));
					if(
#line 421 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139103 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139107 "powerpc.tcc"
					>(0x10000342UL, 0xfc0007ffUL, DecodeOpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 139111 "powerpc.tcc"
					>));
					if(
#line 415 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139116 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139120 "powerpc.tcc"
					>(0x10000302UL, 0xfc0007ffUL, DecodeOpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 139124 "powerpc.tcc"
					>));
					if(
#line 409 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139129 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139133 "powerpc.tcc"
					>(0x1000044aUL, 0xfc0007ffUL, DecodeOpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 139137 "powerpc.tcc"
					>));
					if(
#line 403 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139142 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139146 "powerpc.tcc"
					>(0x10000021UL, 0xfc00003fUL, DecodeOpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139150 "powerpc.tcc"
					>));
					if(
#line 397 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139155 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139159 "powerpc.tcc"
					>(0x10000020UL, 0xfc00003fUL, DecodeOpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139163 "powerpc.tcc"
					>));
					if(
#line 391 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139168 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139172 "powerpc.tcc"
					>(0x10000082UL, 0xfc0007ffUL, DecodeOpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 139176 "powerpc.tcc"
					>));
					if(
#line 385 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139181 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139185 "powerpc.tcc"
					>(0x10000042UL, 0xfc0007ffUL, DecodeOpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 139189 "powerpc.tcc"
					>));
					if(
#line 379 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139194 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139198 "powerpc.tcc"
					>(0x10000002UL, 0xfc0007ffUL, DecodeOpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 139202 "powerpc.tcc"
					>));
					if(
#line 373 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139207 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139211 "powerpc.tcc"
					>(0x10000182UL, 0xfc0007ffUL, DecodeOpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 139215 "powerpc.tcc"
					>));
					if(
#line 367 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139220 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139224 "powerpc.tcc"
					>(0x10000142UL, 0xfc0007ffUL, DecodeOpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 139228 "powerpc.tcc"
					>));
					if(
#line 361 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139233 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139237 "powerpc.tcc"
					>(0x10000102UL, 0xfc0007ffUL, DecodeOpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 139241 "powerpc.tcc"
					>));
					if(
#line 355 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139246 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139250 "powerpc.tcc"
					>(0x1000040aUL, 0xfc0007ffUL, DecodeOpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 139254 "powerpc.tcc"
					>));
					if(
#line 349 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139259 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139263 "powerpc.tcc"
					>(0x1000002eUL, 0xfc00003fUL, DecodeOpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139267 "powerpc.tcc"
					>));
					if(
#line 343 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139272 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139276 "powerpc.tcc"
					>(0x100001caUL, 0xfc1f07ffUL, DecodeOpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 139280 "powerpc.tcc"
					>));
					if(
#line 337 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139285 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139289 "powerpc.tcc"
					>(0x1000018aUL, 0xfc1f07ffUL, DecodeOpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 139293 "powerpc.tcc"
					>));
					if(
#line 331 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139298 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139302 "powerpc.tcc"
					>(0x1000038aUL, 0xfc0007ffUL, DecodeOpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 139306 "powerpc.tcc"
					>));
					if(
#line 325 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139311 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139315 "powerpc.tcc"
					>(0x100003caUL, 0xfc0007ffUL, DecodeOpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 139319 "powerpc.tcc"
					>));
					if(
#line 319 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139324 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139328 "powerpc.tcc"
					>(0x10000286UL, 0xfc0003ffUL, DecodeOpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 139332 "powerpc.tcc"
					>));
					if(
#line 313 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139337 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139341 "powerpc.tcc"
					>(0x10000246UL, 0xfc0003ffUL, DecodeOpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 139345 "powerpc.tcc"
					>));
					if(
#line 307 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139350 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139354 "powerpc.tcc"
					>(0x10000206UL, 0xfc0003ffUL, DecodeOpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 139358 "powerpc.tcc"
					>));
					if(
#line 301 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139363 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139367 "powerpc.tcc"
					>(0x10000386UL, 0xfc0003ffUL, DecodeOpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 139371 "powerpc.tcc"
					>));
					if(
#line 295 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139376 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139380 "powerpc.tcc"
					>(0x10000346UL, 0xfc0003ffUL, DecodeOpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 139384 "powerpc.tcc"
					>));
					if(
#line 289 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139389 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139393 "powerpc.tcc"
					>(0x10000306UL, 0xfc0003ffUL, DecodeOpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 139397 "powerpc.tcc"
					>));
					if(
#line 283 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139402 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139406 "powerpc.tcc"
					>(0x100002c6UL, 0xfc0003ffUL, DecodeOpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 139410 "powerpc.tcc"
					>));
					if(
#line 277 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139415 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139419 "powerpc.tcc"
					>(0x100001c6UL, 0xfc0003ffUL, DecodeOpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 139423 "powerpc.tcc"
					>));
					if(
#line 271 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139428 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139432 "powerpc.tcc"
					>(0x10000086UL, 0xfc0003ffUL, DecodeOpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 139436 "powerpc.tcc"
					>));
					if(
#line 265 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139441 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139445 "powerpc.tcc"
					>(0x10000046UL, 0xfc0003ffUL, DecodeOpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 139449 "powerpc.tcc"
					>));
					if(
#line 259 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139454 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139458 "powerpc.tcc"
					>(0x10000006UL, 0xfc0003ffUL, DecodeOpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 139462 "powerpc.tcc"
					>));
					if(
#line 253 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139467 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139471 "powerpc.tcc"
					>(0x100000c6UL, 0xfc0003ffUL, DecodeOpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 139475 "powerpc.tcc"
					>));
					if(
#line 247 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139480 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139484 "powerpc.tcc"
					>(0x100003c6UL, 0xfc0003ffUL, DecodeOpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 139488 "powerpc.tcc"
					>));
					if(
#line 241 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139493 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139497 "powerpc.tcc"
					>(0x1000030aUL, 0xfc0007ffUL, DecodeOpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 139501 "powerpc.tcc"
					>));
					if(
#line 235 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139506 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139510 "powerpc.tcc"
					>(0x1000034aUL, 0xfc0007ffUL, DecodeOpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 139514 "powerpc.tcc"
					>));
					if(
#line 229 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139519 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139523 "powerpc.tcc"
					>(0x10000482UL, 0xfc0007ffUL, DecodeOpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 139527 "powerpc.tcc"
					>));
					if(
#line 223 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139532 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139536 "powerpc.tcc"
					>(0x10000442UL, 0xfc0007ffUL, DecodeOpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 139540 "powerpc.tcc"
					>));
					if(
#line 217 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139545 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139549 "powerpc.tcc"
					>(0x10000402UL, 0xfc0007ffUL, DecodeOpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 139553 "powerpc.tcc"
					>));
					if(
#line 211 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139558 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139562 "powerpc.tcc"
					>(0x10000582UL, 0xfc0007ffUL, DecodeOpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 139566 "powerpc.tcc"
					>));
					if(
#line 205 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139571 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139575 "powerpc.tcc"
					>(0x10000542UL, 0xfc0007ffUL, DecodeOpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 139579 "powerpc.tcc"
					>));
					if(
#line 199 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139584 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139588 "powerpc.tcc"
					>(0x10000502UL, 0xfc0007ffUL, DecodeOpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 139592 "powerpc.tcc"
					>));
					if(
#line 193 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139597 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139601 "powerpc.tcc"
					>(0x10000444UL, 0xfc0007ffUL, DecodeOpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 139605 "powerpc.tcc"
					>));
					if(
#line 187 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139610 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139614 "powerpc.tcc"
					>(0x10000404UL, 0xfc0007ffUL, DecodeOpVand<
#line 38 "ppc.isa"
					CONFIG
#line 139618 "powerpc.tcc"
					>));
					if(
#line 181 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139623 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139627 "powerpc.tcc"
					>(0x10000280UL, 0xfc0007ffUL, DecodeOpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 139631 "powerpc.tcc"
					>));
					if(
#line 175 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139636 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139640 "powerpc.tcc"
					>(0x10000080UL, 0xfc0007ffUL, DecodeOpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 139644 "powerpc.tcc"
					>));
					if(
#line 169 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139649 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139653 "powerpc.tcc"
					>(0x10000240UL, 0xfc0007ffUL, DecodeOpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 139657 "powerpc.tcc"
					>));
					if(
#line 163 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139662 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139666 "powerpc.tcc"
					>(0x10000040UL, 0xfc0007ffUL, DecodeOpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139670 "powerpc.tcc"
					>));
					if(
#line 157 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139675 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139679 "powerpc.tcc"
					>(0x10000200UL, 0xfc0007ffUL, DecodeOpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 139683 "powerpc.tcc"
					>));
					if(
#line 151 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139688 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139692 "powerpc.tcc"
					>(0x10000000UL, 0xfc0007ffUL, DecodeOpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 139696 "powerpc.tcc"
					>));
					if(
#line 145 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139701 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139705 "powerpc.tcc"
					>(0x10000380UL, 0xfc0007ffUL, DecodeOpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 139709 "powerpc.tcc"
					>));
					if(
#line 139 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139714 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139718 "powerpc.tcc"
					>(0x10000340UL, 0xfc0007ffUL, DecodeOpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139722 "powerpc.tcc"
					>));
					if(
#line 133 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139727 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139731 "powerpc.tcc"
					>(0x10000300UL, 0xfc0007ffUL, DecodeOpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 139735 "powerpc.tcc"
					>));
					if(
#line 127 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139740 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139744 "powerpc.tcc"
					>(0x1000000aUL, 0xfc0007ffUL, DecodeOpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139748 "powerpc.tcc"
					>));
					if(
#line 121 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139753 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139757 "powerpc.tcc"
					>(0x10000180UL, 0xfc0007ffUL, DecodeOpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 139761 "powerpc.tcc"
					>));
					if(
#line 115 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139766 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139770 "powerpc.tcc"
					>(0x7c0003ceUL, 0xfc0007ffUL, DecodeOpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139774 "powerpc.tcc"
					>));
					if(
#line 109 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139779 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139783 "powerpc.tcc"
					>(0x7c0001ceUL, 0xfc0007ffUL, DecodeOpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 139787 "powerpc.tcc"
					>));
					if(
#line 103 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139792 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139796 "powerpc.tcc"
					>(0x7c00018eUL, 0xfc0007ffUL, DecodeOpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139800 "powerpc.tcc"
					>));
					if(
#line 97 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139805 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139809 "powerpc.tcc"
					>(0x7c00014eUL, 0xfc0007ffUL, DecodeOpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139813 "powerpc.tcc"
					>));
					if(
#line 91 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139818 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139822 "powerpc.tcc"
					>(0x7c00010eUL, 0xfc0007ffUL, DecodeOpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139826 "powerpc.tcc"
					>));
					if(
#line 85 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139831 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139835 "powerpc.tcc"
					>(0x10000644UL, 0xffff07ffUL, DecodeOpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139839 "powerpc.tcc"
					>));
					if(
#line 79 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139844 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139848 "powerpc.tcc"
					>(0x10000604UL, 0xfc1fffffUL, DecodeOpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139852 "powerpc.tcc"
					>));
					if(
#line 73 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139857 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139861 "powerpc.tcc"
					>(0x7c0002ceUL, 0xfc0007ffUL, DecodeOpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139865 "powerpc.tcc"
					>));
					if(
#line 67 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139870 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139874 "powerpc.tcc"
					>(0x7c0000ceUL, 0xfc0007ffUL, DecodeOpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 139878 "powerpc.tcc"
					>));
					if(
#line 61 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139883 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139887 "powerpc.tcc"
					>(0x7c00004cUL, 0xfc0007ffUL, DecodeOpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 139891 "powerpc.tcc"
					>));
					if(
#line 55 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139896 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139900 "powerpc.tcc"
					>(0x7c00000cUL, 0xfc0007ffUL, DecodeOpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 139904 "powerpc.tcc"
					>));
					if(
#line 49 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139909 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139913 "powerpc.tcc"
					>(0x7c00008eUL, 0xfc0007ffUL, DecodeOpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139917 "powerpc.tcc"
					>));
					if(
#line 43 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139922 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139926 "powerpc.tcc"
					>(0x7c00004eUL, 0xfc0007ffUL, DecodeOpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139930 "powerpc.tcc"
					>));
					if(
#line 37 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139935 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139939 "powerpc.tcc"
					>(0x7c00000eUL, 0xfc0007ffUL, DecodeOpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139943 "powerpc.tcc"
					>));
					if(
#line 31 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139948 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139952 "powerpc.tcc"
					>(0x7e0002acUL, 0xff8007ffUL, DecodeOpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 139956 "powerpc.tcc"
					>));
					if(
#line 25 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139961 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139965 "powerpc.tcc"
					>(0x7e0002ecUL, 0xff8007ffUL, DecodeOpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 139969 "powerpc.tcc"
					>));
					if(
#line 19 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139974 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139978 "powerpc.tcc"
					>(0x7c0002ecUL, 0xff8007ffUL, DecodeOpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 139982 "powerpc.tcc"
					>));
					if(
#line 13 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139987 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139991 "powerpc.tcc"
					>(0x7c0002acUL, 0xff8007ffUL, DecodeOpDst<
#line 38 "ppc.isa"
					CONFIG
#line 139995 "powerpc.tcc"
					>));
					if(
#line 7 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140000 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140004 "powerpc.tcc"
					>(0x7e00066cUL, 0xff9fffffUL, DecodeOpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 140008 "powerpc.tcc"
					>));
					if(
#line 1 "/Users/gracia/Developer/svn/unisim/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140013 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140017 "powerpc.tcc"
					>(0x7c00066cUL, 0xff9fffffUL, DecodeOpDss<
#line 38 "ppc.isa"
					CONFIG
#line 140021 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140026 "powerpc.tcc"
					>(0x7c0001e4UL, 0xfc0007feUL, DecodeOpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140030 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140035 "powerpc.tcc"
					>(0x7c0001a4UL, 0xfc0007feUL, DecodeOpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 140039 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140044 "powerpc.tcc"
					>(0x7c000526UL, 0xfc0007feUL, DecodeOpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140048 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140053 "powerpc.tcc"
					>(0x7c0004a6UL, 0xfc0007feUL, DecodeOpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 140057 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140062 "powerpc.tcc"
					>(0x7c000124UL, 0xfc0007feUL, DecodeOpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140066 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140071 "powerpc.tcc"
					>(0x7c000120UL, 0xfc0007feUL, DecodeOpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140075 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140080 "powerpc.tcc"
					>(0x7c0002e6UL, 0xfc0007feUL, DecodeOpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 140084 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140089 "powerpc.tcc"
					>(0x7c0003a6UL, 0xfc0007feUL, DecodeOpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 140093 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140098 "powerpc.tcc"
					>(0x7c0002a6UL, 0xfc0007feUL, DecodeOpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 140102 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140107 "powerpc.tcc"
					>(0x7c0000a6UL, 0xfc0007feUL, DecodeOpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140111 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140116 "powerpc.tcc"
					>(0x7c000026UL, 0xfc0007feUL, DecodeOpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 140120 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140125 "powerpc.tcc"
					>(0x7c000400UL, 0xfc0007feUL, DecodeOpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 140129 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140134 "powerpc.tcc"
					>(0xc000000UL, 0xfc000000UL, DecodeOpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 140138 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140143 "powerpc.tcc"
					>(0x7c000008UL, 0xfc0007feUL, DecodeOpTw<
#line 38 "ppc.isa"
					CONFIG
#line 140147 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140152 "powerpc.tcc"
					>(0x4c000064UL, 0xfc0007feUL, DecodeOpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 140156 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140161 "powerpc.tcc"
					>(0x44000002UL, 0xfc000002UL, DecodeOpSc<
#line 38 "ppc.isa"
					CONFIG
#line 140165 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140170 "powerpc.tcc"
					>(0x7c0004acUL, 0xfc0007feUL, DecodeOpSync<
#line 38 "ppc.isa"
					CONFIG
#line 140174 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140179 "powerpc.tcc"
					>(0x7c00012dUL, 0xfc0007ffUL, DecodeOpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 140183 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140188 "powerpc.tcc"
					>(0x7c000028UL, 0xfc0007feUL, DecodeOpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 140192 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140197 "powerpc.tcc"
					>(0x4c00012cUL, 0xfc0007feUL, DecodeOpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 140201 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140206 "powerpc.tcc"
					>(0x7c0006acUL, 0xfc0007feUL, DecodeOpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 140210 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140215 "powerpc.tcc"
					>(0x7c00036cUL, 0xfc0007feUL, DecodeOpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 140219 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140224 "powerpc.tcc"
					>(0x7c00026cUL, 0xfc0007feUL, DecodeOpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 140228 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140233 "powerpc.tcc"
					>(0x7c0007e4UL, 0xffff07ffUL, DecodeOpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 140237 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140242 "powerpc.tcc"
					>(0x7c0007a4UL, 0xffff07ffUL, DecodeOpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 140246 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140251 "powerpc.tcc"
					>(0x7c00046cUL, 0xfc0007feUL, DecodeOpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 140255 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140260 "powerpc.tcc"
					>(0x7c000264UL, 0xfc0007feUL, DecodeOpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 140264 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140269 "powerpc.tcc"
					>(0x7c0002e4UL, 0xfc0007feUL, DecodeOpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 140273 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140278 "powerpc.tcc"
					>(0x7c0007acUL, 0xfc0007feUL, DecodeOpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140282 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140287 "powerpc.tcc"
					>(0x7c0007ecUL, 0xfc0007feUL, DecodeOpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 140291 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140296 "powerpc.tcc"
					>(0x7c0001ecUL, 0xfc0007feUL, DecodeOpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 140300 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140305 "powerpc.tcc"
					>(0x7c00022cUL, 0xfc0007feUL, DecodeOpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 140309 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140314 "powerpc.tcc"
					>(0x7c00006cUL, 0xfc0007feUL, DecodeOpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 140318 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140323 "powerpc.tcc"
					>(0x7c0003acUL, 0xfc0007feUL, DecodeOpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140327 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140332 "powerpc.tcc"
					>(0x7c0000acUL, 0xfc0007feUL, DecodeOpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 140336 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140341 "powerpc.tcc"
					>(0x7c0005ecUL, 0xfc0007feUL, DecodeOpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 140345 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140350 "powerpc.tcc"
					>(0x7c00052eUL, 0xfc0007feUL, DecodeOpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140354 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140359 "powerpc.tcc"
					>(0x7c00056eUL, 0xfc0007feUL, DecodeOpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140363 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140368 "powerpc.tcc"
					>(0xd4000000UL, 0xfc000000UL, DecodeOpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140372 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140377 "powerpc.tcc"
					>(0xd0000000UL, 0xfc000000UL, DecodeOpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 140381 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140386 "powerpc.tcc"
					>(0x7c0007aeUL, 0xfc0007feUL, DecodeOpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 140390 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140395 "powerpc.tcc"
					>(0x7c0005aeUL, 0xfc0007feUL, DecodeOpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140399 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140404 "powerpc.tcc"
					>(0x7c0005eeUL, 0xfc0007feUL, DecodeOpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140408 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140413 "powerpc.tcc"
					>(0xdc000000UL, 0xfc000000UL, DecodeOpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140417 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140422 "powerpc.tcc"
					>(0xd8000000UL, 0xfc000000UL, DecodeOpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 140426 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140431 "powerpc.tcc"
					>(0x7c00042eUL, 0xfc0007feUL, DecodeOpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140435 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140440 "powerpc.tcc"
					>(0x7c00046eUL, 0xfc0007feUL, DecodeOpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140444 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140449 "powerpc.tcc"
					>(0xc4000000UL, 0xfc000000UL, DecodeOpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140453 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140458 "powerpc.tcc"
					>(0xc0000000UL, 0xfc000000UL, DecodeOpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 140462 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140467 "powerpc.tcc"
					>(0x7c0004aeUL, 0xfc0007feUL, DecodeOpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140471 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140476 "powerpc.tcc"
					>(0x7c0004eeUL, 0xfc0007feUL, DecodeOpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140480 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140485 "powerpc.tcc"
					>(0xcc000000UL, 0xfc000000UL, DecodeOpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140489 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140494 "powerpc.tcc"
					>(0xc8000000UL, 0xfc000000UL, DecodeOpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 140498 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140503 "powerpc.tcc"
					>(0xbc000000UL, 0xfc000000UL, DecodeOpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 140507 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140512 "powerpc.tcc"
					>(0xb8000000UL, 0xfc000000UL, DecodeOpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 140516 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140521 "powerpc.tcc"
					>(0x7c00052aUL, 0xfc0007feUL, DecodeOpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 140525 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140530 "powerpc.tcc"
					>(0x7c0005aaUL, 0xfc0007feUL, DecodeOpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 140534 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140539 "powerpc.tcc"
					>(0x7c00042aUL, 0xfc0007feUL, DecodeOpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 140543 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140548 "powerpc.tcc"
					>(0x7c0004aaUL, 0xfc0007feUL, DecodeOpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 140552 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140557 "powerpc.tcc"
					>(0x7c00052cUL, 0xfc0007feUL, DecodeOpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140561 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140566 "powerpc.tcc"
					>(0x7c00072cUL, 0xfc0007feUL, DecodeOpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140570 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140575 "powerpc.tcc"
					>(0x7c00042cUL, 0xfc0007feUL, DecodeOpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140579 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140584 "powerpc.tcc"
					>(0x7c00062cUL, 0xfc0007feUL, DecodeOpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140588 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140593 "powerpc.tcc"
					>(0x7c00012eUL, 0xfc0007feUL, DecodeOpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 140597 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140602 "powerpc.tcc"
					>(0x7c00016eUL, 0xfc0007feUL, DecodeOpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 140606 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140611 "powerpc.tcc"
					>(0x94000000UL, 0xfc000000UL, DecodeOpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 140615 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140620 "powerpc.tcc"
					>(0x90000000UL, 0xfc000000UL, DecodeOpStw<
#line 38 "ppc.isa"
					CONFIG
#line 140624 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140629 "powerpc.tcc"
					>(0x7c00032eUL, 0xfc0007feUL, DecodeOpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 140633 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140638 "powerpc.tcc"
					>(0x7c00036eUL, 0xfc0007feUL, DecodeOpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 140642 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140647 "powerpc.tcc"
					>(0xb4000000UL, 0xfc000000UL, DecodeOpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 140651 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140656 "powerpc.tcc"
					>(0xb0000000UL, 0xfc000000UL, DecodeOpSth<
#line 38 "ppc.isa"
					CONFIG
#line 140660 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140665 "powerpc.tcc"
					>(0x7c0001aeUL, 0xfc0007feUL, DecodeOpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 140669 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140674 "powerpc.tcc"
					>(0x7c0001eeUL, 0xfc0007feUL, DecodeOpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 140678 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140683 "powerpc.tcc"
					>(0x9c000000UL, 0xfc000000UL, DecodeOpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 140687 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140692 "powerpc.tcc"
					>(0x98000000UL, 0xfc000000UL, DecodeOpStb<
#line 38 "ppc.isa"
					CONFIG
#line 140696 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140701 "powerpc.tcc"
					>(0x7c00002eUL, 0xfc0007feUL, DecodeOpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 140705 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140710 "powerpc.tcc"
					>(0x7c00006eUL, 0xfc0007feUL, DecodeOpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 140714 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140719 "powerpc.tcc"
					>(0x84000000UL, 0xfc000000UL, DecodeOpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 140723 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140728 "powerpc.tcc"
					>(0x80000000UL, 0xfc000000UL, DecodeOpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 140732 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140737 "powerpc.tcc"
					>(0x7c00022eUL, 0xfc0007feUL, DecodeOpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 140741 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140746 "powerpc.tcc"
					>(0x7c00026eUL, 0xfc0007feUL, DecodeOpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 140750 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140755 "powerpc.tcc"
					>(0xa4000000UL, 0xfc000000UL, DecodeOpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 140759 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140764 "powerpc.tcc"
					>(0xa0000000UL, 0xfc000000UL, DecodeOpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 140768 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140773 "powerpc.tcc"
					>(0x7c0002aeUL, 0xfc0007feUL, DecodeOpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 140777 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140782 "powerpc.tcc"
					>(0x7c0002eeUL, 0xfc0007feUL, DecodeOpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 140786 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140791 "powerpc.tcc"
					>(0xac000000UL, 0xfc000000UL, DecodeOpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 140795 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140800 "powerpc.tcc"
					>(0xa8000000UL, 0xfc000000UL, DecodeOpLha<
#line 38 "ppc.isa"
					CONFIG
#line 140804 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140809 "powerpc.tcc"
					>(0x7c0000aeUL, 0xfc0007feUL, DecodeOpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 140813 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140818 "powerpc.tcc"
					>(0x7c0000eeUL, 0xfc0007feUL, DecodeOpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 140822 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140827 "powerpc.tcc"
					>(0x8c000000UL, 0xfc000000UL, DecodeOpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 140831 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140836 "powerpc.tcc"
					>(0x88000000UL, 0xfc000000UL, DecodeOpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 140840 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140845 "powerpc.tcc"
					>(0x4c000000UL, 0xfc0007feUL, DecodeOpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140849 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140854 "powerpc.tcc"
					>(0x4c000182UL, 0xfc0007feUL, DecodeOpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 140858 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140863 "powerpc.tcc"
					>(0x4c000342UL, 0xfc0007feUL, DecodeOpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 140867 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140872 "powerpc.tcc"
					>(0x4c000382UL, 0xfc0007feUL, DecodeOpCror<
#line 38 "ppc.isa"
					CONFIG
#line 140876 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140881 "powerpc.tcc"
					>(0x4c000042UL, 0xfc0007feUL, DecodeOpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 140885 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140890 "powerpc.tcc"
					>(0x4c0001c2UL, 0xfc0007feUL, DecodeOpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 140894 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140899 "powerpc.tcc"
					>(0x4c000242UL, 0xfc0007feUL, DecodeOpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 140903 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140908 "powerpc.tcc"
					>(0x4c000102UL, 0xfc0007feUL, DecodeOpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 140912 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140917 "powerpc.tcc"
					>(0x4c000202UL, 0xfc0007feUL, DecodeOpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 140921 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140926 "powerpc.tcc"
					>(0x4c000020UL, 0xfc0007feUL, DecodeOpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 140930 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140935 "powerpc.tcc"
					>(0x4c000420UL, 0xfc0007feUL, DecodeOpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 140939 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140944 "powerpc.tcc"
					>(0x40000000UL, 0xfc000000UL, DecodeOpBc<
#line 38 "ppc.isa"
					CONFIG
#line 140948 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140953 "powerpc.tcc"
					>(0x48000000UL, 0xfc000000UL, DecodeOpB<
#line 38 "ppc.isa"
					CONFIG
#line 140957 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140962 "powerpc.tcc"
					>(0xfc00010cUL, 0xfc0007feUL, DecodeOpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 140966 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140971 "powerpc.tcc"
					>(0xfc00058eUL, 0xfc0007feUL, DecodeOpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 140975 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140980 "powerpc.tcc"
					>(0xfc00004cUL, 0xfc0007feUL, DecodeOpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 140984 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140989 "powerpc.tcc"
					>(0xfc00008cUL, 0xfc0007feUL, DecodeOpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 140993 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140998 "powerpc.tcc"
					>(0xfc00048eUL, 0xfc0007feUL, DecodeOpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 141002 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141007 "powerpc.tcc"
					>(0xfc000080UL, 0xfc0007feUL, DecodeOpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 141011 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141016 "powerpc.tcc"
					>(0xfc000050UL, 0xfc0007feUL, DecodeOpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 141020 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141025 "powerpc.tcc"
					>(0xfc000110UL, 0xfc0007feUL, DecodeOpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 141029 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141034 "powerpc.tcc"
					>(0xfc000090UL, 0xfc0007feUL, DecodeOpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 141038 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141043 "powerpc.tcc"
					>(0xfc000210UL, 0xfc0007feUL, DecodeOpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 141047 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141052 "powerpc.tcc"
					>(0xfc000018UL, 0xfc0007feUL, DecodeOpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 141056 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141061 "powerpc.tcc"
					>(0xfc00001eUL, 0xfc0007feUL, DecodeOpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 141065 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141070 "powerpc.tcc"
					>(0xfc00001cUL, 0xfc0007feUL, DecodeOpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 141074 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141079 "powerpc.tcc"
					>(0xfc000000UL, 0xfc0007feUL, DecodeOpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 141083 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141088 "powerpc.tcc"
					>(0xfc000040UL, 0xfc0007feUL, DecodeOpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 141092 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141097 "powerpc.tcc"
					>(0xec00003cUL, 0xfc00003eUL, DecodeOpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141101 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141106 "powerpc.tcc"
					>(0xfc00003cUL, 0xfc00003eUL, DecodeOpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141110 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141115 "powerpc.tcc"
					>(0xec00003eUL, 0xfc00003eUL, DecodeOpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141119 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141124 "powerpc.tcc"
					>(0xfc00003eUL, 0xfc00003eUL, DecodeOpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141128 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141133 "powerpc.tcc"
					>(0xec000038UL, 0xfc00003eUL, DecodeOpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141137 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141142 "powerpc.tcc"
					>(0xfc000038UL, 0xfc00003eUL, DecodeOpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141146 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141151 "powerpc.tcc"
					>(0xec00003aUL, 0xfc00003eUL, DecodeOpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141155 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141160 "powerpc.tcc"
					>(0xfc00003aUL, 0xfc00003eUL, DecodeOpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141164 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141169 "powerpc.tcc"
					>(0xec00002cUL, 0xfc00003eUL, DecodeOpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 141173 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141178 "powerpc.tcc"
					>(0xfc00002cUL, 0xfc00003eUL, DecodeOpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 141182 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141187 "powerpc.tcc"
					>(0xfc00002eUL, 0xfc00003eUL, DecodeOpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 141191 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141196 "powerpc.tcc"
					>(0xec000028UL, 0xfc00003eUL, DecodeOpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141200 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141205 "powerpc.tcc"
					>(0xfc000028UL, 0xfc00003eUL, DecodeOpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 141209 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141214 "powerpc.tcc"
					>(0xfc000034UL, 0xfc00003eUL, DecodeOpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 141218 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141223 "powerpc.tcc"
					>(0xec000030UL, 0xfc00003eUL, DecodeOpFres<
#line 38 "ppc.isa"
					CONFIG
#line 141227 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141232 "powerpc.tcc"
					>(0xec000032UL, 0xfc00003eUL, DecodeOpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 141236 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141241 "powerpc.tcc"
					>(0xfc000032UL, 0xfc00003eUL, DecodeOpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 141245 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141250 "powerpc.tcc"
					>(0xec000024UL, 0xfc00003eUL, DecodeOpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 141254 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141259 "powerpc.tcc"
					>(0xfc000024UL, 0xfc00003eUL, DecodeOpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 141263 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141268 "powerpc.tcc"
					>(0xec00002aUL, 0xfc00003eUL, DecodeOpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 141272 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141277 "powerpc.tcc"
					>(0xfc00002aUL, 0xfc00003eUL, DecodeOpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 141281 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141286 "powerpc.tcc"
					>(0x7c000430UL, 0xfc0007feUL, DecodeOpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 141290 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141295 "powerpc.tcc"
					>(0x7c000670UL, 0xfc0007feUL, DecodeOpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 141299 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141304 "powerpc.tcc"
					>(0x7c000630UL, 0xfc0007feUL, DecodeOpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 141308 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141313 "powerpc.tcc"
					>(0x7c000030UL, 0xfc0007feUL, DecodeOpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 141317 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141322 "powerpc.tcc"
					>(0x5c000000UL, 0xfc000000UL, DecodeOpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 141326 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141331 "powerpc.tcc"
					>(0x54000000UL, 0xfc000000UL, DecodeOpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 141335 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141340 "powerpc.tcc"
					>(0x50000000UL, 0xfc000000UL, DecodeOpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 141344 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141349 "powerpc.tcc"
					>(0x6c000000UL, 0xfc000000UL, DecodeOpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 141353 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141358 "powerpc.tcc"
					>(0x68000000UL, 0xfc000000UL, DecodeOpXori<
#line 38 "ppc.isa"
					CONFIG
#line 141362 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141367 "powerpc.tcc"
					>(0x7c000278UL, 0xfc0007feUL, DecodeOpXor<
#line 38 "ppc.isa"
					CONFIG
#line 141371 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141376 "powerpc.tcc"
					>(0x64000000UL, 0xfc000000UL, DecodeOpOris<
#line 38 "ppc.isa"
					CONFIG
#line 141380 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141385 "powerpc.tcc"
					>(0x60000000UL, 0xfc000000UL, DecodeOpOri<
#line 38 "ppc.isa"
					CONFIG
#line 141389 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141394 "powerpc.tcc"
					>(0x7c000338UL, 0xfc0007feUL, DecodeOpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 141398 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141403 "powerpc.tcc"
					>(0x7c000378UL, 0xfc0007feUL, DecodeOpOr<
#line 38 "ppc.isa"
					CONFIG
#line 141407 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141412 "powerpc.tcc"
					>(0x7c0000f8UL, 0xfc0007feUL, DecodeOpNor<
#line 38 "ppc.isa"
					CONFIG
#line 141416 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141421 "powerpc.tcc"
					>(0x7c0003b8UL, 0xfc0007feUL, DecodeOpNand<
#line 38 "ppc.isa"
					CONFIG
#line 141425 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141430 "powerpc.tcc"
					>(0x7c000734UL, 0xfc0007feUL, DecodeOpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 141434 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141439 "powerpc.tcc"
					>(0x7c000774UL, 0xfc0007feUL, DecodeOpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 141443 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141448 "powerpc.tcc"
					>(0x7c000238UL, 0xfc0007feUL, DecodeOpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 141452 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141457 "powerpc.tcc"
					>(0x7c000034UL, 0xfc0007feUL, DecodeOpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 141461 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141466 "powerpc.tcc"
					>(0x74000000UL, 0xfc000000UL, DecodeOpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 141470 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141475 "powerpc.tcc"
					>(0x70000000UL, 0xfc000000UL, DecodeOpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 141479 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141484 "powerpc.tcc"
					>(0x7c000078UL, 0xfc0007feUL, DecodeOpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 141488 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141493 "powerpc.tcc"
					>(0x7c000038UL, 0xfc0007feUL, DecodeOpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 141497 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141502 "powerpc.tcc"
					>(0x28000000UL, 0xfc000000UL, DecodeOpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 141506 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141511 "powerpc.tcc"
					>(0x7c000040UL, 0xfc0007feUL, DecodeOpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 141515 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141520 "powerpc.tcc"
					>(0x2c000000UL, 0xfc000000UL, DecodeOpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 141524 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141529 "powerpc.tcc"
					>(0x7c000000UL, 0xfc0007feUL, DecodeOpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 141533 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141538 "powerpc.tcc"
					>(0x7c000190UL, 0xfc0003feUL, DecodeOpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 141542 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141547 "powerpc.tcc"
					>(0x7c0001d0UL, 0xfc0003feUL, DecodeOpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 141551 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141556 "powerpc.tcc"
					>(0x20000000UL, 0xfc000000UL, DecodeOpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 141560 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141565 "powerpc.tcc"
					>(0x7c000110UL, 0xfc0003feUL, DecodeOpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 141569 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141574 "powerpc.tcc"
					>(0x7c000010UL, 0xfc0003feUL, DecodeOpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 141578 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141583 "powerpc.tcc"
					>(0x7c000050UL, 0xfc0003feUL, DecodeOpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 141587 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141592 "powerpc.tcc"
					>(0x7c0000d0UL, 0xfc0003feUL, DecodeOpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 141596 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141601 "powerpc.tcc"
					>(0x7c0001d6UL, 0xfc0003feUL, DecodeOpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 141605 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141610 "powerpc.tcc"
					>(0x1c000000UL, 0xfc000000UL, DecodeOpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 141614 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141619 "powerpc.tcc"
					>(0x7c000016UL, 0xfc0003feUL, DecodeOpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 141623 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141628 "powerpc.tcc"
					>(0x7c000096UL, 0xfc0003feUL, DecodeOpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 141632 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141637 "powerpc.tcc"
					>(0x7c000396UL, 0xfc0003feUL, DecodeOpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 141641 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141646 "powerpc.tcc"
					>(0x7c0003d6UL, 0xfc0003feUL, DecodeOpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 141650 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141655 "powerpc.tcc"
					>(0x7c000194UL, 0xfc0003feUL, DecodeOpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 141659 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141664 "powerpc.tcc"
					>(0x7c0001d4UL, 0xfc0003feUL, DecodeOpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 141668 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141673 "powerpc.tcc"
					>(0x3c000000UL, 0xfc000000UL, DecodeOpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 141677 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141682 "powerpc.tcc"
					>(0x34000000UL, 0xfc000000UL, DecodeOpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 141686 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141691 "powerpc.tcc"
					>(0x30000000UL, 0xfc000000UL, DecodeOpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 141695 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141700 "powerpc.tcc"
					>(0x38000000UL, 0xfc000000UL, DecodeOpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 141704 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141709 "powerpc.tcc"
					>(0x7c000114UL, 0xfc0003feUL, DecodeOpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 141713 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141718 "powerpc.tcc"
					>(0x7c000014UL, 0xfc0003feUL, DecodeOpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 141722 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141727 "powerpc.tcc"
					>(0x7c000214UL, 0xfc0003feUL, DecodeOpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 141731 "powerpc.tcc"
					>));
				}

				template <
#line 38 "ppc.isa"
				class
#line 141738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141741 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141746 "powerpc.tcc"
				>::~Decoder()
				{
					InvalidateDecodingCache();
				}

				template <
#line 38 "ppc.isa"
				class
#line 141755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141758 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141763 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141767 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr, CodeType code)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141773 "powerpc.tcc"
					> *operation;
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							operation->initialize_write_fpscr();
							operation->initialize_read_xer();
							operation->initialize_write_xer();
							operation->initialize_write_crbd();
							operation->initialize_write_cr();
							operation->initialize_read_crbb();
							operation->initialize_read_crba();
							operation->initialize_read_cr();
							operation->initialize_write_ctr();
							operation->initialize_write_lr();
							operation->initialize_write_ear();
							operation->initialize_write_ra();
							operation->initialize_write_rd();
							operation->initialize_write_fd();
							operation->initialize_read_ctr();
							operation->initialize_read_lr();
							operation->initialize_read_fs();
							operation->initialize_read_fc();
							operation->initialize_read_fb();
							operation->initialize_read_fa();
							operation->initialize_read_rs();
							operation->initialize_read_rb();
							operation->initialize_read_ra();
							operation->initialize_serialization();
							operation->initialize_unit();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141816 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					operation->initialize_write_fpscr();
					operation->initialize_read_xer();
					operation->initialize_write_xer();
					operation->initialize_write_crbd();
					operation->initialize_write_cr();
					operation->initialize_read_crbb();
					operation->initialize_read_crba();
					operation->initialize_read_cr();
					operation->initialize_write_ctr();
					operation->initialize_write_lr();
					operation->initialize_write_ear();
					operation->initialize_write_ra();
					operation->initialize_write_rd();
					operation->initialize_write_fd();
					operation->initialize_read_ctr();
					operation->initialize_read_lr();
					operation->initialize_read_fs();
					operation->initialize_read_fc();
					operation->initialize_read_fb();
					operation->initialize_read_fa();
					operation->initialize_read_rs();
					operation->initialize_read_rb();
					operation->initialize_read_ra();
					operation->initialize_serialization();
					operation->initialize_unit();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141855 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141860 "powerpc.tcc"
				>::InvalidateDecodingCache()
				{
					uint32_t index;
					mru_page = 0;
					for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
					{
						DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 141870 "powerpc.tcc"
						> *page, *next_page;
						page = decode_hash_table[index];
						if(page)
						{
							do
							{
								next_page = page->next;
								delete page;
								page = next_page;
							} while(page);
							decode_hash_table[index] = 0;
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 141889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141892 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141897 "powerpc.tcc"
				>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
				{
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					if(mru_page && mru_page->key == page_key) mru_page = 0;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 141906 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							decode_hash_table[index] = cur->next;
							delete cur;
							return;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next = 0;
									delete cur;
									return;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 141939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141942 "powerpc.tcc"
				>
				inline DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 141947 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141951 "powerpc.tcc"
				>::FindPage(typename CONFIG::address_t page_key)
				{
					if(mru_page && mru_page->key == page_key) return mru_page;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 141959 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							mru_page = cur;
							return cur;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next= decode_hash_table[index];
									decode_hash_table[index] = cur;
									mru_page = cur;
									return cur;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
					return 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141996 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 142001 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142005 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr, CodeType insn)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 142011 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142017 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142025 "powerpc.tcc"
						> (page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
						return operation;
						delete operation;
					}
					operation = NCDecode(addr, insn);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142050 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142055 "powerpc.tcc"
				>::SetLittleEndian()
				{
					is_little_endian = true;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142067 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142072 "powerpc.tcc"
				>::SetBigEndian()
				{
					is_little_endian = false;
				}

} } } } }
